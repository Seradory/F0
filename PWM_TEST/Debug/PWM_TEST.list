
PWM_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b88  08004b88  00005b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc0  08004bc0  00007800  2**0
                  CONTENTS
  4 .ARM          00000000  08004bc0  08004bc0  00007800  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bc0  08004bc0  00007800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc0  08004bc0  00005bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bc4  08004bc4  00005bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004bc8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .myCustomSection 00000800  0800f000  0800f000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000a8c  20000024  20000024  00008024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab0  20000ab0  00008024  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00007800  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d8ba  00000000  00000000  00007828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2e  00000000  00000000  000150e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00016f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d5  00000000  00000000  00017b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001256e  00000000  00000000  00018555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edd7  00000000  00000000  0002aac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00070ea3  00000000  00000000  0003989a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa73d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ce8  00000000  00000000  000aa780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000ad468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b70 	.word	0x08004b70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08004b70 	.word	0x08004b70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <start_pwm_m>:
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim14;


 void start_pwm_m(uint32_t tick_25us)
 {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
     // PWM frekansı ve duty cycle ayarları
	  htim3.Instance->ARR = tick_25us - 1;
 8000228:	4b08      	ldr	r3, [pc, #32]	@ (800024c <start_pwm_m+0x2c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	3a01      	subs	r2, #1
 8000230:	62da      	str	r2, [r3, #44]	@ 0x2c
	  htim3.Instance->CCR2=2;
 8000232:	4b06      	ldr	r3, [pc, #24]	@ (800024c <start_pwm_m+0x2c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2202      	movs	r2, #2
 8000238:	639a      	str	r2, [r3, #56]	@ 0x38
	  //sConfigOC.Pulse = tick/2;

     // PWM başlatma
     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <start_pwm_m+0x2c>)
 800023c:	2104      	movs	r1, #4
 800023e:	0018      	movs	r0, r3
 8000240:	f002 f9be 	bl	80025c0 <HAL_TIM_PWM_Start>
  }
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000012c 	.word	0x2000012c

08000250 <stop_pwm_m>:

  // PWM durdurma fonksiyonu
 void stop_pwm_m() {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000254:	4b03      	ldr	r3, [pc, #12]	@ (8000264 <stop_pwm_m+0x14>)
 8000256:	2104      	movs	r1, #4
 8000258:	0018      	movs	r0, r3
 800025a:	f002 fa69 	bl	8002730 <HAL_TIM_PWM_Stop>
  }
 800025e:	46c0      	nop			@ (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	2000012c 	.word	0x2000012c

08000268 <start_uart_timer>:

 void start_uart_timer()
  {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  	htim6.Instance->CR1=0;
 800026c:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <start_uart_timer+0x34>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
  	htim6.Instance->SR=0;
 8000274:	4b09      	ldr	r3, [pc, #36]	@ (800029c <start_uart_timer+0x34>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  	htim6.Instance->CNT=0;
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <start_uart_timer+0x34>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2200      	movs	r2, #0
 8000282:	625a      	str	r2, [r3, #36]	@ 0x24
  	htim6.Instance->DIER=1;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <start_uart_timer+0x34>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2201      	movs	r2, #1
 800028a:	60da      	str	r2, [r3, #12]
  	htim6.Instance->CR1=1;
 800028c:	4b03      	ldr	r3, [pc, #12]	@ (800029c <start_uart_timer+0x34>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2201      	movs	r2, #1
 8000292:	601a      	str	r2, [r3, #0]

  }
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	20000174 	.word	0x20000174

080002a0 <start_int_timer>:

 void start_int_timer(TIM_HandleTypeDef *timer,int count)
 {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	 timer->Instance->CR1=0;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
	 timer->Instance->SR=0;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
	 timer->Instance->CNT=1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2201      	movs	r2, #1
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24
	 timer->Instance->ARR=count;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	683a      	ldr	r2, [r7, #0]
 80002c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	 timer->Instance->DIER=1;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2201      	movs	r2, #1
 80002d0:	60da      	str	r2, [r3, #12]
	 timer->Instance->CR1=1;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2201      	movs	r2, #1
 80002d8:	601a      	str	r2, [r3, #0]

 }
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b002      	add	sp, #8
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <stop_int_timer>:

 void stop_int_timer(TIM_HandleTypeDef *timer)
 {
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b082      	sub	sp, #8
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
	 timer->Instance->CR1=0;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
	 timer->Instance->SR=0;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
	 timer->Instance->CNT=1;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2201      	movs	r2, #1
 8000300:	625a      	str	r2, [r3, #36]	@ 0x24
	 timer->Instance->DIER=1;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]

 }
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b002      	add	sp, #8
 8000310:	bd80      	pop	{r7, pc}

08000312 <enable_triac_int>:

 void enable_triac_int()
 {
 8000312:	b580      	push	{r7, lr}
 8000314:	af00      	add	r7, sp, #0
	 HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000316:	2005      	movs	r0, #5
 8000318:	f001 f8f9 	bl	800150e <HAL_NVIC_EnableIRQ>
 };
 800031c:	46c0      	nop			@ (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <disable_triac_int>:
 void disable_triac_int()
 {
 8000322:	b580      	push	{r7, lr}
 8000324:	af00      	add	r7, sp, #0
	 HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8000326:	2005      	movs	r0, #5
 8000328:	f001 f901 	bl	800152e <HAL_NVIC_DisableIRQ>
 };
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <HAL_UART_RxCpltCallback>:


///////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a98      	ldr	r2, [pc, #608]	@ (80005a4 <HAL_UART_RxCpltCallback+0x270>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d000      	beq.n	8000348 <HAL_UART_RxCpltCallback+0x14>
 8000346:	e129      	b.n	800059c <HAL_UART_RxCpltCallback+0x268>
  {
	  start_uart_timer();
 8000348:	f7ff ff8e 	bl	8000268 <start_uart_timer>
	  if(HeaderOrData)
 800034c:	4b96      	ldr	r3, [pc, #600]	@ (80005a8 <HAL_UART_RxCpltCallback+0x274>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d100      	bne.n	8000356 <HAL_UART_RxCpltCallback+0x22>
 8000354:	e07a      	b.n	800044c <HAL_UART_RxCpltCallback+0x118>
	  {
		  Mesaj_id=rx_Buffer[0]<<24 | rx_Buffer[1]<<16 | rx_Buffer[2]<<8 | rx_Buffer[3];
 8000356:	4b95      	ldr	r3, [pc, #596]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	061a      	lsls	r2, r3, #24
 800035c:	4b93      	ldr	r3, [pc, #588]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 800035e:	785b      	ldrb	r3, [r3, #1]
 8000360:	041b      	lsls	r3, r3, #16
 8000362:	431a      	orrs	r2, r3
 8000364:	4b91      	ldr	r3, [pc, #580]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000366:	789b      	ldrb	r3, [r3, #2]
 8000368:	021b      	lsls	r3, r3, #8
 800036a:	4313      	orrs	r3, r2
 800036c:	4a8f      	ldr	r2, [pc, #572]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 800036e:	78d2      	ldrb	r2, [r2, #3]
 8000370:	4313      	orrs	r3, r2
 8000372:	001a      	movs	r2, r3
 8000374:	4b8e      	ldr	r3, [pc, #568]	@ (80005b0 <HAL_UART_RxCpltCallback+0x27c>)
 8000376:	601a      	str	r2, [r3, #0]
		  Mesaj_boyu=rx_Buffer[4]<<24 | rx_Buffer[5]<<16 | rx_Buffer[6]<<8 | rx_Buffer[7];
 8000378:	4b8c      	ldr	r3, [pc, #560]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	061a      	lsls	r2, r3, #24
 800037e:	4b8b      	ldr	r3, [pc, #556]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000380:	795b      	ldrb	r3, [r3, #5]
 8000382:	041b      	lsls	r3, r3, #16
 8000384:	431a      	orrs	r2, r3
 8000386:	4b89      	ldr	r3, [pc, #548]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000388:	799b      	ldrb	r3, [r3, #6]
 800038a:	021b      	lsls	r3, r3, #8
 800038c:	4313      	orrs	r3, r2
 800038e:	4a87      	ldr	r2, [pc, #540]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000390:	79d2      	ldrb	r2, [r2, #7]
 8000392:	4313      	orrs	r3, r2
 8000394:	001a      	movs	r2, r3
 8000396:	4b87      	ldr	r3, [pc, #540]	@ (80005b4 <HAL_UART_RxCpltCallback+0x280>)
 8000398:	601a      	str	r2, [r3, #0]

		  if(Mesaj_id==0xF1000000)
 800039a:	4b85      	ldr	r3, [pc, #532]	@ (80005b0 <HAL_UART_RxCpltCallback+0x27c>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	23f1      	movs	r3, #241	@ 0xf1
 80003a0:	061b      	lsls	r3, r3, #24
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d116      	bne.n	80003d4 <HAL_UART_RxCpltCallback+0xa0>
		  {
			  //HAL_TIM_Base_Start_IT(&htim6);
			  start_int_timer(&htim6,2000);
 80003a6:	23fa      	movs	r3, #250	@ 0xfa
 80003a8:	00da      	lsls	r2, r3, #3
 80003aa:	4b83      	ldr	r3, [pc, #524]	@ (80005b8 <HAL_UART_RxCpltCallback+0x284>)
 80003ac:	0011      	movs	r1, r2
 80003ae:	0018      	movs	r0, r3
 80003b0:	f7ff ff76 	bl	80002a0 <start_int_timer>
			  HeaderOrData=0x00;
 80003b4:	4b7c      	ldr	r3, [pc, #496]	@ (80005a8 <HAL_UART_RxCpltCallback+0x274>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 80003ba:	2380      	movs	r3, #128	@ 0x80
 80003bc:	011a      	lsls	r2, r3, #4
 80003be:	4b7b      	ldr	r3, [pc, #492]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 80003c0:	2100      	movs	r1, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f004 fba8 	bl	8004b18 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,1);
 80003c8:	4978      	ldr	r1, [pc, #480]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 80003ca:	4b7c      	ldr	r3, [pc, #496]	@ (80005bc <HAL_UART_RxCpltCallback+0x288>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	0018      	movs	r0, r3
 80003d0:	f003 fa2d 	bl	800382e <HAL_UART_Receive_IT>

		  }
		  if(Mesaj_id==0xF3000000)
 80003d4:	4b76      	ldr	r3, [pc, #472]	@ (80005b0 <HAL_UART_RxCpltCallback+0x27c>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	23f3      	movs	r3, #243	@ 0xf3
 80003da:	061b      	lsls	r3, r3, #24
 80003dc:	429a      	cmp	r2, r3
 80003de:	d116      	bne.n	800040e <HAL_UART_RxCpltCallback+0xda>
		  {
			  //HAL_TIM_Base_Start_IT(&htim6);
			  start_int_timer(&htim6,2000);
 80003e0:	23fa      	movs	r3, #250	@ 0xfa
 80003e2:	00da      	lsls	r2, r3, #3
 80003e4:	4b74      	ldr	r3, [pc, #464]	@ (80005b8 <HAL_UART_RxCpltCallback+0x284>)
 80003e6:	0011      	movs	r1, r2
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff59 	bl	80002a0 <start_int_timer>
			  HeaderOrData=0x00;
 80003ee:	4b6e      	ldr	r3, [pc, #440]	@ (80005a8 <HAL_UART_RxCpltCallback+0x274>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 80003f4:	2380      	movs	r3, #128	@ 0x80
 80003f6:	011a      	lsls	r2, r3, #4
 80003f8:	4b6c      	ldr	r3, [pc, #432]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	0018      	movs	r0, r3
 80003fe:	f004 fb8b 	bl	8004b18 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,1701); //50 1700 olacak.
 8000402:	4a6f      	ldr	r2, [pc, #444]	@ (80005c0 <HAL_UART_RxCpltCallback+0x28c>)
 8000404:	4969      	ldr	r1, [pc, #420]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000406:	4b6d      	ldr	r3, [pc, #436]	@ (80005bc <HAL_UART_RxCpltCallback+0x288>)
 8000408:	0018      	movs	r0, r3
 800040a:	f003 fa10 	bl	800382e <HAL_UART_Receive_IT>
		  }
		  if(Mesaj_id==0xF5000000)
 800040e:	4b68      	ldr	r3, [pc, #416]	@ (80005b0 <HAL_UART_RxCpltCallback+0x27c>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	23f5      	movs	r3, #245	@ 0xf5
 8000414:	061b      	lsls	r3, r3, #24
 8000416:	429a      	cmp	r2, r3
 8000418:	d000      	beq.n	800041c <HAL_UART_RxCpltCallback+0xe8>
 800041a:	e0bf      	b.n	800059c <HAL_UART_RxCpltCallback+0x268>
		  {
			 // HAL_TIM_Base_Start_IT(&htim6);
			  start_int_timer(&htim6,2000);
 800041c:	23fa      	movs	r3, #250	@ 0xfa
 800041e:	00da      	lsls	r2, r3, #3
 8000420:	4b65      	ldr	r3, [pc, #404]	@ (80005b8 <HAL_UART_RxCpltCallback+0x284>)
 8000422:	0011      	movs	r1, r2
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ff3b 	bl	80002a0 <start_int_timer>
			  HeaderOrData=0x00;
 800042a:	4b5f      	ldr	r3, [pc, #380]	@ (80005a8 <HAL_UART_RxCpltCallback+0x274>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 8000430:	2380      	movs	r3, #128	@ 0x80
 8000432:	011a      	lsls	r2, r3, #4
 8000434:	4b5d      	ldr	r3, [pc, #372]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000436:	2100      	movs	r1, #0
 8000438:	0018      	movs	r0, r3
 800043a:	f004 fb6d 	bl	8004b18 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,102); //doğru mesaj boylarını gir.
 800043e:	495b      	ldr	r1, [pc, #364]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000440:	4b5e      	ldr	r3, [pc, #376]	@ (80005bc <HAL_UART_RxCpltCallback+0x288>)
 8000442:	2266      	movs	r2, #102	@ 0x66
 8000444:	0018      	movs	r0, r3
 8000446:	f003 f9f2 	bl	800382e <HAL_UART_Receive_IT>
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
		  }
	  }

  }
}
 800044a:	e0a7      	b.n	800059c <HAL_UART_RxCpltCallback+0x268>
		  if(Mesaj_id==0xF1000000)
 800044c:	4b58      	ldr	r3, [pc, #352]	@ (80005b0 <HAL_UART_RxCpltCallback+0x27c>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	23f1      	movs	r3, #241	@ 0xf1
 8000452:	061b      	lsls	r3, r3, #24
 8000454:	429a      	cmp	r2, r3
 8000456:	d119      	bne.n	800048c <HAL_UART_RxCpltCallback+0x158>
			  HAL_TIM_Base_Stop_IT(&htim6);
 8000458:	4b57      	ldr	r3, [pc, #348]	@ (80005b8 <HAL_UART_RxCpltCallback+0x284>)
 800045a:	0018      	movs	r0, r3
 800045c:	f002 f82a 	bl	80024b4 <HAL_TIM_Base_Stop_IT>
			  HeaderOrData=0x01;
 8000460:	4b51      	ldr	r3, [pc, #324]	@ (80005a8 <HAL_UART_RxCpltCallback+0x274>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 8000466:	2380      	movs	r3, #128	@ 0x80
 8000468:	011a      	lsls	r2, r3, #4
 800046a:	4b50      	ldr	r3, [pc, #320]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 800046c:	2100      	movs	r1, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f004 fb52 	bl	8004b18 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,8); // tekrardan header bekliyor
 8000474:	494d      	ldr	r1, [pc, #308]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000476:	4b51      	ldr	r3, [pc, #324]	@ (80005bc <HAL_UART_RxCpltCallback+0x288>)
 8000478:	2208      	movs	r2, #8
 800047a:	0018      	movs	r0, r3
 800047c:	f003 f9d7 	bl	800382e <HAL_UART_Receive_IT>
			  HAL_UART_Transmit(huart, Versiyon_Cevap, 8, 5000);
 8000480:	4b50      	ldr	r3, [pc, #320]	@ (80005c4 <HAL_UART_RxCpltCallback+0x290>)
 8000482:	4951      	ldr	r1, [pc, #324]	@ (80005c8 <HAL_UART_RxCpltCallback+0x294>)
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	2208      	movs	r2, #8
 8000488:	f003 f932 	bl	80036f0 <HAL_UART_Transmit>
		  if(Mesaj_id==0xF3000000)
 800048c:	4b48      	ldr	r3, [pc, #288]	@ (80005b0 <HAL_UART_RxCpltCallback+0x27c>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	23f3      	movs	r3, #243	@ 0xf3
 8000492:	061b      	lsls	r3, r3, #24
 8000494:	429a      	cmp	r2, r3
 8000496:	d11c      	bne.n	80004d2 <HAL_UART_RxCpltCallback+0x19e>
		      HAL_TIM_Base_Stop_IT(&htim6);
 8000498:	4b47      	ldr	r3, [pc, #284]	@ (80005b8 <HAL_UART_RxCpltCallback+0x284>)
 800049a:	0018      	movs	r0, r3
 800049c:	f002 f80a 	bl	80024b4 <HAL_TIM_Base_Stop_IT>
			  HeaderOrData=0x01;
 80004a0:	4b41      	ldr	r3, [pc, #260]	@ (80005a8 <HAL_UART_RxCpltCallback+0x274>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 80004a6:	2380      	movs	r3, #128	@ 0x80
 80004a8:	011a      	lsls	r2, r3, #4
 80004aa:	4b40      	ldr	r3, [pc, #256]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 80004ac:	2100      	movs	r1, #0
 80004ae:	0018      	movs	r0, r3
 80004b0:	f004 fb32 	bl	8004b18 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,8); // tekrardan header bekliyor
 80004b4:	493d      	ldr	r1, [pc, #244]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 80004b6:	4b41      	ldr	r3, [pc, #260]	@ (80005bc <HAL_UART_RxCpltCallback+0x288>)
 80004b8:	2208      	movs	r2, #8
 80004ba:	0018      	movs	r0, r3
 80004bc:	f003 f9b7 	bl	800382e <HAL_UART_Receive_IT>
			  OK_NOK_Cevap[3]=0xf4;
 80004c0:	4b42      	ldr	r3, [pc, #264]	@ (80005cc <HAL_UART_RxCpltCallback+0x298>)
 80004c2:	22f4      	movs	r2, #244	@ 0xf4
 80004c4:	70da      	strb	r2, [r3, #3]
			  HAL_UART_Transmit(huart, OK_NOK_Cevap, 8, 5000);
 80004c6:	4b3f      	ldr	r3, [pc, #252]	@ (80005c4 <HAL_UART_RxCpltCallback+0x290>)
 80004c8:	4940      	ldr	r1, [pc, #256]	@ (80005cc <HAL_UART_RxCpltCallback+0x298>)
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	2208      	movs	r2, #8
 80004ce:	f003 f90f 	bl	80036f0 <HAL_UART_Transmit>
		  if(Mesaj_id==0xF5000000)
 80004d2:	4b37      	ldr	r3, [pc, #220]	@ (80005b0 <HAL_UART_RxCpltCallback+0x27c>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	23f5      	movs	r3, #245	@ 0xf5
 80004d8:	061b      	lsls	r3, r3, #24
 80004da:	429a      	cmp	r2, r3
 80004dc:	d15e      	bne.n	800059c <HAL_UART_RxCpltCallback+0x268>
			  HAL_TIM_Base_Stop_IT(&htim6);
 80004de:	4b36      	ldr	r3, [pc, #216]	@ (80005b8 <HAL_UART_RxCpltCallback+0x284>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 ffe7 	bl	80024b4 <HAL_TIM_Base_Stop_IT>
			  HeaderOrData=0x01;
 80004e6:	4b30      	ldr	r3, [pc, #192]	@ (80005a8 <HAL_UART_RxCpltCallback+0x274>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,8); // tekrardan header bekliyor
 80004ec:	492f      	ldr	r1, [pc, #188]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 80004ee:	4b33      	ldr	r3, [pc, #204]	@ (80005bc <HAL_UART_RxCpltCallback+0x288>)
 80004f0:	2208      	movs	r2, #8
 80004f2:	0018      	movs	r0, r3
 80004f4:	f003 f99b 	bl	800382e <HAL_UART_Receive_IT>
			  OK_NOK_Cevap[3]=0xf6;
 80004f8:	4b34      	ldr	r3, [pc, #208]	@ (80005cc <HAL_UART_RxCpltCallback+0x298>)
 80004fa:	22f6      	movs	r2, #246	@ 0xf6
 80004fc:	70da      	strb	r2, [r3, #3]
			  HAL_UART_Transmit(huart, OK_NOK_Cevap, 8, 5000);
 80004fe:	4b31      	ldr	r3, [pc, #196]	@ (80005c4 <HAL_UART_RxCpltCallback+0x290>)
 8000500:	4932      	ldr	r1, [pc, #200]	@ (80005cc <HAL_UART_RxCpltCallback+0x298>)
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	2208      	movs	r2, #8
 8000506:	f003 f8f3 	bl	80036f0 <HAL_UART_Transmit>
			  if(rx_Buffer[0]!=0xff) // senaryo başlat ff gelirse durdur ve sistemi 0la. diğer türlü başlat.
 800050a:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2bff      	cmp	r3, #255	@ 0xff
 8000510:	d034      	beq.n	800057c <HAL_UART_RxCpltCallback+0x248>
				  if(test_seq==1)
 8000512:	4b2f      	ldr	r3, [pc, #188]	@ (80005d0 <HAL_UART_RxCpltCallback+0x29c>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d113      	bne.n	8000542 <HAL_UART_RxCpltCallback+0x20e>
					  Veri_Matrisi[0].V_Acis_Zaman=test_on_time;
 800051a:	4b2e      	ldr	r3, [pc, #184]	@ (80005d4 <HAL_UART_RxCpltCallback+0x2a0>)
 800051c:	881a      	ldrh	r2, [r3, #0]
 800051e:	4b2e      	ldr	r3, [pc, #184]	@ (80005d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000520:	811a      	strh	r2, [r3, #8]
					  Veri_Matrisi[0].V_Kapanis_Zaman=test_off_time;
 8000522:	4b2e      	ldr	r3, [pc, #184]	@ (80005dc <HAL_UART_RxCpltCallback+0x2a8>)
 8000524:	881a      	ldrh	r2, [r3, #0]
 8000526:	4b2c      	ldr	r3, [pc, #176]	@ (80005d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000528:	815a      	strh	r2, [r3, #10]
					  Veri_Matrisi[0].M_deger=test_m;
 800052a:	4b2d      	ldr	r3, [pc, #180]	@ (80005e0 <HAL_UART_RxCpltCallback+0x2ac>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b2a      	ldr	r3, [pc, #168]	@ (80005d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000530:	605a      	str	r2, [r3, #4]
					  Veri_Matrisi[0].V_deger=test_v;
 8000532:	4b2c      	ldr	r3, [pc, #176]	@ (80005e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b28      	ldr	r3, [pc, #160]	@ (80005d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000538:	601a      	str	r2, [r3, #0]
					  Veri_Matrisi[0].M_deger=test_m;
 800053a:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <HAL_UART_RxCpltCallback+0x2ac>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b26      	ldr	r3, [pc, #152]	@ (80005d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000540:	605a      	str	r2, [r3, #4]
				  start_int_timer(&htim14, Veri_Matrisi[Aktif_Indeks].V_Acis_Zaman);
 8000542:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	4a24      	ldr	r2, [pc, #144]	@ (80005d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	18d3      	adds	r3, r2, r3
 800054c:	3308      	adds	r3, #8
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	001a      	movs	r2, r3
 8000552:	4b26      	ldr	r3, [pc, #152]	@ (80005ec <HAL_UART_RxCpltCallback+0x2b8>)
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff fea2 	bl	80002a0 <start_int_timer>
				  enable_triac_int();
 800055c:	f7ff fed9 	bl	8000312 <enable_triac_int>
				  start_pwm_m(Veri_Matrisi[Aktif_Indeks].M_deger);
 8000560:	4b21      	ldr	r3, [pc, #132]	@ (80005e8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4a1c      	ldr	r2, [pc, #112]	@ (80005d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000566:	011b      	lsls	r3, r3, #4
 8000568:	18d3      	adds	r3, r2, r3
 800056a:	3304      	adds	r3, #4
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fe56 	bl	8000220 <start_pwm_m>
				  on_or_off_time=1; //Von da başlayacak.
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e008      	b.n	800058e <HAL_UART_RxCpltCallback+0x25a>
				  HAL_TIM_Base_Stop_IT(&htim14);
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <HAL_UART_RxCpltCallback+0x2b8>)
 800057e:	0018      	movs	r0, r3
 8000580:	f001 ff98 	bl	80024b4 <HAL_TIM_Base_Stop_IT>
				  disable_triac_int();
 8000584:	f7ff fecd 	bl	8000322 <disable_triac_int>
				  on_or_off_time=0; //bura kritik değil uarttan başlarken hep  vonda başlıyor nasılsa.
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <HAL_UART_RxCpltCallback+0x2bc>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 800058e:	2380      	movs	r3, #128	@ 0x80
 8000590:	011a      	lsls	r2, r3, #4
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <HAL_UART_RxCpltCallback+0x278>)
 8000594:	2100      	movs	r1, #0
 8000596:	0018      	movs	r0, r3
 8000598:	f004 fabe 	bl	8004b18 <memset>
}
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b002      	add	sp, #8
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40004400 	.word	0x40004400
 80005a8:	20000000 	.word	0x20000000
 80005ac:	2000028c 	.word	0x2000028c
 80005b0:	20000a8c 	.word	0x20000a8c
 80005b4:	20000a90 	.word	0x20000a90
 80005b8:	20000174 	.word	0x20000174
 80005bc:	20000204 	.word	0x20000204
 80005c0:	000006a5 	.word	0x000006a5
 80005c4:	00001388 	.word	0x00001388
 80005c8:	20000004 	.word	0x20000004
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	20000a98 	.word	0x20000a98
 80005d4:	20000a9a 	.word	0x20000a9a
 80005d8:	20000040 	.word	0x20000040
 80005dc:	20000a9c 	.word	0x20000a9c
 80005e0:	20000aa0 	.word	0x20000aa0
 80005e4:	20000aa4 	.word	0x20000aa4
 80005e8:	200000e0 	.word	0x200000e0
 80005ec:	200001bc 	.word	0x200001bc
 80005f0:	20000014 	.word	0x20000014

080005f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)		// uart protection
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a4f      	ldr	r2, [pc, #316]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d119      	bne.n	800063a <HAL_TIM_PeriodElapsedCallback+0x46>
    {
    	HAL_TIM_Base_Stop_IT(&htim6);
 8000606:	4b4f      	ldr	r3, [pc, #316]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000608:	0018      	movs	r0, r3
 800060a:	f001 ff53 	bl	80024b4 <HAL_TIM_Base_Stop_IT>
    	HeaderOrData=0x01;
 800060e:	4b4e      	ldr	r3, [pc, #312]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
    	HAL_UART_DeInit(&huart2);
 8000614:	4b4d      	ldr	r3, [pc, #308]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000616:	0018      	movs	r0, r3
 8000618:	f003 f82c 	bl	8003674 <HAL_UART_DeInit>
    	MX_USART2_UART_Init();
 800061c:	f000 fbb4 	bl	8000d88 <MX_USART2_UART_Init>
    	memset(rx_Buffer,0,sizeof(rx_Buffer));
 8000620:	2380      	movs	r3, #128	@ 0x80
 8000622:	011a      	lsls	r2, r3, #4
 8000624:	4b4a      	ldr	r3, [pc, #296]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000626:	2100      	movs	r1, #0
 8000628:	0018      	movs	r0, r3
 800062a:	f004 fa75 	bl	8004b18 <memset>
    	//uint8_t* error_message="\r\nComm Error";
    	//HAL_UART_Transmit(&huart2, error_message, 12, 5000);
    	HAL_UART_Receive_IT(&huart2,rx_Buffer,8);
 800062e:	4948      	ldr	r1, [pc, #288]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000630:	4b46      	ldr	r3, [pc, #280]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000632:	2208      	movs	r2, #8
 8000634:	0018      	movs	r0, r3
 8000636:	f003 f8fa 	bl	800382e <HAL_UART_Receive_IT>

    }
    if (htim->Instance == TIM14)		//veri açık kapalı süresini ayarlar
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a45      	ldr	r2, [pc, #276]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d155      	bne.n	80006f0 <HAL_TIM_PeriodElapsedCallback+0xfc>
    {
    	HAL_TIM_Base_Stop_IT(&htim14);
 8000644:	4b44      	ldr	r3, [pc, #272]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000646:	0018      	movs	r0, r3
 8000648:	f001 ff34 	bl	80024b4 <HAL_TIM_Base_Stop_IT>
    	if(on_or_off_time==1)	//açık süre sonrası giriyor
 800064c:	4b43      	ldr	r3, [pc, #268]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d127      	bne.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0xb0>
    	{
        	///diğer timerleri m timer kapat
    		disable_triac_int();
 8000654:	f7ff fe65 	bl	8000322 <disable_triac_int>
    		stop_pwm_m();
 8000658:	f7ff fdfa 	bl	8000250 <stop_pwm_m>
    		on_or_off_time=0;
 800065c:	4b3f      	ldr	r3, [pc, #252]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
    		if(test_seq==1)
 8000662:	4b3f      	ldr	r3, [pc, #252]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d10e      	bne.n	8000688 <HAL_TIM_PeriodElapsedCallback+0x94>
    		{
    			Veri_Matrisi[Aktif_Indeks].V_deger=Veri_Matrisi[Aktif_Indeks].V_deger+test_v_step;
 800066a:	4b3e      	ldr	r3, [pc, #248]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	001a      	movs	r2, r3
 8000670:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	58d3      	ldr	r3, [r2, r3]
 8000676:	4a3d      	ldr	r2, [pc, #244]	@ (800076c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000678:	8812      	ldrh	r2, [r2, #0]
 800067a:	0011      	movs	r1, r2
 800067c:	4a39      	ldr	r2, [pc, #228]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	1859      	adds	r1, r3, r1
 8000682:	4b39      	ldr	r3, [pc, #228]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	50d1      	str	r1, [r2, r3]
    		}
    		start_int_timer(&htim14, Veri_Matrisi[Aktif_Indeks].V_Kapanis_Zaman);
 8000688:	4b36      	ldr	r3, [pc, #216]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4a36      	ldr	r2, [pc, #216]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	18d3      	adds	r3, r2, r3
 8000692:	330a      	adds	r3, #10
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	001a      	movs	r2, r3
 8000698:	4b2f      	ldr	r3, [pc, #188]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff fdff 	bl	80002a0 <start_int_timer>
 80006a2:	e025      	b.n	80006f0 <HAL_TIM_PeriodElapsedCallback+0xfc>


    	}
    	else				//kapali süre sonrası giriyor
    	{
    		if(test_seq==0)
 80006a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d105      	bne.n	80006b8 <HAL_TIM_PeriodElapsedCallback+0xc4>
    		{
    			Aktif_Indeks++;
 80006ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80006b6:	701a      	strb	r2, [r3, #0]
    		}
    		on_or_off_time=1;
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
    		start_int_timer(&htim14, Veri_Matrisi[Aktif_Indeks].V_Acis_Zaman);
 80006be:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4a29      	ldr	r2, [pc, #164]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	18d3      	adds	r3, r2, r3
 80006c8:	3308      	adds	r3, #8
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	001a      	movs	r2, r3
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff fde4 	bl	80002a0 <start_int_timer>
    		start_pwm_m(Veri_Matrisi[Aktif_Indeks].M_deger);
 80006d8:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4a22      	ldr	r2, [pc, #136]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	18d3      	adds	r3, r2, r3
 80006e2:	3304      	adds	r3, #4
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff fd9a 	bl	8000220 <start_pwm_m>
    		enable_triac_int();
 80006ec:	f7ff fe11 	bl	8000312 <enable_triac_int>

    	}

    }

    if (htim->Instance == TIM2)		// interrupt sonrası alfa kadar bekleyip triac pinini sürer
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d11c      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x142>
    {

    	HAL_TIM_Base_Stop_IT(&htim2);
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fed8 	bl	80024b4 <HAL_TIM_Base_Stop_IT>
    	HAL_GPIO_WritePin(triac_output_GPIO_Port, triac_output_Pin, GPIO_PIN_SET);
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000706:	2201      	movs	r2, #1
 8000708:	2104      	movs	r1, #4
 800070a:	0018      	movs	r0, r3
 800070c:	f001 f9ea 	bl	8001ae4 <HAL_GPIO_WritePin>

    	for(int i=0;i<3000;i++)
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e002      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x128>
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000720:	4293      	cmp	r3, r2
 8000722:	ddf8      	ble.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x122>
    	{

    	}
    	HAL_GPIO_WritePin(triac_output_GPIO_Port, triac_output_Pin, GPIO_PIN_RESET);
 8000724:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000726:	2200      	movs	r2, #0
 8000728:	2104      	movs	r1, #4
 800072a:	0018      	movs	r0, r3
 800072c:	f001 f9da 	bl	8001ae4 <HAL_GPIO_WritePin>
    	EXTI->PR=EXTI_PR_PR1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000732:	2202      	movs	r2, #2
 8000734:	615a      	str	r2, [r3, #20]
    }



}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b004      	add	sp, #16
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40001000 	.word	0x40001000
 8000744:	20000174 	.word	0x20000174
 8000748:	20000000 	.word	0x20000000
 800074c:	20000204 	.word	0x20000204
 8000750:	2000028c 	.word	0x2000028c
 8000754:	40002000 	.word	0x40002000
 8000758:	200001bc 	.word	0x200001bc
 800075c:	20000014 	.word	0x20000014
 8000760:	20000a98 	.word	0x20000a98
 8000764:	200000e0 	.word	0x200000e0
 8000768:	20000040 	.word	0x20000040
 800076c:	20000aa8 	.word	0x20000aa8
 8000770:	200000e4 	.word	0x200000e4
 8000774:	48000800 	.word	0x48000800
 8000778:	00000bb7 	.word	0x00000bb7
 800077c:	40010400 	.word	0x40010400

08000780 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_1)
 800078c:	1dbb      	adds	r3, r7, #6
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d114      	bne.n	80007be <HAL_GPIO_EXTI_Callback+0x3e>
    {
    	if(EXTI->RTSR==0x02) // rising edge int yakalandı
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d110      	bne.n	80007be <HAL_GPIO_EXTI_Callback+0x3e>
    	{

    	zero_cross_dedect++;
 800079c:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x4c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x4c>)
 80007a4:	601a      	str	r2, [r3, #0]
    	start_int_timer(&htim2, Veri_Matrisi[Aktif_Indeks].V_deger);
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x50>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	001a      	movs	r2, r3
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	58d3      	ldr	r3, [r2, r3]
 80007b2:	001a      	movs	r2, r3
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fd71 	bl	80002a0 <start_int_timer>
    	else  // falling edge yakalandı.
    	{

    	}
    }
}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	40010400 	.word	0x40010400
 80007cc:	20000a94 	.word	0x20000a94
 80007d0:	200000e0 	.word	0x200000e0
 80007d4:	20000040 	.word	0x20000040
 80007d8:	200000e4 	.word	0x200000e4

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	///timer 2 triac driver 25us 1 tick
	///timer 3 pwm driver 25us 1 tick
	///timer 14 on/off driver 1 ms 1 tick
	memset(rx_Buffer,0,sizeof(rx_Buffer));
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	011a      	lsls	r2, r3, #4
 80007e4:	4b70      	ldr	r3, [pc, #448]	@ (80009a8 <main+0x1cc>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	0018      	movs	r0, r3
 80007ea:	f004 f995 	bl	8004b18 <memset>
	////BRUAYI UARTTA KONFIG MESAJI İLE AYARLAYACAKSIN.
	Veri_Matrisi[0].V_Acis_Zaman=5000;
 80007ee:	4b6f      	ldr	r3, [pc, #444]	@ (80009ac <main+0x1d0>)
 80007f0:	4a6f      	ldr	r2, [pc, #444]	@ (80009b0 <main+0x1d4>)
 80007f2:	811a      	strh	r2, [r3, #8]
	Veri_Matrisi[0].V_Kapanis_Zaman=1000;
 80007f4:	4b6d      	ldr	r3, [pc, #436]	@ (80009ac <main+0x1d0>)
 80007f6:	22fa      	movs	r2, #250	@ 0xfa
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	815a      	strh	r2, [r3, #10]
	Veri_Matrisi[0].M_deger=1000;
 80007fc:	4b6b      	ldr	r3, [pc, #428]	@ (80009ac <main+0x1d0>)
 80007fe:	22fa      	movs	r2, #250	@ 0xfa
 8000800:	0092      	lsls	r2, r2, #2
 8000802:	605a      	str	r2, [r3, #4]
	Veri_Matrisi[0].V_deger=320;
 8000804:	4b69      	ldr	r3, [pc, #420]	@ (80009ac <main+0x1d0>)
 8000806:	22a0      	movs	r2, #160	@ 0xa0
 8000808:	0052      	lsls	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]
	Veri_Matrisi[0].Aktif_Kapali=0x01;
 800080c:	4b67      	ldr	r3, [pc, #412]	@ (80009ac <main+0x1d0>)
 800080e:	2201      	movs	r2, #1
 8000810:	731a      	strb	r2, [r3, #12]

	Veri_Matrisi[1].V_Acis_Zaman=5000;
 8000812:	4b66      	ldr	r3, [pc, #408]	@ (80009ac <main+0x1d0>)
 8000814:	4a66      	ldr	r2, [pc, #408]	@ (80009b0 <main+0x1d4>)
 8000816:	831a      	strh	r2, [r3, #24]
	Veri_Matrisi[1].V_Kapanis_Zaman=1000;
 8000818:	4b64      	ldr	r3, [pc, #400]	@ (80009ac <main+0x1d0>)
 800081a:	22fa      	movs	r2, #250	@ 0xfa
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	835a      	strh	r2, [r3, #26]
	Veri_Matrisi[1].M_deger=500;
 8000820:	4b62      	ldr	r3, [pc, #392]	@ (80009ac <main+0x1d0>)
 8000822:	22fa      	movs	r2, #250	@ 0xfa
 8000824:	0052      	lsls	r2, r2, #1
 8000826:	615a      	str	r2, [r3, #20]
	Veri_Matrisi[1].V_deger=320;
 8000828:	4b60      	ldr	r3, [pc, #384]	@ (80009ac <main+0x1d0>)
 800082a:	22a0      	movs	r2, #160	@ 0xa0
 800082c:	0052      	lsls	r2, r2, #1
 800082e:	611a      	str	r2, [r3, #16]
	Veri_Matrisi[1].Aktif_Kapali=0x01;
 8000830:	4b5e      	ldr	r3, [pc, #376]	@ (80009ac <main+0x1d0>)
 8000832:	2201      	movs	r2, #1
 8000834:	771a      	strb	r2, [r3, #28]

	Veri_Matrisi[2].V_Acis_Zaman=5000;
 8000836:	4b5d      	ldr	r3, [pc, #372]	@ (80009ac <main+0x1d0>)
 8000838:	4a5d      	ldr	r2, [pc, #372]	@ (80009b0 <main+0x1d4>)
 800083a:	851a      	strh	r2, [r3, #40]	@ 0x28
	Veri_Matrisi[2].V_Kapanis_Zaman=1000;
 800083c:	4b5b      	ldr	r3, [pc, #364]	@ (80009ac <main+0x1d0>)
 800083e:	22fa      	movs	r2, #250	@ 0xfa
 8000840:	0092      	lsls	r2, r2, #2
 8000842:	855a      	strh	r2, [r3, #42]	@ 0x2a
	Veri_Matrisi[2].M_deger=250;
 8000844:	4b59      	ldr	r3, [pc, #356]	@ (80009ac <main+0x1d0>)
 8000846:	22fa      	movs	r2, #250	@ 0xfa
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
	Veri_Matrisi[2].V_deger=280;
 800084a:	4b58      	ldr	r3, [pc, #352]	@ (80009ac <main+0x1d0>)
 800084c:	228c      	movs	r2, #140	@ 0x8c
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	621a      	str	r2, [r3, #32]
	Veri_Matrisi[2].Aktif_Kapali=0x01;
 8000852:	4b56      	ldr	r3, [pc, #344]	@ (80009ac <main+0x1d0>)
 8000854:	222c      	movs	r2, #44	@ 0x2c
 8000856:	2101      	movs	r1, #1
 8000858:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[3].V_Acis_Zaman=5000;
 800085a:	4b54      	ldr	r3, [pc, #336]	@ (80009ac <main+0x1d0>)
 800085c:	4a54      	ldr	r2, [pc, #336]	@ (80009b0 <main+0x1d4>)
 800085e:	871a      	strh	r2, [r3, #56]	@ 0x38
	Veri_Matrisi[3].V_Kapanis_Zaman=1000;
 8000860:	4b52      	ldr	r3, [pc, #328]	@ (80009ac <main+0x1d0>)
 8000862:	22fa      	movs	r2, #250	@ 0xfa
 8000864:	0092      	lsls	r2, r2, #2
 8000866:	875a      	strh	r2, [r3, #58]	@ 0x3a
	Veri_Matrisi[3].M_deger=125;
 8000868:	4b50      	ldr	r3, [pc, #320]	@ (80009ac <main+0x1d0>)
 800086a:	227d      	movs	r2, #125	@ 0x7d
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
	Veri_Matrisi[3].V_deger=240;
 800086e:	4b4f      	ldr	r3, [pc, #316]	@ (80009ac <main+0x1d0>)
 8000870:	22f0      	movs	r2, #240	@ 0xf0
 8000872:	631a      	str	r2, [r3, #48]	@ 0x30
	Veri_Matrisi[3].Aktif_Kapali=0x01;
 8000874:	4b4d      	ldr	r3, [pc, #308]	@ (80009ac <main+0x1d0>)
 8000876:	223c      	movs	r2, #60	@ 0x3c
 8000878:	2101      	movs	r1, #1
 800087a:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[4].V_Acis_Zaman=5000;
 800087c:	4b4b      	ldr	r3, [pc, #300]	@ (80009ac <main+0x1d0>)
 800087e:	2248      	movs	r2, #72	@ 0x48
 8000880:	494b      	ldr	r1, [pc, #300]	@ (80009b0 <main+0x1d4>)
 8000882:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[4].V_Kapanis_Zaman=1000;
 8000884:	4b49      	ldr	r3, [pc, #292]	@ (80009ac <main+0x1d0>)
 8000886:	224a      	movs	r2, #74	@ 0x4a
 8000888:	21fa      	movs	r1, #250	@ 0xfa
 800088a:	0089      	lsls	r1, r1, #2
 800088c:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[4].M_deger=100;
 800088e:	4b47      	ldr	r3, [pc, #284]	@ (80009ac <main+0x1d0>)
 8000890:	2264      	movs	r2, #100	@ 0x64
 8000892:	645a      	str	r2, [r3, #68]	@ 0x44
	Veri_Matrisi[4].V_deger=200;
 8000894:	4b45      	ldr	r3, [pc, #276]	@ (80009ac <main+0x1d0>)
 8000896:	22c8      	movs	r2, #200	@ 0xc8
 8000898:	641a      	str	r2, [r3, #64]	@ 0x40
	Veri_Matrisi[4].Aktif_Kapali=0x01;
 800089a:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <main+0x1d0>)
 800089c:	224c      	movs	r2, #76	@ 0x4c
 800089e:	2101      	movs	r1, #1
 80008a0:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[5].V_Acis_Zaman=5000;
 80008a2:	4b42      	ldr	r3, [pc, #264]	@ (80009ac <main+0x1d0>)
 80008a4:	2258      	movs	r2, #88	@ 0x58
 80008a6:	4942      	ldr	r1, [pc, #264]	@ (80009b0 <main+0x1d4>)
 80008a8:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[5].V_Kapanis_Zaman=1000;
 80008aa:	4b40      	ldr	r3, [pc, #256]	@ (80009ac <main+0x1d0>)
 80008ac:	225a      	movs	r2, #90	@ 0x5a
 80008ae:	21fa      	movs	r1, #250	@ 0xfa
 80008b0:	0089      	lsls	r1, r1, #2
 80008b2:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[5].M_deger=75;
 80008b4:	4b3d      	ldr	r3, [pc, #244]	@ (80009ac <main+0x1d0>)
 80008b6:	224b      	movs	r2, #75	@ 0x4b
 80008b8:	655a      	str	r2, [r3, #84]	@ 0x54
	Veri_Matrisi[5].V_deger=160;
 80008ba:	4b3c      	ldr	r3, [pc, #240]	@ (80009ac <main+0x1d0>)
 80008bc:	22a0      	movs	r2, #160	@ 0xa0
 80008be:	651a      	str	r2, [r3, #80]	@ 0x50
	Veri_Matrisi[5].Aktif_Kapali=0x01;
 80008c0:	4b3a      	ldr	r3, [pc, #232]	@ (80009ac <main+0x1d0>)
 80008c2:	225c      	movs	r2, #92	@ 0x5c
 80008c4:	2101      	movs	r1, #1
 80008c6:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[6].V_Acis_Zaman=5000;
 80008c8:	4b38      	ldr	r3, [pc, #224]	@ (80009ac <main+0x1d0>)
 80008ca:	2268      	movs	r2, #104	@ 0x68
 80008cc:	4938      	ldr	r1, [pc, #224]	@ (80009b0 <main+0x1d4>)
 80008ce:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[6].V_Kapanis_Zaman=1000;
 80008d0:	4b36      	ldr	r3, [pc, #216]	@ (80009ac <main+0x1d0>)
 80008d2:	226a      	movs	r2, #106	@ 0x6a
 80008d4:	21fa      	movs	r1, #250	@ 0xfa
 80008d6:	0089      	lsls	r1, r1, #2
 80008d8:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[6].M_deger=20;
 80008da:	4b34      	ldr	r3, [pc, #208]	@ (80009ac <main+0x1d0>)
 80008dc:	2214      	movs	r2, #20
 80008de:	665a      	str	r2, [r3, #100]	@ 0x64
	Veri_Matrisi[6].V_deger=120;
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <main+0x1d0>)
 80008e2:	2278      	movs	r2, #120	@ 0x78
 80008e4:	661a      	str	r2, [r3, #96]	@ 0x60
	Veri_Matrisi[6].Aktif_Kapali=0x01;
 80008e6:	4b31      	ldr	r3, [pc, #196]	@ (80009ac <main+0x1d0>)
 80008e8:	226c      	movs	r2, #108	@ 0x6c
 80008ea:	2101      	movs	r1, #1
 80008ec:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[7].V_Acis_Zaman=5000;
 80008ee:	4b2f      	ldr	r3, [pc, #188]	@ (80009ac <main+0x1d0>)
 80008f0:	2278      	movs	r2, #120	@ 0x78
 80008f2:	492f      	ldr	r1, [pc, #188]	@ (80009b0 <main+0x1d4>)
 80008f4:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[7].V_Kapanis_Zaman=1000;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	@ (80009ac <main+0x1d0>)
 80008f8:	227a      	movs	r2, #122	@ 0x7a
 80008fa:	21fa      	movs	r1, #250	@ 0xfa
 80008fc:	0089      	lsls	r1, r1, #2
 80008fe:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[7].M_deger=10;
 8000900:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <main+0x1d0>)
 8000902:	220a      	movs	r2, #10
 8000904:	675a      	str	r2, [r3, #116]	@ 0x74
	Veri_Matrisi[7].V_deger=80;
 8000906:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <main+0x1d0>)
 8000908:	2250      	movs	r2, #80	@ 0x50
 800090a:	671a      	str	r2, [r3, #112]	@ 0x70
	Veri_Matrisi[7].Aktif_Kapali=0x01;
 800090c:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <main+0x1d0>)
 800090e:	227c      	movs	r2, #124	@ 0x7c
 8000910:	2101      	movs	r1, #1
 8000912:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[8].V_Acis_Zaman=5000;
 8000914:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <main+0x1d0>)
 8000916:	2288      	movs	r2, #136	@ 0x88
 8000918:	4925      	ldr	r1, [pc, #148]	@ (80009b0 <main+0x1d4>)
 800091a:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[8].V_Kapanis_Zaman=1000;
 800091c:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <main+0x1d0>)
 800091e:	228a      	movs	r2, #138	@ 0x8a
 8000920:	21fa      	movs	r1, #250	@ 0xfa
 8000922:	0089      	lsls	r1, r1, #2
 8000924:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[8].M_deger=8;
 8000926:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <main+0x1d0>)
 8000928:	2284      	movs	r2, #132	@ 0x84
 800092a:	2108      	movs	r1, #8
 800092c:	5099      	str	r1, [r3, r2]
	Veri_Matrisi[8].V_deger=40;
 800092e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <main+0x1d0>)
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	2128      	movs	r1, #40	@ 0x28
 8000934:	5099      	str	r1, [r3, r2]
	Veri_Matrisi[8].Aktif_Kapali=0x01;
 8000936:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <main+0x1d0>)
 8000938:	228c      	movs	r2, #140	@ 0x8c
 800093a:	2101      	movs	r1, #1
 800093c:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[9].V_Acis_Zaman=5000;
 800093e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <main+0x1d0>)
 8000940:	2298      	movs	r2, #152	@ 0x98
 8000942:	491b      	ldr	r1, [pc, #108]	@ (80009b0 <main+0x1d4>)
 8000944:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[9].V_Kapanis_Zaman=1000;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <main+0x1d0>)
 8000948:	229a      	movs	r2, #154	@ 0x9a
 800094a:	21fa      	movs	r1, #250	@ 0xfa
 800094c:	0089      	lsls	r1, r1, #2
 800094e:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[9].M_deger=4;
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <main+0x1d0>)
 8000952:	2294      	movs	r2, #148	@ 0x94
 8000954:	2104      	movs	r1, #4
 8000956:	5099      	str	r1, [r3, r2]
	Veri_Matrisi[9].V_deger=20;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <main+0x1d0>)
 800095a:	2290      	movs	r2, #144	@ 0x90
 800095c:	2114      	movs	r1, #20
 800095e:	5099      	str	r1, [r3, r2]
	Veri_Matrisi[9].Aktif_Kapali=0x01;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <main+0x1d0>)
 8000962:	229c      	movs	r2, #156	@ 0x9c
 8000964:	2101      	movs	r1, #1
 8000966:	5499      	strb	r1, [r3, r2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 fc8a 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f826 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 fa3a 	bl	8000de8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000974:	f000 f8f0 	bl	8000b58 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000978:	f000 fa06 	bl	8000d88 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 800097c:	f000 f9ae 	bl	8000cdc <MX_TIM14_Init>
  MX_TIM6_Init();
 8000980:	f000 f96a 	bl	8000c58 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000984:	f000 f862 	bl	8000a4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,rx_Buffer,8);
 8000988:	4907      	ldr	r1, [pc, #28]	@ (80009a8 <main+0x1cc>)
 800098a:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <main+0x1d8>)
 800098c:	2208      	movs	r2, #8
 800098e:	0018      	movs	r0, r3
 8000990:	f002 ff4d 	bl	800382e <HAL_UART_Receive_IT>
  start_uart_timer();
 8000994:	f7ff fc68 	bl	8000268 <start_uart_timer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Aktif_Indeks==10)
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <main+0x1dc>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b0a      	cmp	r3, #10
 800099e:	d1fb      	bne.n	8000998 <main+0x1bc>
	  {
		  Aktif_Indeks=0;
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <main+0x1dc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
	  if(Aktif_Indeks==10)
 80009a6:	e7f7      	b.n	8000998 <main+0x1bc>
 80009a8:	2000028c 	.word	0x2000028c
 80009ac:	20000040 	.word	0x20000040
 80009b0:	00001388 	.word	0x00001388
 80009b4:	20000204 	.word	0x20000204
 80009b8:	200000e0 	.word	0x200000e0

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b091      	sub	sp, #68	@ 0x44
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	2410      	movs	r4, #16
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	2330      	movs	r3, #48	@ 0x30
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f004 f8a3 	bl	8004b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d2:	003b      	movs	r3, r7
 80009d4:	0018      	movs	r0, r3
 80009d6:	2310      	movs	r3, #16
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f004 f89c 	bl	8004b18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e0:	0021      	movs	r1, r4
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2201      	movs	r2, #1
 80009ec:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2202      	movs	r2, #2
 80009f2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2280      	movs	r2, #128	@ 0x80
 80009f8:	0252      	lsls	r2, r2, #9
 80009fa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2280      	movs	r2, #128	@ 0x80
 8000a00:	0352      	lsls	r2, r2, #13
 8000a02:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 f8a3 	bl	8001b58 <HAL_RCC_OscConfig>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a16:	f000 fa61 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	003b      	movs	r3, r7
 8000a22:	2202      	movs	r2, #2
 8000a24:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	003b      	movs	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a32:	003b      	movs	r3, r7
 8000a34:	2101      	movs	r1, #1
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fba8 	bl	800218c <HAL_RCC_ClockConfig>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a40:	f000 fa4c 	bl	8000edc <Error_Handler>
  }
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b011      	add	sp, #68	@ 0x44
 8000a4a:	bd90      	pop	{r4, r7, pc}

08000a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	@ 0x38
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	2328      	movs	r3, #40	@ 0x28
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	2310      	movs	r3, #16
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f004 f85b 	bl	8004b18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a62:	2320      	movs	r3, #32
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	0018      	movs	r0, r3
 8000a68:	2308      	movs	r3, #8
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f004 f853 	bl	8004b18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	0018      	movs	r0, r3
 8000a76:	231c      	movs	r3, #28
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f004 f84c 	bl	8004b18 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a80:	4b33      	ldr	r3, [pc, #204]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	05d2      	lsls	r2, r2, #23
 8000a86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 8000a88:	4b31      	ldr	r3, [pc, #196]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000a8a:	4a32      	ldr	r2, [pc, #200]	@ (8000b54 <MX_TIM2_Init+0x108>)
 8000a8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 360;
 8000a94:	4b2e      	ldr	r3, [pc, #184]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000a96:	22b4      	movs	r2, #180	@ 0xb4
 8000a98:	0052      	lsls	r2, r2, #1
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa8:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 fcb2 	bl	8002414 <HAL_TIM_Base_Init>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000ab4:	f000 fa12 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	2128      	movs	r1, #40	@ 0x28
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	0152      	lsls	r2, r2, #5
 8000ac0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac2:	187a      	adds	r2, r7, r1
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f8e3 	bl	8002c94 <HAL_TIM_ConfigClockSource>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000ad2:	f000 fa03 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f001 fd19 	bl	8002510 <HAL_TIM_PWM_Init>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ae2:	f000 f9fb 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000ae8:	2108      	movs	r1, #8
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 fe9c 	bl	8002828 <HAL_TIM_OnePulse_Init>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000af4:	f000 f9f2 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2120      	movs	r1, #32
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 fcef 	bl	80034f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8000b16:	f000 f9e1 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2260      	movs	r2, #96	@ 0x60
 8000b1e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b32:	1d39      	adds	r1, r7, #4
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_TIM2_Init+0x104>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 ffe5 	bl	8002b08 <HAL_TIM_PWM_ConfigChannel>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000b42:	f000 f9cb 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b00e      	add	sp, #56	@ 0x38
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	200000e4 	.word	0x200000e4
 8000b54:	000004af 	.word	0x000004af

08000b58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	@ 0x38
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	2328      	movs	r3, #40	@ 0x28
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	0018      	movs	r0, r3
 8000b64:	2310      	movs	r3, #16
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f003 ffd5 	bl	8004b18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6e:	2320      	movs	r3, #32
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	0018      	movs	r0, r3
 8000b74:	2308      	movs	r3, #8
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f003 ffcd 	bl	8004b18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	0018      	movs	r0, r3
 8000b82:	231c      	movs	r3, #28
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f003 ffc6 	bl	8004b18 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000b8e:	4a30      	ldr	r2, [pc, #192]	@ (8000c50 <MX_TIM3_Init+0xf8>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1199;
 8000b92:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000b94:	4a2f      	ldr	r2, [pc, #188]	@ (8000c54 <MX_TIM3_Init+0xfc>)
 8000b96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000ba0:	2264      	movs	r2, #100	@ 0x64
 8000ba2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b29      	ldr	r3, [pc, #164]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bb0:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 fc2e 	bl	8002414 <HAL_TIM_Base_Init>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bbc:	f000 f98e 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc0:	2128      	movs	r1, #40	@ 0x28
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	0152      	lsls	r2, r2, #5
 8000bc8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bca:	187a      	adds	r2, r7, r1
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000bce:	0011      	movs	r1, r2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f002 f85f 	bl	8002c94 <HAL_TIM_ConfigClockSource>
 8000bd6:	1e03      	subs	r3, r0, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000bda:	f000 f97f 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bde:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 fc95 	bl	8002510 <HAL_TIM_PWM_Init>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bea:	f000 f977 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bee:	2120      	movs	r1, #32
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bfc:	187a      	adds	r2, r7, r1
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000c00:	0011      	movs	r1, r2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f002 fc74 	bl	80034f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000c0c:	f000 f966 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2260      	movs	r2, #96	@ 0x60
 8000c14:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 38;
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2226      	movs	r2, #38	@ 0x26
 8000c1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c28:	1d39      	adds	r1, r7, #4
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 ff6a 	bl	8002b08 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000c38:	f000 f950 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <MX_TIM3_Init+0xf4>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 f9e8 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b00e      	add	sp, #56	@ 0x38
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000012c 	.word	0x2000012c
 8000c50:	40000400 	.word	0x40000400
 8000c54:	000004af 	.word	0x000004af

08000c58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	003b      	movs	r3, r7
 8000c60:	0018      	movs	r0, r3
 8000c62:	2308      	movs	r3, #8
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f003 ff56 	bl	8004b18 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_TIM6_Init+0x74>)
 8000c6e:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <MX_TIM6_Init+0x78>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 8000c72:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <MX_TIM6_Init+0x74>)
 8000c74:	4a17      	ldr	r2, [pc, #92]	@ (8000cd4 <MX_TIM6_Init+0x7c>)
 8000c76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_TIM6_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <MX_TIM6_Init+0x74>)
 8000c80:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <MX_TIM6_Init+0x80>)
 8000c82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_TIM6_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <MX_TIM6_Init+0x74>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f001 fbc1 	bl	8002414 <HAL_TIM_Base_Init>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000c96:	f000 f921 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ca6:	003a      	movs	r2, r7
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <MX_TIM6_Init+0x74>)
 8000caa:	0011      	movs	r1, r2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f002 fc1f 	bl	80034f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000cb6:	f000 f911 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  stop_int_timer(&htim6);
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <MX_TIM6_Init+0x74>)
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fb10 	bl	80002e2 <stop_int_timer>
  /* USER CODE END TIM6_Init 2 */

}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	20000174 	.word	0x20000174
 8000cd0:	40001000 	.word	0x40001000
 8000cd4:	0000bb7f 	.word	0x0000bb7f
 8000cd8:	00001388 	.word	0x00001388

08000cdc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	231c      	movs	r3, #28
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f003 ff14 	bl	8004b18 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000cf2:	4a23      	ldr	r2, [pc, #140]	@ (8000d80 <MX_TIM14_Init+0xa4>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47999;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000cf8:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <MX_TIM14_Init+0xa8>)
 8000cfa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4000;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000d04:	22fa      	movs	r2, #250	@ 0xfa
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fb7b 	bl	8002414 <HAL_TIM_Base_Init>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 f8db 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f001 fbf1 	bl	8002510 <HAL_TIM_PWM_Init>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8000d32:	f000 f8d3 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim14, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000d38:	2108      	movs	r1, #8
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f001 fd74 	bl	8002828 <HAL_TIM_OnePulse_Init>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM14_Init+0x6c>
  {
    Error_Handler();
 8000d44:	f000 f8ca 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2260      	movs	r2, #96	@ 0x60
 8000d4c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d60:	1d39      	adds	r1, r7, #4
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_TIM14_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f001 fece 	bl	8002b08 <HAL_TIM_PWM_ConfigChannel>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM14_Init+0x98>
  {
    Error_Handler();
 8000d70:	f000 f8b4 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b008      	add	sp, #32
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200001bc 	.word	0x200001bc
 8000d80:	40002000 	.word	0x40002000
 8000d84:	0000bb7f 	.word	0x0000bb7f

08000d88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	@ (8000de4 <MX_USART2_UART_Init+0x5c>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d94:	2296      	movs	r2, #150	@ 0x96
 8000d96:	0192      	lsls	r2, r2, #6
 8000d98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dca:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f002 fbfd 	bl	80035cc <HAL_UART_Init>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dd6:	f000 f881 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000204 	.word	0x20000204
 8000de4:	40004400 	.word	0x40004400

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b089      	sub	sp, #36	@ 0x24
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	240c      	movs	r4, #12
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	0018      	movs	r0, r3
 8000df4:	2314      	movs	r3, #20
 8000df6:	001a      	movs	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f003 fe8d 	bl	8004b18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	4b34      	ldr	r3, [pc, #208]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e00:	695a      	ldr	r2, [r3, #20]
 8000e02:	4b33      	ldr	r3, [pc, #204]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	03c9      	lsls	r1, r1, #15
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e0e:	695a      	ldr	r2, [r3, #20]
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	03db      	lsls	r3, r3, #15
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e20:	2180      	movs	r1, #128	@ 0x80
 8000e22:	0309      	lsls	r1, r1, #12
 8000e24:	430a      	orrs	r2, r1
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	031b      	lsls	r3, r3, #12
 8000e30:	4013      	ands	r3, r2
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	0289      	lsls	r1, r1, #10
 8000e40:	430a      	orrs	r2, r1
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <MX_GPIO_Init+0xe8>)
 8000e46:	695a      	ldr	r2, [r3, #20]
 8000e48:	2380      	movs	r3, #128	@ 0x80
 8000e4a:	029b      	lsls	r3, r3, #10
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(triac_output_GPIO_Port, triac_output_Pin, GPIO_PIN_RESET);
 8000e52:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <MX_GPIO_Init+0xec>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	2104      	movs	r1, #4
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 fe43 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : zero_cros_detector_Pin */
  GPIO_InitStruct.Pin = zero_cros_detector_Pin;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2202      	movs	r2, #2
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	22c4      	movs	r2, #196	@ 0xc4
 8000e68:	0392      	lsls	r2, r2, #14
 8000e6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2202      	movs	r2, #2
 8000e70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(zero_cros_detector_GPIO_Port, &GPIO_InitStruct);
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	4a17      	ldr	r2, [pc, #92]	@ (8000ed4 <MX_GPIO_Init+0xec>)
 8000e76:	0019      	movs	r1, r3
 8000e78:	0010      	movs	r0, r2
 8000e7a:	f000 fbf3 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : triac_output_Pin */
  GPIO_InitStruct.Pin = triac_output_Pin;
 8000e7e:	0021      	movs	r1, r4
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2204      	movs	r2, #4
 8000e84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2201      	movs	r2, #1
 8000e8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2203      	movs	r2, #3
 8000e96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(triac_output_GPIO_Port, &GPIO_InitStruct);
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed4 <MX_GPIO_Init+0xec>)
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	f000 fbe0 	bl	8001664 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2005      	movs	r0, #5
 8000eaa:	f000 fb1b 	bl	80014e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000eae:	2005      	movs	r0, #5
 8000eb0:	f000 fb2d 	bl	800150e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8000eb4:	2005      	movs	r0, #5
 8000eb6:	f000 fb3a 	bl	800152e <HAL_NVIC_DisableIRQ>
  EXTI->FTSR=0x00;
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <MX_GPIO_Init+0xf0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  EXTI->RTSR=0x02;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <MX_GPIO_Init+0xf0>)
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	609a      	str	r2, [r3, #8]
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b009      	add	sp, #36	@ 0x24
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	40010400 	.word	0x40010400

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	e7fd      	b.n	8000ee4 <Error_Handler+0x8>

08000ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	699a      	ldr	r2, [r3, #24]
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	619a      	str	r2, [r3, #24]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_MspInit+0x44>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2201      	movs	r2, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f08:	69da      	ldr	r2, [r3, #28]
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	2180      	movs	r1, #128	@ 0x80
 8000f0e:	0549      	lsls	r1, r1, #21
 8000f10:	430a      	orrs	r2, r1
 8000f12:	61da      	str	r2, [r3, #28]
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <HAL_MspInit+0x44>)
 8000f16:	69da      	ldr	r2, [r3, #28]
 8000f18:	2380      	movs	r3, #128	@ 0x80
 8000f1a:	055b      	lsls	r3, r3, #21
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d114      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f44:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f46:	69da      	ldr	r2, [r3, #28]
 8000f48:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	61da      	str	r2, [r3, #28]
 8000f50:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	200f      	movs	r0, #15
 8000f62:	f000 fabf 	bl	80014e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f66:	200f      	movs	r0, #15
 8000f68:	f000 fad1 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f6c:	e046      	b.n	8000ffc <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <HAL_TIM_Base_MspInit+0xd8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d10c      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f78:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f7a:	69da      	ldr	r2, [r3, #28]
 8000f7c:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f7e:	2102      	movs	r1, #2
 8000f80:	430a      	orrs	r2, r1
 8000f82:	61da      	str	r2, [r3, #28]
 8000f84:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]
}
 8000f90:	e034      	b.n	8000ffc <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM6)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1d      	ldr	r2, [pc, #116]	@ (800100c <HAL_TIM_Base_MspInit+0xdc>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d114      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000f9e:	69da      	ldr	r2, [r3, #28]
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	61da      	str	r2, [r3, #28]
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	2210      	movs	r2, #16
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2011      	movs	r0, #17
 8000fba:	f000 fa93 	bl	80014e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f000 faa5 	bl	800150e <HAL_NVIC_EnableIRQ>
}
 8000fc4:	e01a      	b.n	8000ffc <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM14)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a11      	ldr	r2, [pc, #68]	@ (8001010 <HAL_TIM_Base_MspInit+0xe0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d115      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fd2:	69da      	ldr	r2, [r3, #28]
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	0049      	lsls	r1, r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	61da      	str	r2, [r3, #28]
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_TIM_Base_MspInit+0xd4>)
 8000fe0:	69da      	ldr	r2, [r3, #28]
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2013      	movs	r0, #19
 8000ff2:	f000 fa77 	bl	80014e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000ff6:	2013      	movs	r0, #19
 8000ff8:	f000 fa89 	bl	800150e <HAL_NVIC_EnableIRQ>
}
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b006      	add	sp, #24
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000
 8001008:	40000400 	.word	0x40000400
 800100c:	40001000 	.word	0x40001000
 8001010:	40002000 	.word	0x40002000

08001014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	240c      	movs	r4, #12
 800101e:	193b      	adds	r3, r7, r4
 8001020:	0018      	movs	r0, r3
 8001022:	2314      	movs	r3, #20
 8001024:	001a      	movs	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	f003 fd76 	bl	8004b18 <memset>
  if(htim->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a15      	ldr	r2, [pc, #84]	@ (8001088 <HAL_TIM_MspPostInit+0x74>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d124      	bne.n	8001080 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_TIM_MspPostInit+0x78>)
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <HAL_TIM_MspPostInit+0x78>)
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0289      	lsls	r1, r1, #10
 8001040:	430a      	orrs	r2, r1
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_TIM_MspPostInit+0x78>)
 8001046:	695a      	ldr	r2, [r3, #20]
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	029b      	lsls	r3, r3, #10
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001052:	0021      	movs	r1, r4
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2280      	movs	r2, #128	@ 0x80
 8001058:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2202      	movs	r2, #2
 800105e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2201      	movs	r2, #1
 8001070:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	187a      	adds	r2, r7, r1
 8001074:	2390      	movs	r3, #144	@ 0x90
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f000 faf2 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b009      	add	sp, #36	@ 0x24
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	40000400 	.word	0x40000400
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b08b      	sub	sp, #44	@ 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	2414      	movs	r4, #20
 800109a:	193b      	adds	r3, r7, r4
 800109c:	0018      	movs	r0, r3
 800109e:	2314      	movs	r3, #20
 80010a0:	001a      	movs	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f003 fd38 	bl	8004b18 <memset>
  if(huart->Instance==USART2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <HAL_UART_MspInit+0xa0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d13a      	bne.n	8001128 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_UART_MspInit+0xa4>)
 80010b4:	69da      	ldr	r2, [r3, #28]
 80010b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_UART_MspInit+0xa4>)
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	0289      	lsls	r1, r1, #10
 80010bc:	430a      	orrs	r2, r1
 80010be:	61da      	str	r2, [r3, #28]
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_UART_MspInit+0xa4>)
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	029b      	lsls	r3, r3, #10
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_UART_MspInit+0xa4>)
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <HAL_UART_MspInit+0xa4>)
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	0289      	lsls	r1, r1, #10
 80010d8:	430a      	orrs	r2, r1
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_UART_MspInit+0xa4>)
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ea:	0021      	movs	r1, r4
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2202      	movs	r2, #2
 80010f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2203      	movs	r2, #3
 8001102:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2201      	movs	r2, #1
 8001108:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	187a      	adds	r2, r7, r1
 800110c:	2390      	movs	r3, #144	@ 0x90
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f000 faa6 	bl	8001664 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	201c      	movs	r0, #28
 800111e:	f000 f9e1 	bl	80014e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001122:	201c      	movs	r0, #28
 8001124:	f000 f9f3 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b00b      	add	sp, #44	@ 0x2c
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	40004400 	.word	0x40004400
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_UART_MspDeInit+0x38>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d10e      	bne.n	8001168 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_UART_MspDeInit+0x3c>)
 800114c:	69da      	ldr	r2, [r3, #28]
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_UART_MspDeInit+0x3c>)
 8001150:	4909      	ldr	r1, [pc, #36]	@ (8001178 <HAL_UART_MspDeInit+0x40>)
 8001152:	400a      	ands	r2, r1
 8001154:	61da      	str	r2, [r3, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001156:	2390      	movs	r3, #144	@ 0x90
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	210c      	movs	r1, #12
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fbf1 	bl	8001944 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001162:	201c      	movs	r0, #28
 8001164:	f000 f9e3 	bl	800152e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40004400 	.word	0x40004400
 8001174:	40021000 	.word	0x40021000
 8001178:	fffdffff 	.word	0xfffdffff

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f8b4 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(zero_cros_detector_Pin);
 80011b2:	2002      	movs	r0, #2
 80011b4:	f000 fcb4 	bl	8001b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <TIM2_IRQHandler+0x14>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 fb87 	bl	80028da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	200000e4 	.word	0x200000e4

080011d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <TIM6_DAC_IRQHandler+0x14>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f001 fb7b 	bl	80028da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	20000174 	.word	0x20000174

080011f0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <TIM14_IRQHandler+0x14>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f001 fb6f 	bl	80028da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	200001bc 	.word	0x200001bc

08001208 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <USART2_IRQHandler+0x14>)
 800120e:	0018      	movs	r0, r3
 8001210:	f002 fb64 	bl	80038dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	20000204 	.word	0x20000204

08001220 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800122c:	480d      	ldr	r0, [pc, #52]	@ (8001264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001230:	f7ff fff6 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480c      	ldr	r0, [pc, #48]	@ (8001268 <LoopForever+0x6>)
  ldr r1, =_edata
 8001236:	490d      	ldr	r1, [pc, #52]	@ (800126c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001238:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <LoopForever+0xe>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800124c:	4c0a      	ldr	r4, [pc, #40]	@ (8001278 <LoopForever+0x16>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800125a:	f003 fc65 	bl	8004b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125e:	f7ff fabd 	bl	80007dc <main>

08001262 <LoopForever>:

LoopForever:
    b LoopForever
 8001262:	e7fe      	b.n	8001262 <LoopForever>
  ldr   r0, =_estack
 8001264:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001270:	08004bc8 	.word	0x08004bc8
  ldr r2, =_sbss
 8001274:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001278:	20000ab0 	.word	0x20000ab0

0800127c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_COMP_IRQHandler>
	...

08001280 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <HAL_Init+0x24>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_Init+0x24>)
 800128a:	2110      	movs	r1, #16
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001290:	2000      	movs	r0, #0
 8001292:	f000 f809 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001296:	f7ff fe27 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_InitTick+0x5c>)
 80012b2:	681c      	ldr	r4, [r3, #0]
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_InitTick+0x60>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	0019      	movs	r1, r3
 80012ba:	23fa      	movs	r3, #250	@ 0xfa
 80012bc:	0098      	lsls	r0, r3, #2
 80012be:	f7fe ff23 	bl	8000108 <__udivsi3>
 80012c2:	0003      	movs	r3, r0
 80012c4:	0019      	movs	r1, r3
 80012c6:	0020      	movs	r0, r4
 80012c8:	f7fe ff1e 	bl	8000108 <__udivsi3>
 80012cc:	0003      	movs	r3, r0
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 f93d 	bl	800154e <HAL_SYSTICK_Config>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e00f      	b.n	80012fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d80b      	bhi.n	80012fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	2301      	movs	r3, #1
 80012e6:	425b      	negs	r3, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	0018      	movs	r0, r3
 80012ec:	f000 f8fa 	bl	80014e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_InitTick+0x64>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b003      	add	sp, #12
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	20000018 	.word	0x20000018
 8001308:	20000020 	.word	0x20000020
 800130c:	2000001c 	.word	0x2000001c

08001310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_IncTick+0x1c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	001a      	movs	r2, r3
 800131a:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_IncTick+0x20>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	18d2      	adds	r2, r2, r3
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <HAL_IncTick+0x20>)
 8001322:	601a      	str	r2, [r3, #0]
}
 8001324:	46c0      	nop			@ (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	20000020 	.word	0x20000020
 8001330:	20000aac 	.word	0x20000aac

08001334 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b02      	ldr	r3, [pc, #8]	@ (8001344 <HAL_GetTick+0x10>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	20000aac 	.word	0x20000aac

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	0002      	movs	r2, r0
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b7f      	cmp	r3, #127	@ 0x7f
 800135a:	d809      	bhi.n	8001370 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	001a      	movs	r2, r3
 8001362:	231f      	movs	r3, #31
 8001364:	401a      	ands	r2, r3
 8001366:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <__NVIC_EnableIRQ+0x30>)
 8001368:	2101      	movs	r1, #1
 800136a:	4091      	lsls	r1, r2
 800136c:	000a      	movs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
  }
}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	0002      	movs	r2, r0
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b7f      	cmp	r3, #127	@ 0x7f
 800138e:	d810      	bhi.n	80013b2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	001a      	movs	r2, r3
 8001396:	231f      	movs	r3, #31
 8001398:	4013      	ands	r3, r2
 800139a:	4908      	ldr	r1, [pc, #32]	@ (80013bc <__NVIC_DisableIRQ+0x40>)
 800139c:	2201      	movs	r2, #1
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013a6:	f3bf 8f4f 	dsb	sy
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80013ac:	f3bf 8f6f 	isb	sy
}
 80013b0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	0002      	movs	r2, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013d4:	d828      	bhi.n	8001428 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001494 <__NVIC_SetPriority+0xd4>)
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	33c0      	adds	r3, #192	@ 0xc0
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	589b      	ldr	r3, [r3, r2]
 80013e6:	1dfa      	adds	r2, r7, #7
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	0011      	movs	r1, r2
 80013ec:	2203      	movs	r2, #3
 80013ee:	400a      	ands	r2, r1
 80013f0:	00d2      	lsls	r2, r2, #3
 80013f2:	21ff      	movs	r1, #255	@ 0xff
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	43d2      	mvns	r2, r2
 80013fa:	401a      	ands	r2, r3
 80013fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	22ff      	movs	r2, #255	@ 0xff
 8001404:	401a      	ands	r2, r3
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	2303      	movs	r3, #3
 800140e:	4003      	ands	r3, r0
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001414:	481f      	ldr	r0, [pc, #124]	@ (8001494 <__NVIC_SetPriority+0xd4>)
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	430a      	orrs	r2, r1
 8001420:	33c0      	adds	r3, #192	@ 0xc0
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001426:	e031      	b.n	800148c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <__NVIC_SetPriority+0xd8>)
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	0019      	movs	r1, r3
 8001430:	230f      	movs	r3, #15
 8001432:	400b      	ands	r3, r1
 8001434:	3b08      	subs	r3, #8
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3306      	adds	r3, #6
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	18d3      	adds	r3, r2, r3
 800143e:	3304      	adds	r3, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1dfa      	adds	r2, r7, #7
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	0011      	movs	r1, r2
 8001448:	2203      	movs	r2, #3
 800144a:	400a      	ands	r2, r1
 800144c:	00d2      	lsls	r2, r2, #3
 800144e:	21ff      	movs	r1, #255	@ 0xff
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	43d2      	mvns	r2, r2
 8001456:	401a      	ands	r2, r3
 8001458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	22ff      	movs	r2, #255	@ 0xff
 8001460:	401a      	ands	r2, r3
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	2303      	movs	r3, #3
 800146a:	4003      	ands	r3, r0
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001470:	4809      	ldr	r0, [pc, #36]	@ (8001498 <__NVIC_SetPriority+0xd8>)
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	001c      	movs	r4, r3
 8001478:	230f      	movs	r3, #15
 800147a:	4023      	ands	r3, r4
 800147c:	3b08      	subs	r3, #8
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	430a      	orrs	r2, r1
 8001482:	3306      	adds	r3, #6
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	18c3      	adds	r3, r0, r3
 8001488:	3304      	adds	r3, #4
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b003      	add	sp, #12
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	045b      	lsls	r3, r3, #17
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d301      	bcc.n	80014b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b0:	2301      	movs	r3, #1
 80014b2:	e010      	b.n	80014d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <SysTick_Config+0x44>)
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	3a01      	subs	r2, #1
 80014ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014bc:	2301      	movs	r3, #1
 80014be:	425b      	negs	r3, r3
 80014c0:	2103      	movs	r1, #3
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff ff7c 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <SysTick_Config+0x44>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <SysTick_Config+0x44>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	210f      	movs	r1, #15
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	1c02      	adds	r2, r0, #0
 80014f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	0002      	movs	r2, r0
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b25b      	sxtb	r3, r3
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ff11 	bl	8001348 <__NVIC_EnableIRQ>
}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	0002      	movs	r2, r0
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b25b      	sxtb	r3, r3
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff1b 	bl	800137c <__NVIC_DisableIRQ>
}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff ff9f 	bl	800149c <SysTick_Config>
 800155e:	0003      	movs	r3, r0
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b002      	add	sp, #8
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2221      	movs	r2, #33	@ 0x21
 8001574:	5c9b      	ldrb	r3, [r3, r2]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d008      	beq.n	800158e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2204      	movs	r2, #4
 8001580:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2220      	movs	r2, #32
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e020      	b.n	80015d0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	210e      	movs	r1, #14
 800159a:	438a      	bics	r2, r1
 800159c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	438a      	bics	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b6:	2101      	movs	r1, #1
 80015b8:	4091      	lsls	r1, r2
 80015ba:	000a      	movs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2221      	movs	r2, #33	@ 0x21
 80015c2:	2101      	movs	r1, #1
 80015c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2220      	movs	r2, #32
 80015ca:	2100      	movs	r1, #0
 80015cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e0:	210f      	movs	r1, #15
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2221      	movs	r2, #33	@ 0x21
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d006      	beq.n	8001602 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2204      	movs	r2, #4
 80015f8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e028      	b.n	8001654 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	210e      	movs	r1, #14
 800160e:	438a      	bics	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	438a      	bics	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162a:	2101      	movs	r1, #1
 800162c:	4091      	lsls	r1, r2
 800162e:	000a      	movs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2221      	movs	r2, #33	@ 0x21
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2220      	movs	r2, #32
 800163e:	2100      	movs	r1, #0
 8001640:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	0010      	movs	r0, r2
 8001652:	4798      	blx	r3
    }
  }
  return status;
 8001654:	230f      	movs	r3, #15
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	781b      	ldrb	r3, [r3, #0]
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b004      	add	sp, #16
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e14f      	b.n	8001914 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4091      	lsls	r1, r2
 800167e:	000a      	movs	r2, r1
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <HAL_GPIO_Init+0x28>
 800168a:	e140      	b.n	800190e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	4013      	ands	r3, r2
 8001694:	2b01      	cmp	r3, #1
 8001696:	d005      	beq.n	80016a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d130      	bne.n	8001706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	43da      	mvns	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	409a      	lsls	r2, r3
 80016c6:	0013      	movs	r3, r2
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016da:	2201      	movs	r2, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	2201      	movs	r2, #1
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2203      	movs	r2, #3
 800170c:	4013      	ands	r3, r2
 800170e:	2b03      	cmp	r3, #3
 8001710:	d017      	beq.n	8001742 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	43da      	mvns	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d123      	bne.n	8001796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	58d3      	ldr	r3, [r2, r3]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2207      	movs	r2, #7
 8001760:	4013      	ands	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	220f      	movs	r2, #15
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2107      	movs	r1, #7
 800177a:	400b      	ands	r3, r1
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	6939      	ldr	r1, [r7, #16]
 8001794:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	401a      	ands	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	23c0      	movs	r3, #192	@ 0xc0
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	4013      	ands	r3, r2
 80017d4:	d100      	bne.n	80017d8 <HAL_GPIO_Init+0x174>
 80017d6:	e09a      	b.n	800190e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d8:	4b54      	ldr	r3, [pc, #336]	@ (800192c <HAL_GPIO_Init+0x2c8>)
 80017da:	699a      	ldr	r2, [r3, #24]
 80017dc:	4b53      	ldr	r3, [pc, #332]	@ (800192c <HAL_GPIO_Init+0x2c8>)
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	619a      	str	r2, [r3, #24]
 80017e4:	4b51      	ldr	r3, [pc, #324]	@ (800192c <HAL_GPIO_Init+0x2c8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001930 <HAL_GPIO_Init+0x2cc>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	589b      	ldr	r3, [r3, r2]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2203      	movs	r2, #3
 8001802:	4013      	ands	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	43da      	mvns	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	2390      	movs	r3, #144	@ 0x90
 8001818:	05db      	lsls	r3, r3, #23
 800181a:	429a      	cmp	r2, r3
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0x1e2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a44      	ldr	r2, [pc, #272]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x1de>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a43      	ldr	r2, [pc, #268]	@ (8001938 <HAL_GPIO_Init+0x2d4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x1da>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a42      	ldr	r2, [pc, #264]	@ (800193c <HAL_GPIO_Init+0x2d8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x1d6>
 8001836:	2303      	movs	r3, #3
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x1e4>
 800183a:	2305      	movs	r3, #5
 800183c:	e004      	b.n	8001848 <HAL_GPIO_Init+0x1e4>
 800183e:	2302      	movs	r3, #2
 8001840:	e002      	b.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001846:	2300      	movs	r3, #0
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	2103      	movs	r1, #3
 800184c:	400a      	ands	r2, r1
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	4093      	lsls	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001858:	4935      	ldr	r1, [pc, #212]	@ (8001930 <HAL_GPIO_Init+0x2cc>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001866:	4b36      	ldr	r3, [pc, #216]	@ (8001940 <HAL_GPIO_Init+0x2dc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43da      	mvns	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	035b      	lsls	r3, r3, #13
 800187e:	4013      	ands	r3, r2
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <HAL_GPIO_Init+0x2dc>)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001890:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <HAL_GPIO_Init+0x2dc>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43da      	mvns	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	039b      	lsls	r3, r3, #14
 80018a8:	4013      	ands	r3, r2
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018b4:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <HAL_GPIO_Init+0x2dc>)
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80018ba:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <HAL_GPIO_Init+0x2dc>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43da      	mvns	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	029b      	lsls	r3, r3, #10
 80018d2:	4013      	ands	r3, r2
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018de:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <HAL_GPIO_Init+0x2dc>)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_GPIO_Init+0x2dc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	025b      	lsls	r3, r3, #9
 80018fc:	4013      	ands	r3, r2
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_GPIO_Init+0x2dc>)
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	40da      	lsrs	r2, r3
 800191c:	1e13      	subs	r3, r2, #0
 800191e:	d000      	beq.n	8001922 <HAL_GPIO_Init+0x2be>
 8001920:	e6a8      	b.n	8001674 <HAL_GPIO_Init+0x10>
  } 
}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b006      	add	sp, #24
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	48000400 	.word	0x48000400
 8001938:	48000800 	.word	0x48000800
 800193c:	48000c00 	.word	0x48000c00
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001952:	e0b1      	b.n	8001ab8 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001954:	2201      	movs	r2, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	409a      	lsls	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <HAL_GPIO_DeInit+0x24>
 8001966:	e0a4      	b.n	8001ab2 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001968:	4a59      	ldr	r2, [pc, #356]	@ (8001ad0 <HAL_GPIO_DeInit+0x18c>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	589b      	ldr	r3, [r3, r2]
 8001974:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2203      	movs	r2, #3
 800197a:	4013      	ands	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	409a      	lsls	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	2390      	movs	r3, #144	@ 0x90
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	429a      	cmp	r2, r3
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_DeInit+0x76>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad4 <HAL_GPIO_DeInit+0x190>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_DeInit+0x72>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad8 <HAL_GPIO_DeInit+0x194>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_DeInit+0x6e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4d      	ldr	r2, [pc, #308]	@ (8001adc <HAL_GPIO_DeInit+0x198>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_DeInit+0x6a>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_DeInit+0x78>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e004      	b.n	80019bc <HAL_GPIO_DeInit+0x78>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_DeInit+0x78>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_DeInit+0x78>
 80019ba:	2300      	movs	r3, #0
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	2103      	movs	r1, #3
 80019c0:	400a      	ands	r2, r1
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4093      	lsls	r3, r2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d132      	bne.n	8001a32 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80019cc:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <HAL_GPIO_DeInit+0x19c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	4b42      	ldr	r3, [pc, #264]	@ (8001ae0 <HAL_GPIO_DeInit+0x19c>)
 80019d6:	400a      	ands	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_GPIO_DeInit+0x19c>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43d9      	mvns	r1, r3
 80019e2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae0 <HAL_GPIO_DeInit+0x19c>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80019e8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae0 <HAL_GPIO_DeInit+0x19c>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_GPIO_DeInit+0x19c>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80019f6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae0 <HAL_GPIO_DeInit+0x19c>)
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43d9      	mvns	r1, r3
 80019fe:	4b38      	ldr	r3, [pc, #224]	@ (8001ae0 <HAL_GPIO_DeInit+0x19c>)
 8001a00:	400a      	ands	r2, r1
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2203      	movs	r2, #3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001a14:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad0 <HAL_GPIO_DeInit+0x18c>)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	589a      	ldr	r2, [r3, r2]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	482a      	ldr	r0, [pc, #168]	@ (8001ad0 <HAL_GPIO_DeInit+0x18c>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	0052      	lsls	r2, r2, #1
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	4091      	lsls	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	43d2      	mvns	r2, r2
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	58d3      	ldr	r3, [r2, r3]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	2107      	movs	r1, #7
 8001a58:	400a      	ands	r2, r1
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	210f      	movs	r1, #15
 8001a5e:	4091      	lsls	r1, r2
 8001a60:	000a      	movs	r2, r1
 8001a62:	43d1      	mvns	r1, r2
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	08d2      	lsrs	r2, r2, #3
 8001a68:	4019      	ands	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	0052      	lsls	r2, r2, #1
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	4091      	lsls	r1, r2
 8001a7e:	000a      	movs	r2, r1
 8001a80:	43d2      	mvns	r2, r2
 8001a82:	401a      	ands	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4091      	lsls	r1, r2
 8001a92:	000a      	movs	r2, r1
 8001a94:	43d2      	mvns	r2, r2
 8001a96:	401a      	ands	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	4091      	lsls	r1, r2
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	43d2      	mvns	r2, r2
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

    }

    position++;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	40da      	lsrs	r2, r3
 8001abe:	1e13      	subs	r3, r2, #0
 8001ac0:	d000      	beq.n	8001ac4 <HAL_GPIO_DeInit+0x180>
 8001ac2:	e747      	b.n	8001954 <HAL_GPIO_DeInit+0x10>
  }
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b006      	add	sp, #24
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	0008      	movs	r0, r1
 8001aee:	0011      	movs	r1, r2
 8001af0:	1cbb      	adds	r3, r7, #2
 8001af2:	1c02      	adds	r2, r0, #0
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	1c7b      	adds	r3, r7, #1
 8001af8:	1c0a      	adds	r2, r1, #0
 8001afa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	1c7b      	adds	r3, r7, #1
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b04:	1cbb      	adds	r3, r7, #2
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0e:	1cbb      	adds	r3, r7, #2
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	0002      	movs	r2, r0
 8001b28:	1dbb      	adds	r3, r7, #6
 8001b2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	1dba      	adds	r2, r7, #6
 8001b32:	8812      	ldrh	r2, [r2, #0]
 8001b34:	4013      	ands	r3, r2
 8001b36:	d008      	beq.n	8001b4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b3a:	1dba      	adds	r2, r7, #6
 8001b3c:	8812      	ldrh	r2, [r2, #0]
 8001b3e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b40:	1dbb      	adds	r3, r7, #6
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7fe fe1b 	bl	8000780 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e301      	b.n	800216e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4013      	ands	r3, r2
 8001b72:	d100      	bne.n	8001b76 <HAL_RCC_OscConfig+0x1e>
 8001b74:	e08d      	b.n	8001c92 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b76:	4bc3      	ldr	r3, [pc, #780]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d00e      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b82:	4bc0      	ldr	r3, [pc, #768]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	220c      	movs	r2, #12
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d116      	bne.n	8001bbc <HAL_RCC_OscConfig+0x64>
 8001b8e:	4bbd      	ldr	r3, [pc, #756]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	025b      	lsls	r3, r3, #9
 8001b96:	401a      	ands	r2, r3
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d10d      	bne.n	8001bbc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	4bb8      	ldr	r3, [pc, #736]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d100      	bne.n	8001bae <HAL_RCC_OscConfig+0x56>
 8001bac:	e070      	b.n	8001c90 <HAL_RCC_OscConfig+0x138>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d000      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x60>
 8001bb6:	e06b      	b.n	8001c90 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e2d8      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x7c>
 8001bc4:	4baf      	ldr	r3, [pc, #700]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4bae      	ldr	r3, [pc, #696]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	2180      	movs	r1, #128	@ 0x80
 8001bcc:	0249      	lsls	r1, r1, #9
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e02f      	b.n	8001c34 <HAL_RCC_OscConfig+0xdc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x9e>
 8001bdc:	4ba9      	ldr	r3, [pc, #676]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4ba8      	ldr	r3, [pc, #672]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	49a9      	ldr	r1, [pc, #676]	@ (8001e88 <HAL_RCC_OscConfig+0x330>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4ba6      	ldr	r3, [pc, #664]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4ba5      	ldr	r3, [pc, #660]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	49a7      	ldr	r1, [pc, #668]	@ (8001e8c <HAL_RCC_OscConfig+0x334>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e01e      	b.n	8001c34 <HAL_RCC_OscConfig+0xdc>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d10e      	bne.n	8001c1c <HAL_RCC_OscConfig+0xc4>
 8001bfe:	4ba1      	ldr	r3, [pc, #644]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4ba0      	ldr	r3, [pc, #640]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c04:	2180      	movs	r1, #128	@ 0x80
 8001c06:	02c9      	lsls	r1, r1, #11
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	4b9d      	ldr	r3, [pc, #628]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b9c      	ldr	r3, [pc, #624]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	2180      	movs	r1, #128	@ 0x80
 8001c14:	0249      	lsls	r1, r1, #9
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xdc>
 8001c1c:	4b99      	ldr	r3, [pc, #612]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b98      	ldr	r3, [pc, #608]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	4999      	ldr	r1, [pc, #612]	@ (8001e88 <HAL_RCC_OscConfig+0x330>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	4b96      	ldr	r3, [pc, #600]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b95      	ldr	r3, [pc, #596]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	4997      	ldr	r1, [pc, #604]	@ (8001e8c <HAL_RCC_OscConfig+0x334>)
 8001c30:	400a      	ands	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d014      	beq.n	8001c66 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fb7a 	bl	8001334 <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c46:	f7ff fb75 	bl	8001334 <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	@ 0x64
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e28a      	b.n	800216e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c58:	4b8a      	ldr	r3, [pc, #552]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	029b      	lsls	r3, r3, #10
 8001c60:	4013      	ands	r3, r2
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0xee>
 8001c64:	e015      	b.n	8001c92 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff fb65 	bl	8001334 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fb60 	bl	8001334 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e275      	b.n	800216e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	4b80      	ldr	r3, [pc, #512]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x118>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x146>
 8001c9c:	e069      	b.n	8001d72 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c9e:	4b79      	ldr	r3, [pc, #484]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ca8:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	220c      	movs	r2, #12
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d11c      	bne.n	8001cee <HAL_RCC_OscConfig+0x196>
 8001cb4:	4b73      	ldr	r3, [pc, #460]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	2380      	movs	r3, #128	@ 0x80
 8001cba:	025b      	lsls	r3, r3, #9
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d116      	bne.n	8001cee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc0:	4b70      	ldr	r3, [pc, #448]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x17e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e24b      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	22f8      	movs	r2, #248	@ 0xf8
 8001cdc:	4393      	bics	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	00da      	lsls	r2, r3, #3
 8001ce6:	4b67      	ldr	r3, [pc, #412]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cec:	e041      	b.n	8001d72 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d024      	beq.n	8001d40 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf6:	4b63      	ldr	r3, [pc, #396]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b62      	ldr	r3, [pc, #392]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fb17 	bl	8001334 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fb12 	bl	8001334 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e227      	b.n	800216e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0f1      	beq.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b56      	ldr	r3, [pc, #344]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	22f8      	movs	r2, #248	@ 0xf8
 8001d2e:	4393      	bics	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00da      	lsls	r2, r3, #3
 8001d38:	4b52      	ldr	r3, [pc, #328]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e018      	b.n	8001d72 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d40:	4b50      	ldr	r3, [pc, #320]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b4f      	ldr	r3, [pc, #316]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	438a      	bics	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff faf2 	bl	8001334 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff faed 	bl	8001334 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e202      	b.n	800216e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d68:	4b46      	ldr	r3, [pc, #280]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f1      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2208      	movs	r2, #8
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d036      	beq.n	8001dea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d019      	beq.n	8001db8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d84:	4b3f      	ldr	r3, [pc, #252]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d88:	4b3e      	ldr	r3, [pc, #248]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fad0 	bl	8001334 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff facb 	bl	8001334 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1e0      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dac:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	2202      	movs	r2, #2
 8001db2:	4013      	ands	r3, r2
 8001db4:	d0f1      	beq.n	8001d9a <HAL_RCC_OscConfig+0x242>
 8001db6:	e018      	b.n	8001dea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db8:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dbc:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fab6 	bl	8001334 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dce:	f7ff fab1 	bl	8001334 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1c6      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de0:	4b28      	ldr	r3, [pc, #160]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d1f1      	bne.n	8001dce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2204      	movs	r2, #4
 8001df0:	4013      	ands	r3, r2
 8001df2:	d100      	bne.n	8001df6 <HAL_RCC_OscConfig+0x29e>
 8001df4:	e0b4      	b.n	8001f60 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	201f      	movs	r0, #31
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	055b      	lsls	r3, r3, #21
 8001e06:	4013      	ands	r3, r2
 8001e08:	d110      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	2180      	movs	r1, #128	@ 0x80
 8001e12:	0549      	lsls	r1, r1, #21
 8001e14:	430a      	orrs	r2, r1
 8001e16:	61da      	str	r2, [r3, #28]
 8001e18:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	055b      	lsls	r3, r3, #21
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_RCC_OscConfig+0x338>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d11a      	bne.n	8001e6e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e38:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_RCC_OscConfig+0x338>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <HAL_RCC_OscConfig+0x338>)
 8001e3e:	2180      	movs	r1, #128	@ 0x80
 8001e40:	0049      	lsls	r1, r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e46:	f7ff fa75 	bl	8001334 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7ff fa70 	bl	8001334 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	@ 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e185      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_RCC_OscConfig+0x338>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d10e      	bne.n	8001e94 <HAL_RCC_OscConfig+0x33c>
 8001e76:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	4b02      	ldr	r3, [pc, #8]	@ (8001e84 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	621a      	str	r2, [r3, #32]
 8001e82:	e035      	b.n	8001ef0 <HAL_RCC_OscConfig+0x398>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	fffeffff 	.word	0xfffeffff
 8001e8c:	fffbffff 	.word	0xfffbffff
 8001e90:	40007000 	.word	0x40007000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x35e>
 8001e9c:	4bb6      	ldr	r3, [pc, #728]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	4bb5      	ldr	r3, [pc, #724]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	438a      	bics	r2, r1
 8001ea6:	621a      	str	r2, [r3, #32]
 8001ea8:	4bb3      	ldr	r3, [pc, #716]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001eaa:	6a1a      	ldr	r2, [r3, #32]
 8001eac:	4bb2      	ldr	r3, [pc, #712]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001eae:	2104      	movs	r1, #4
 8001eb0:	438a      	bics	r2, r1
 8001eb2:	621a      	str	r2, [r3, #32]
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x398>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x380>
 8001ebe:	4bae      	ldr	r3, [pc, #696]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4bad      	ldr	r3, [pc, #692]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	621a      	str	r2, [r3, #32]
 8001eca:	4bab      	ldr	r3, [pc, #684]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	4baa      	ldr	r3, [pc, #680]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	621a      	str	r2, [r3, #32]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x398>
 8001ed8:	4ba7      	ldr	r3, [pc, #668]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	4ba6      	ldr	r3, [pc, #664]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ede:	2101      	movs	r1, #1
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	621a      	str	r2, [r3, #32]
 8001ee4:	4ba4      	ldr	r3, [pc, #656]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	4ba3      	ldr	r3, [pc, #652]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001eea:	2104      	movs	r1, #4
 8001eec:	438a      	bics	r2, r1
 8001eee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d014      	beq.n	8001f22 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fa1c 	bl	8001334 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	e009      	b.n	8001f16 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fa17 	bl	8001334 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	4a9b      	ldr	r2, [pc, #620]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e12b      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	4b98      	ldr	r3, [pc, #608]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x3aa>
 8001f20:	e013      	b.n	8001f4a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fa07 	bl	8001334 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2a:	e009      	b.n	8001f40 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7ff fa02 	bl	8001334 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	4a91      	ldr	r2, [pc, #580]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e116      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	4b8d      	ldr	r3, [pc, #564]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f4a:	231f      	movs	r3, #31
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b88      	ldr	r3, [pc, #544]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	4b87      	ldr	r3, [pc, #540]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001f5a:	4989      	ldr	r1, [pc, #548]	@ (8002180 <HAL_RCC_OscConfig+0x628>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2210      	movs	r2, #16
 8001f66:	4013      	ands	r3, r2
 8001f68:	d063      	beq.n	8002032 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d12a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f72:	4b81      	ldr	r3, [pc, #516]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f76:	4b80      	ldr	r3, [pc, #512]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001f78:	2104      	movs	r1, #4
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f7e:	4b7e      	ldr	r3, [pc, #504]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f82:	4b7d      	ldr	r3, [pc, #500]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001f84:	2101      	movs	r1, #1
 8001f86:	430a      	orrs	r2, r1
 8001f88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f9d3 	bl	8001334 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f94:	f7ff f9ce 	bl	8001334 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0e3      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fa6:	4b74      	ldr	r3, [pc, #464]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d0f1      	beq.n	8001f94 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fb0:	4b71      	ldr	r3, [pc, #452]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb4:	22f8      	movs	r2, #248	@ 0xf8
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	0019      	movs	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	00da      	lsls	r2, r3, #3
 8001fc0:	4b6d      	ldr	r3, [pc, #436]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fc6:	e034      	b.n	8002032 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	3305      	adds	r3, #5
 8001fce:	d111      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fd0:	4b69      	ldr	r3, [pc, #420]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fd4:	4b68      	ldr	r3, [pc, #416]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	438a      	bics	r2, r1
 8001fda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fdc:	4b66      	ldr	r3, [pc, #408]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe0:	22f8      	movs	r2, #248	@ 0xf8
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	00da      	lsls	r2, r3, #3
 8001fec:	4b62      	ldr	r3, [pc, #392]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff2:	e01e      	b.n	8002032 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ff4:	4b60      	ldr	r3, [pc, #384]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ff8:	4b5f      	ldr	r3, [pc, #380]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002000:	4b5d      	ldr	r3, [pc, #372]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002004:	4b5c      	ldr	r3, [pc, #368]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002006:	2101      	movs	r1, #1
 8002008:	438a      	bics	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7ff f992 	bl	8001334 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002016:	f7ff f98d 	bl	8001334 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0a2      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002028:	4b53      	ldr	r3, [pc, #332]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 800202a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d1f1      	bne.n	8002016 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d100      	bne.n	800203c <HAL_RCC_OscConfig+0x4e4>
 800203a:	e097      	b.n	800216c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203c:	4b4e      	ldr	r3, [pc, #312]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	220c      	movs	r2, #12
 8002042:	4013      	ands	r3, r2
 8002044:	2b08      	cmp	r3, #8
 8002046:	d100      	bne.n	800204a <HAL_RCC_OscConfig+0x4f2>
 8002048:	e06b      	b.n	8002122 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d14c      	bne.n	80020ec <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b49      	ldr	r3, [pc, #292]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b48      	ldr	r3, [pc, #288]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002058:	494a      	ldr	r1, [pc, #296]	@ (8002184 <HAL_RCC_OscConfig+0x62c>)
 800205a:	400a      	ands	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff f969 	bl	8001334 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff f964 	bl	8001334 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e079      	b.n	800216e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	4b3f      	ldr	r3, [pc, #252]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	049b      	lsls	r3, r3, #18
 8002082:	4013      	ands	r3, r2
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002086:	4b3c      	ldr	r3, [pc, #240]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	220f      	movs	r2, #15
 800208c:	4393      	bics	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002094:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002096:	430a      	orrs	r2, r1
 8002098:	62da      	str	r2, [r3, #44]	@ 0x2c
 800209a:	4b37      	ldr	r3, [pc, #220]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a3a      	ldr	r2, [pc, #232]	@ (8002188 <HAL_RCC_OscConfig+0x630>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	431a      	orrs	r2, r3
 80020ae:	4b32      	ldr	r3, [pc, #200]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b4:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 80020ba:	2180      	movs	r1, #128	@ 0x80
 80020bc:	0449      	lsls	r1, r1, #17
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff f937 	bl	8001334 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f932 	bl	8001334 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e047      	b.n	800216e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	049b      	lsls	r3, r3, #18
 80020e6:	4013      	ands	r3, r2
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x574>
 80020ea:	e03f      	b.n	800216c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ec:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 80020f2:	4924      	ldr	r1, [pc, #144]	@ (8002184 <HAL_RCC_OscConfig+0x62c>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff f91c 	bl	8001334 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff f917 	bl	8001334 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e02c      	b.n	800216e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002114:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	049b      	lsls	r3, r3, #18
 800211c:	4013      	ands	r3, r2
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x5aa>
 8002120:	e024      	b.n	800216c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e01f      	b.n	800216e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002134:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_RCC_OscConfig+0x620>)
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	025b      	lsls	r3, r3, #9
 8002140:	401a      	ands	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	429a      	cmp	r2, r3
 8002148:	d10e      	bne.n	8002168 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	220f      	movs	r2, #15
 800214e:	401a      	ands	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	23f0      	movs	r3, #240	@ 0xf0
 800215c:	039b      	lsls	r3, r3, #14
 800215e:	401a      	ands	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b008      	add	sp, #32
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	40021000 	.word	0x40021000
 800217c:	00001388 	.word	0x00001388
 8002180:	efffffff 	.word	0xefffffff
 8002184:	feffffff 	.word	0xfeffffff
 8002188:	ffc2ffff 	.word	0xffc2ffff

0800218c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b3      	b.n	8002308 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002310 <HAL_RCC_ClockConfig+0x184>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d911      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b58      	ldr	r3, [pc, #352]	@ (8002310 <HAL_RCC_ClockConfig+0x184>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2201      	movs	r2, #1
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <HAL_RCC_ClockConfig+0x184>)
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c0:	4b53      	ldr	r3, [pc, #332]	@ (8002310 <HAL_RCC_ClockConfig+0x184>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e09a      	b.n	8002308 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d015      	beq.n	8002208 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	d006      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 80021ec:	21e0      	movs	r1, #224	@ 0xe0
 80021ee:	00c9      	lsls	r1, r1, #3
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	22f0      	movs	r2, #240	@ 0xf0
 80021fa:	4393      	bics	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	4b44      	ldr	r3, [pc, #272]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 8002204:	430a      	orrs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2201      	movs	r2, #1
 800220e:	4013      	ands	r3, r2
 8002210:	d040      	beq.n	8002294 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b3e      	ldr	r3, [pc, #248]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	4013      	ands	r3, r2
 8002224:	d114      	bne.n	8002250 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06e      	b.n	8002308 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b38      	ldr	r3, [pc, #224]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	049b      	lsls	r3, r3, #18
 800223a:	4013      	ands	r3, r2
 800223c:	d108      	bne.n	8002250 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e062      	b.n	8002308 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2202      	movs	r2, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e05b      	b.n	8002308 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002250:	4b30      	ldr	r3, [pc, #192]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2203      	movs	r2, #3
 8002256:	4393      	bics	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 8002260:	430a      	orrs	r2, r1
 8002262:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff f866 	bl	8001334 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226c:	e009      	b.n	8002282 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226e:	f7ff f861 	bl	8001334 <HAL_GetTick>
 8002272:	0002      	movs	r2, r0
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	4a27      	ldr	r2, [pc, #156]	@ (8002318 <HAL_RCC_ClockConfig+0x18c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e042      	b.n	8002308 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	220c      	movs	r2, #12
 8002288:	401a      	ands	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1ec      	bne.n	800226e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <HAL_RCC_ClockConfig+0x184>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d211      	bcs.n	80022c6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_RCC_ClockConfig+0x184>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	4393      	bics	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <HAL_RCC_ClockConfig+0x184>)
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b4:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <HAL_RCC_ClockConfig+0x184>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e020      	b.n	8002308 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2204      	movs	r2, #4
 80022cc:	4013      	ands	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a11      	ldr	r2, [pc, #68]	@ (800231c <HAL_RCC_ClockConfig+0x190>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022e4:	f000 f820 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022e8:	0001      	movs	r1, r0
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_RCC_ClockConfig+0x188>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	220f      	movs	r2, #15
 80022f2:	4013      	ands	r3, r2
 80022f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <HAL_RCC_ClockConfig+0x194>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	000a      	movs	r2, r1
 80022fa:	40da      	lsrs	r2, r3
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_RCC_ClockConfig+0x198>)
 80022fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002300:	2000      	movs	r0, #0
 8002302:	f7fe ffd1 	bl	80012a8 <HAL_InitTick>
  
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b004      	add	sp, #16
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40022000 	.word	0x40022000
 8002314:	40021000 	.word	0x40021000
 8002318:	00001388 	.word	0x00001388
 800231c:	fffff8ff 	.word	0xfffff8ff
 8002320:	08004b88 	.word	0x08004b88
 8002324:	20000018 	.word	0x20000018

08002328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002342:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	220c      	movs	r2, #12
 800234c:	4013      	ands	r3, r2
 800234e:	2b04      	cmp	r3, #4
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x30>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x36>
 8002356:	e02c      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800235a:	613b      	str	r3, [r7, #16]
      break;
 800235c:	e02c      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	220f      	movs	r2, #15
 8002364:	4013      	ands	r3, r2
 8002366:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002368:	5cd3      	ldrb	r3, [r2, r3]
 800236a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800236c:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	220f      	movs	r2, #15
 8002372:	4013      	ands	r3, r2
 8002374:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	025b      	lsls	r3, r3, #9
 8002380:	4013      	ands	r3, r2
 8002382:	d009      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	4810      	ldr	r0, [pc, #64]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002388:	f7fd febe 	bl	8000108 <__udivsi3>
 800238c:	0003      	movs	r3, r0
 800238e:	001a      	movs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4353      	muls	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e009      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	000a      	movs	r2, r1
 800239c:	0152      	lsls	r2, r2, #5
 800239e:	1a52      	subs	r2, r2, r1
 80023a0:	0193      	lsls	r3, r2, #6
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	185b      	adds	r3, r3, r1
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
      break;
 80023b0:	e002      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b2:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b4:	613b      	str	r3, [r7, #16]
      break;
 80023b6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023b8:	693b      	ldr	r3, [r7, #16]
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b006      	add	sp, #24
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	40021000 	.word	0x40021000
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	08004ba0 	.word	0x08004ba0
 80023d0:	08004bb0 	.word	0x08004bb0

080023d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d8:	4b02      	ldr	r3, [pc, #8]	@ (80023e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	20000018 	.word	0x20000018

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023ec:	f7ff fff2 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 80023f0:	0001      	movs	r1, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	2207      	movs	r2, #7
 80023fa:	4013      	ands	r3, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	40d9      	lsrs	r1, r3
 8002402:	000b      	movs	r3, r1
}    
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	40021000 	.word	0x40021000
 8002410:	08004b98 	.word	0x08004b98

08002414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e042      	b.n	80024ac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	223d      	movs	r2, #61	@ 0x3d
 800242a:	5c9b      	ldrb	r3, [r3, r2]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	223c      	movs	r2, #60	@ 0x3c
 8002436:	2100      	movs	r1, #0
 8002438:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f7fe fd77 	bl	8000f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	223d      	movs	r2, #61	@ 0x3d
 8002446:	2102      	movs	r1, #2
 8002448:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	0019      	movs	r1, r3
 8002454:	0010      	movs	r0, r2
 8002456:	f000 fd11 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2246      	movs	r2, #70	@ 0x46
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	223e      	movs	r2, #62	@ 0x3e
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	223f      	movs	r2, #63	@ 0x3f
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2240      	movs	r2, #64	@ 0x40
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2241      	movs	r2, #65	@ 0x41
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2242      	movs	r2, #66	@ 0x42
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2243      	movs	r2, #67	@ 0x43
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2244      	movs	r2, #68	@ 0x44
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2245      	movs	r2, #69	@ 0x45
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	223d      	movs	r2, #61	@ 0x3d
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <HAL_TIM_Base_Stop_IT+0x54>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	d10d      	bne.n	80024f4 <HAL_TIM_Base_Stop_IT+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a0b      	ldr	r2, [pc, #44]	@ (800250c <HAL_TIM_Base_Stop_IT+0x58>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_Base_Stop_IT+0x40>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2101      	movs	r1, #1
 80024f0:	438a      	bics	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	223d      	movs	r2, #61	@ 0x3d
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	00001111 	.word	0x00001111
 800250c:	00000444 	.word	0x00000444

08002510 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e042      	b.n	80025a8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	223d      	movs	r2, #61	@ 0x3d
 8002526:	5c9b      	ldrb	r3, [r3, r2]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223c      	movs	r2, #60	@ 0x3c
 8002532:	2100      	movs	r1, #0
 8002534:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 f839 	bl	80025b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	223d      	movs	r2, #61	@ 0x3d
 8002542:	2102      	movs	r1, #2
 8002544:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	0019      	movs	r1, r3
 8002550:	0010      	movs	r0, r2
 8002552:	f000 fc93 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2246      	movs	r2, #70	@ 0x46
 800255a:	2101      	movs	r1, #1
 800255c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	223e      	movs	r2, #62	@ 0x3e
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	223f      	movs	r2, #63	@ 0x3f
 800256a:	2101      	movs	r1, #1
 800256c:	5499      	strb	r1, [r3, r2]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2240      	movs	r2, #64	@ 0x40
 8002572:	2101      	movs	r1, #1
 8002574:	5499      	strb	r1, [r3, r2]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2241      	movs	r2, #65	@ 0x41
 800257a:	2101      	movs	r1, #1
 800257c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2242      	movs	r2, #66	@ 0x42
 8002582:	2101      	movs	r1, #1
 8002584:	5499      	strb	r1, [r3, r2]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2243      	movs	r2, #67	@ 0x43
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2244      	movs	r2, #68	@ 0x44
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2245      	movs	r2, #69	@ 0x45
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	223d      	movs	r2, #61	@ 0x3d
 80025a2:	2101      	movs	r1, #1
 80025a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025b8:	46c0      	nop			@ (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <HAL_TIM_PWM_Start+0x22>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	223e      	movs	r2, #62	@ 0x3e
 80025d4:	5c9b      	ldrb	r3, [r3, r2]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	1e5a      	subs	r2, r3, #1
 80025dc:	4193      	sbcs	r3, r2
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e01f      	b.n	8002622 <HAL_TIM_PWM_Start+0x62>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d108      	bne.n	80025fa <HAL_TIM_PWM_Start+0x3a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	223f      	movs	r2, #63	@ 0x3f
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	4193      	sbcs	r3, r2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e013      	b.n	8002622 <HAL_TIM_PWM_Start+0x62>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d108      	bne.n	8002612 <HAL_TIM_PWM_Start+0x52>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	@ 0x40
 8002604:	5c9b      	ldrb	r3, [r3, r2]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	1e5a      	subs	r2, r3, #1
 800260c:	4193      	sbcs	r3, r2
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e007      	b.n	8002622 <HAL_TIM_PWM_Start+0x62>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2241      	movs	r2, #65	@ 0x41
 8002616:	5c9b      	ldrb	r3, [r3, r2]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	1e5a      	subs	r2, r3, #1
 800261e:	4193      	sbcs	r3, r2
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e074      	b.n	8002714 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <HAL_TIM_PWM_Start+0x7a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	223e      	movs	r2, #62	@ 0x3e
 8002634:	2102      	movs	r1, #2
 8002636:	5499      	strb	r1, [r3, r2]
 8002638:	e013      	b.n	8002662 <HAL_TIM_PWM_Start+0xa2>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b04      	cmp	r3, #4
 800263e:	d104      	bne.n	800264a <HAL_TIM_PWM_Start+0x8a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	223f      	movs	r2, #63	@ 0x3f
 8002644:	2102      	movs	r1, #2
 8002646:	5499      	strb	r1, [r3, r2]
 8002648:	e00b      	b.n	8002662 <HAL_TIM_PWM_Start+0xa2>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b08      	cmp	r3, #8
 800264e:	d104      	bne.n	800265a <HAL_TIM_PWM_Start+0x9a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2240      	movs	r2, #64	@ 0x40
 8002654:	2102      	movs	r1, #2
 8002656:	5499      	strb	r1, [r3, r2]
 8002658:	e003      	b.n	8002662 <HAL_TIM_PWM_Start+0xa2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2241      	movs	r2, #65	@ 0x41
 800265e:	2102      	movs	r1, #2
 8002660:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	0018      	movs	r0, r3
 800266c:	f000 ff1c 	bl	80034a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a29      	ldr	r2, [pc, #164]	@ (800271c <HAL_TIM_PWM_Start+0x15c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_TIM_PWM_Start+0xd8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a28      	ldr	r2, [pc, #160]	@ (8002720 <HAL_TIM_PWM_Start+0x160>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_TIM_PWM_Start+0xd8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a26      	ldr	r2, [pc, #152]	@ (8002724 <HAL_TIM_PWM_Start+0x164>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_TIM_PWM_Start+0xd8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a25      	ldr	r2, [pc, #148]	@ (8002728 <HAL_TIM_PWM_Start+0x168>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_TIM_PWM_Start+0xdc>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_TIM_PWM_Start+0xde>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2180      	movs	r1, #128	@ 0x80
 80026ae:	0209      	lsls	r1, r1, #8
 80026b0:	430a      	orrs	r2, r1
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a18      	ldr	r2, [pc, #96]	@ (800271c <HAL_TIM_PWM_Start+0x15c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00f      	beq.n	80026de <HAL_TIM_PWM_Start+0x11e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	05db      	lsls	r3, r3, #23
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d009      	beq.n	80026de <HAL_TIM_PWM_Start+0x11e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a17      	ldr	r2, [pc, #92]	@ (800272c <HAL_TIM_PWM_Start+0x16c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIM_PWM_Start+0x11e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <HAL_TIM_PWM_Start+0x160>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d111      	bne.n	8002702 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2207      	movs	r2, #7
 80026e6:	4013      	ands	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b06      	cmp	r3, #6
 80026ee:	d010      	beq.n	8002712 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2101      	movs	r1, #1
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002700:	e007      	b.n	8002712 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40014000 	.word	0x40014000
 8002724:	40014400 	.word	0x40014400
 8002728:	40014800 	.word	0x40014800
 800272c:	40000400 	.word	0x40000400

08002730 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	0018      	movs	r0, r3
 8002744:	f000 feb0 	bl	80034a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2f      	ldr	r2, [pc, #188]	@ (800280c <HAL_TIM_PWM_Stop+0xdc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_TIM_PWM_Stop+0x40>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2e      	ldr	r2, [pc, #184]	@ (8002810 <HAL_TIM_PWM_Stop+0xe0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_TIM_PWM_Stop+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2c      	ldr	r2, [pc, #176]	@ (8002814 <HAL_TIM_PWM_Stop+0xe4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_TIM_PWM_Stop+0x40>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2b      	ldr	r2, [pc, #172]	@ (8002818 <HAL_TIM_PWM_Stop+0xe8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d101      	bne.n	8002774 <HAL_TIM_PWM_Stop+0x44>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_TIM_PWM_Stop+0x46>
 8002774:	2300      	movs	r3, #0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d013      	beq.n	80027a2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a26      	ldr	r2, [pc, #152]	@ (800281c <HAL_TIM_PWM_Stop+0xec>)
 8002782:	4013      	ands	r3, r2
 8002784:	d10d      	bne.n	80027a2 <HAL_TIM_PWM_Stop+0x72>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a24      	ldr	r2, [pc, #144]	@ (8002820 <HAL_TIM_PWM_Stop+0xf0>)
 800278e:	4013      	ands	r3, r2
 8002790:	d107      	bne.n	80027a2 <HAL_TIM_PWM_Stop+0x72>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4921      	ldr	r1, [pc, #132]	@ (8002824 <HAL_TIM_PWM_Stop+0xf4>)
 800279e:	400a      	ands	r2, r1
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4a1c      	ldr	r2, [pc, #112]	@ (800281c <HAL_TIM_PWM_Stop+0xec>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	d10d      	bne.n	80027ca <HAL_TIM_PWM_Stop+0x9a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <HAL_TIM_PWM_Stop+0xf0>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	d107      	bne.n	80027ca <HAL_TIM_PWM_Stop+0x9a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	438a      	bics	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d104      	bne.n	80027da <HAL_TIM_PWM_Stop+0xaa>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223e      	movs	r2, #62	@ 0x3e
 80027d4:	2101      	movs	r1, #1
 80027d6:	5499      	strb	r1, [r3, r2]
 80027d8:	e013      	b.n	8002802 <HAL_TIM_PWM_Stop+0xd2>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d104      	bne.n	80027ea <HAL_TIM_PWM_Stop+0xba>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	223f      	movs	r2, #63	@ 0x3f
 80027e4:	2101      	movs	r1, #1
 80027e6:	5499      	strb	r1, [r3, r2]
 80027e8:	e00b      	b.n	8002802 <HAL_TIM_PWM_Stop+0xd2>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d104      	bne.n	80027fa <HAL_TIM_PWM_Stop+0xca>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2240      	movs	r2, #64	@ 0x40
 80027f4:	2101      	movs	r1, #1
 80027f6:	5499      	strb	r1, [r3, r2]
 80027f8:	e003      	b.n	8002802 <HAL_TIM_PWM_Stop+0xd2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2241      	movs	r2, #65	@ 0x41
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40014000 	.word	0x40014000
 8002814:	40014400 	.word	0x40014400
 8002818:	40014800 	.word	0x40014800
 800281c:	00001111 	.word	0x00001111
 8002820:	00000444 	.word	0x00000444
 8002824:	ffff7fff 	.word	0xffff7fff

08002828 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e042      	b.n	80028c2 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	223d      	movs	r2, #61	@ 0x3d
 8002840:	5c9b      	ldrb	r3, [r3, r2]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	223c      	movs	r2, #60	@ 0x3c
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 f839 	bl	80028ca <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	223d      	movs	r2, #61	@ 0x3d
 800285c:	2102      	movs	r1, #2
 800285e:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	f000 fb06 	bl	8002e7c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2108      	movs	r1, #8
 800287c:	438a      	bics	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2246      	movs	r2, #70	@ 0x46
 8002894:	2101      	movs	r1, #1
 8002896:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	223e      	movs	r2, #62	@ 0x3e
 800289c:	2101      	movs	r1, #1
 800289e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	223f      	movs	r2, #63	@ 0x3f
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2242      	movs	r2, #66	@ 0x42
 80028ac:	2101      	movs	r1, #1
 80028ae:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2243      	movs	r2, #67	@ 0x43
 80028b4:	2101      	movs	r1, #1
 80028b6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	223d      	movs	r2, #61	@ 0x3d
 80028bc:	2101      	movs	r1, #1
 80028be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2202      	movs	r2, #2
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d124      	bne.n	800293a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d11d      	bne.n	800293a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2203      	movs	r2, #3
 8002904:	4252      	negs	r2, r2
 8002906:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2203      	movs	r2, #3
 8002916:	4013      	ands	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fa95 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002922:	e007      	b.n	8002934 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 fa88 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 fa94 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2204      	movs	r2, #4
 8002942:	4013      	ands	r3, r2
 8002944:	2b04      	cmp	r3, #4
 8002946:	d125      	bne.n	8002994 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	2b04      	cmp	r3, #4
 8002954:	d11e      	bne.n	8002994 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2205      	movs	r2, #5
 800295c:	4252      	negs	r2, r2
 800295e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	23c0      	movs	r3, #192	@ 0xc0
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fa68 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 800297c:	e007      	b.n	800298e <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 fa5b 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fa67 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2208      	movs	r2, #8
 800299c:	4013      	ands	r3, r2
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d124      	bne.n	80029ec <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2208      	movs	r2, #8
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d11d      	bne.n	80029ec <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2209      	movs	r2, #9
 80029b6:	4252      	negs	r2, r2
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2204      	movs	r2, #4
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	2203      	movs	r2, #3
 80029c8:	4013      	ands	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 fa3c 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 80029d4:	e007      	b.n	80029e6 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 fa2f 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fa3b 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2210      	movs	r2, #16
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d125      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2210      	movs	r2, #16
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d11e      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2211      	movs	r2, #17
 8002a0e:	4252      	negs	r2, r2
 8002a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2208      	movs	r2, #8
 8002a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	23c0      	movs	r3, #192	@ 0xc0
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 fa0f 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002a2e:	e007      	b.n	8002a40 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 fa02 	bl	8002e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fa0e 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d10f      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d108      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2202      	movs	r2, #2
 8002a68:	4252      	negs	r2, r2
 8002a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7fd fdc0 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2280      	movs	r2, #128	@ 0x80
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d10f      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2280      	movs	r2, #128	@ 0x80
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b80      	cmp	r3, #128	@ 0x80
 8002a8e:	d108      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2281      	movs	r2, #129	@ 0x81
 8002a96:	4252      	negs	r2, r2
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fd8d 	bl	80035bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2240      	movs	r2, #64	@ 0x40
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b40      	cmp	r3, #64	@ 0x40
 8002aae:	d10f      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2240      	movs	r2, #64	@ 0x40
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b40      	cmp	r3, #64	@ 0x40
 8002abc:	d108      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2241      	movs	r2, #65	@ 0x41
 8002ac4:	4252      	negs	r2, r2
 8002ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f9ce 	bl	8002e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d10f      	bne.n	8002afe <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d108      	bne.n	8002afe <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2221      	movs	r2, #33	@ 0x21
 8002af2:	4252      	negs	r2, r2
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 fd57 	bl	80035ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2317      	movs	r3, #23
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	223c      	movs	r2, #60	@ 0x3c
 8002b20:	5c9b      	ldrb	r3, [r3, r2]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0ad      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	223c      	movs	r2, #60	@ 0x3c
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d100      	bne.n	8002b3a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b38:	e076      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d900      	bls.n	8002b42 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002b40:	e095      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d04e      	beq.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d900      	bls.n	8002b50 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002b4e:	e08e      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d021      	beq.n	8002ba0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002b5c:	e087      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 fa08 	bl	8002f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2108      	movs	r1, #8
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2104      	movs	r1, #4
 8002b88:	438a      	bics	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6999      	ldr	r1, [r3, #24]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	619a      	str	r2, [r3, #24]
      break;
 8002b9e:	e06b      	b.n	8002c78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fa6f 	bl	800308c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2180      	movs	r1, #128	@ 0x80
 8002bba:	0109      	lsls	r1, r1, #4
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4931      	ldr	r1, [pc, #196]	@ (8002c90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6999      	ldr	r1, [r3, #24]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	619a      	str	r2, [r3, #24]
      break;
 8002be4:	e048      	b.n	8002c78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	0011      	movs	r1, r2
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fad0 	bl	8003194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2108      	movs	r1, #8
 8002c00:	430a      	orrs	r2, r1
 8002c02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2104      	movs	r1, #4
 8002c10:	438a      	bics	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69d9      	ldr	r1, [r3, #28]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	61da      	str	r2, [r3, #28]
      break;
 8002c26:	e027      	b.n	8002c78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	0011      	movs	r1, r2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 fb35 	bl	80032a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2180      	movs	r1, #128	@ 0x80
 8002c42:	0109      	lsls	r1, r1, #4
 8002c44:	430a      	orrs	r2, r1
 8002c46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	490f      	ldr	r1, [pc, #60]	@ (8002c90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69d9      	ldr	r1, [r3, #28]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	021a      	lsls	r2, r3, #8
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	61da      	str	r2, [r3, #28]
      break;
 8002c6c:	e004      	b.n	8002c78 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002c6e:	2317      	movs	r3, #23
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
      break;
 8002c76:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	223c      	movs	r2, #60	@ 0x3c
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

  return status;
 8002c80:	2317      	movs	r3, #23
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	781b      	ldrb	r3, [r3, #0]
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	fffffbff 	.word	0xfffffbff

08002c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	230f      	movs	r3, #15
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	223c      	movs	r2, #60	@ 0x3c
 8002caa:	5c9b      	ldrb	r3, [r3, r2]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_ConfigClockSource+0x20>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0bc      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x19a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	223c      	movs	r2, #60	@ 0x3c
 8002cb8:	2101      	movs	r1, #1
 8002cba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223d      	movs	r2, #61	@ 0x3d
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2277      	movs	r2, #119	@ 0x77
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4a58      	ldr	r2, [pc, #352]	@ (8002e38 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	0192      	lsls	r2, r2, #6
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d040      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0xde>
 8002cf0:	2280      	movs	r2, #128	@ 0x80
 8002cf2:	0192      	lsls	r2, r2, #6
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d900      	bls.n	8002cfa <HAL_TIM_ConfigClockSource+0x66>
 8002cf8:	e088      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
 8002cfa:	2280      	movs	r2, #128	@ 0x80
 8002cfc:	0152      	lsls	r2, r2, #5
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d100      	bne.n	8002d04 <HAL_TIM_ConfigClockSource+0x70>
 8002d02:	e088      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x182>
 8002d04:	2280      	movs	r2, #128	@ 0x80
 8002d06:	0152      	lsls	r2, r2, #5
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d900      	bls.n	8002d0e <HAL_TIM_ConfigClockSource+0x7a>
 8002d0c:	e07e      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
 8002d0e:	2b70      	cmp	r3, #112	@ 0x70
 8002d10:	d018      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0xb0>
 8002d12:	d900      	bls.n	8002d16 <HAL_TIM_ConfigClockSource+0x82>
 8002d14:	e07a      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
 8002d16:	2b60      	cmp	r3, #96	@ 0x60
 8002d18:	d04f      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x126>
 8002d1a:	d900      	bls.n	8002d1e <HAL_TIM_ConfigClockSource+0x8a>
 8002d1c:	e076      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
 8002d1e:	2b50      	cmp	r3, #80	@ 0x50
 8002d20:	d03b      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x106>
 8002d22:	d900      	bls.n	8002d26 <HAL_TIM_ConfigClockSource+0x92>
 8002d24:	e072      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
 8002d26:	2b40      	cmp	r3, #64	@ 0x40
 8002d28:	d057      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x146>
 8002d2a:	d900      	bls.n	8002d2e <HAL_TIM_ConfigClockSource+0x9a>
 8002d2c:	e06e      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
 8002d2e:	2b30      	cmp	r3, #48	@ 0x30
 8002d30:	d063      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x166>
 8002d32:	d86b      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d060      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x166>
 8002d38:	d868      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d05d      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x166>
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d05b      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x166>
 8002d42:	e063      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d54:	f000 fb88 	bl	8003468 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2277      	movs	r2, #119	@ 0x77
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	609a      	str	r2, [r3, #8]
      break;
 8002d70:	e052      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d82:	f000 fb71 	bl	8003468 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	01c9      	lsls	r1, r1, #7
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
      break;
 8002d98:	e03e      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	001a      	movs	r2, r3
 8002da8:	f000 fae4 	bl	8003374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2150      	movs	r1, #80	@ 0x50
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fb3e 	bl	8003434 <TIM_ITRx_SetConfig>
      break;
 8002db8:	e02e      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	f000 fb02 	bl	80033d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2160      	movs	r1, #96	@ 0x60
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fb2e 	bl	8003434 <TIM_ITRx_SetConfig>
      break;
 8002dd8:	e01e      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	001a      	movs	r2, r3
 8002de8:	f000 fac4 	bl	8003374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2140      	movs	r1, #64	@ 0x40
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 fb1e 	bl	8003434 <TIM_ITRx_SetConfig>
      break;
 8002df8:	e00e      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	0019      	movs	r1, r3
 8002e04:	0010      	movs	r0, r2
 8002e06:	f000 fb15 	bl	8003434 <TIM_ITRx_SetConfig>
      break;
 8002e0a:	e005      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
      break;
 8002e14:	e000      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002e16:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	223d      	movs	r2, #61	@ 0x3d
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	223c      	movs	r2, #60	@ 0x3c
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]

  return status;
 8002e28:	230f      	movs	r3, #15
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	ffff00ff 	.word	0xffff00ff

08002e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a34      	ldr	r2, [pc, #208]	@ (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d008      	beq.n	8002ea6 <TIM_Base_SetConfig+0x2a>
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x2a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a30      	ldr	r2, [pc, #192]	@ (8002f64 <TIM_Base_SetConfig+0xe8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2270      	movs	r2, #112	@ 0x70
 8002eaa:	4393      	bics	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a29      	ldr	r2, [pc, #164]	@ (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d018      	beq.n	8002ef2 <TIM_Base_SetConfig+0x76>
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d013      	beq.n	8002ef2 <TIM_Base_SetConfig+0x76>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	@ (8002f64 <TIM_Base_SetConfig+0xe8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00f      	beq.n	8002ef2 <TIM_Base_SetConfig+0x76>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a24      	ldr	r2, [pc, #144]	@ (8002f68 <TIM_Base_SetConfig+0xec>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0x76>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a23      	ldr	r2, [pc, #140]	@ (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0x76>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a22      	ldr	r2, [pc, #136]	@ (8002f70 <TIM_Base_SetConfig+0xf4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0x76>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a21      	ldr	r2, [pc, #132]	@ (8002f74 <TIM_Base_SetConfig+0xf8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	@ (8002f78 <TIM_Base_SetConfig+0xfc>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2280      	movs	r2, #128	@ 0x80
 8002f08:	4393      	bics	r3, r2
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_Base_SetConfig+0xce>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0xce>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f70 <TIM_Base_SetConfig+0xf4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0xce>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a0b      	ldr	r2, [pc, #44]	@ (8002f74 <TIM_Base_SetConfig+0xf8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d103      	bne.n	8002f52 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	615a      	str	r2, [r3, #20]
}
 8002f58:	46c0      	nop			@ (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40002000 	.word	0x40002000
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800
 8002f78:	fffffcff 	.word	0xfffffcff

08002f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	001a      	movs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2270      	movs	r2, #112	@ 0x70
 8002faa:	4393      	bics	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	4393      	bics	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4393      	bics	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a27      	ldr	r2, [pc, #156]	@ (8003074 <TIM_OC1_SetConfig+0xf8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_OC1_SetConfig+0x76>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a26      	ldr	r2, [pc, #152]	@ (8003078 <TIM_OC1_SetConfig+0xfc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_OC1_SetConfig+0x76>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a25      	ldr	r2, [pc, #148]	@ (800307c <TIM_OC1_SetConfig+0x100>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_OC1_SetConfig+0x76>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a24      	ldr	r2, [pc, #144]	@ (8003080 <TIM_OC1_SetConfig+0x104>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10c      	bne.n	800300c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2204      	movs	r2, #4
 8003008:	4393      	bics	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a19      	ldr	r2, [pc, #100]	@ (8003074 <TIM_OC1_SetConfig+0xf8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00b      	beq.n	800302c <TIM_OC1_SetConfig+0xb0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a18      	ldr	r2, [pc, #96]	@ (8003078 <TIM_OC1_SetConfig+0xfc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <TIM_OC1_SetConfig+0xb0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a17      	ldr	r2, [pc, #92]	@ (800307c <TIM_OC1_SetConfig+0x100>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d003      	beq.n	800302c <TIM_OC1_SetConfig+0xb0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <TIM_OC1_SetConfig+0x104>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d111      	bne.n	8003050 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4a15      	ldr	r2, [pc, #84]	@ (8003084 <TIM_OC1_SetConfig+0x108>)
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4a14      	ldr	r2, [pc, #80]	@ (8003088 <TIM_OC1_SetConfig+0x10c>)
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b006      	add	sp, #24
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800
 8003084:	fffffeff 	.word	0xfffffeff
 8003088:	fffffdff 	.word	0xfffffdff

0800308c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	2210      	movs	r2, #16
 800309c:	4393      	bics	r3, r2
 800309e:	001a      	movs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003174 <TIM_OC2_SetConfig+0xe8>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003178 <TIM_OC2_SetConfig+0xec>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2220      	movs	r2, #32
 80030d6:	4393      	bics	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a24      	ldr	r2, [pc, #144]	@ (800317c <TIM_OC2_SetConfig+0xf0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10d      	bne.n	800310a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2280      	movs	r2, #128	@ 0x80
 80030f2:	4393      	bics	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2240      	movs	r2, #64	@ 0x40
 8003106:	4393      	bics	r3, r2
 8003108:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <TIM_OC2_SetConfig+0xf0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00b      	beq.n	800312a <TIM_OC2_SetConfig+0x9e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1a      	ldr	r2, [pc, #104]	@ (8003180 <TIM_OC2_SetConfig+0xf4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <TIM_OC2_SetConfig+0x9e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a19      	ldr	r2, [pc, #100]	@ (8003184 <TIM_OC2_SetConfig+0xf8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d003      	beq.n	800312a <TIM_OC2_SetConfig+0x9e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a18      	ldr	r2, [pc, #96]	@ (8003188 <TIM_OC2_SetConfig+0xfc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d113      	bne.n	8003152 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4a17      	ldr	r2, [pc, #92]	@ (800318c <TIM_OC2_SetConfig+0x100>)
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4a16      	ldr	r2, [pc, #88]	@ (8003190 <TIM_OC2_SetConfig+0x104>)
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	621a      	str	r2, [r3, #32]
}
 800316c:	46c0      	nop			@ (mov r8, r8)
 800316e:	46bd      	mov	sp, r7
 8003170:	b006      	add	sp, #24
 8003172:	bd80      	pop	{r7, pc}
 8003174:	ffff8fff 	.word	0xffff8fff
 8003178:	fffffcff 	.word	0xfffffcff
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800
 800318c:	fffffbff 	.word	0xfffffbff
 8003190:	fffff7ff 	.word	0xfffff7ff

08003194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4a35      	ldr	r2, [pc, #212]	@ (8003278 <TIM_OC3_SetConfig+0xe4>)
 80031a4:	401a      	ands	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2270      	movs	r2, #112	@ 0x70
 80031c0:	4393      	bics	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2203      	movs	r2, #3
 80031c8:	4393      	bics	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	4a28      	ldr	r2, [pc, #160]	@ (800327c <TIM_OC3_SetConfig+0xe8>)
 80031da:	4013      	ands	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a24      	ldr	r2, [pc, #144]	@ (8003280 <TIM_OC3_SetConfig+0xec>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10d      	bne.n	800320e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4a23      	ldr	r2, [pc, #140]	@ (8003284 <TIM_OC3_SetConfig+0xf0>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <TIM_OC3_SetConfig+0xf4>)
 800320a:	4013      	ands	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <TIM_OC3_SetConfig+0xec>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_OC3_SetConfig+0x9a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <TIM_OC3_SetConfig+0xf8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_OC3_SetConfig+0x9a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1b      	ldr	r2, [pc, #108]	@ (8003290 <TIM_OC3_SetConfig+0xfc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC3_SetConfig+0x9a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1a      	ldr	r2, [pc, #104]	@ (8003294 <TIM_OC3_SetConfig+0x100>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d113      	bne.n	8003256 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <TIM_OC3_SetConfig+0x104>)
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4a18      	ldr	r2, [pc, #96]	@ (800329c <TIM_OC3_SetConfig+0x108>)
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b006      	add	sp, #24
 8003276:	bd80      	pop	{r7, pc}
 8003278:	fffffeff 	.word	0xfffffeff
 800327c:	fffffdff 	.word	0xfffffdff
 8003280:	40012c00 	.word	0x40012c00
 8003284:	fffff7ff 	.word	0xfffff7ff
 8003288:	fffffbff 	.word	0xfffffbff
 800328c:	40014000 	.word	0x40014000
 8003290:	40014400 	.word	0x40014400
 8003294:	40014800 	.word	0x40014800
 8003298:	ffffefff 	.word	0xffffefff
 800329c:	ffffdfff 	.word	0xffffdfff

080032a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a28      	ldr	r2, [pc, #160]	@ (8003350 <TIM_OC4_SetConfig+0xb0>)
 80032b0:	401a      	ands	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a22      	ldr	r2, [pc, #136]	@ (8003354 <TIM_OC4_SetConfig+0xb4>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a21      	ldr	r2, [pc, #132]	@ (8003358 <TIM_OC4_SetConfig+0xb8>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <TIM_OC4_SetConfig+0xbc>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	031b      	lsls	r3, r3, #12
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <TIM_OC4_SetConfig+0xc0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00b      	beq.n	8003318 <TIM_OC4_SetConfig+0x78>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <TIM_OC4_SetConfig+0xc4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d007      	beq.n	8003318 <TIM_OC4_SetConfig+0x78>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a17      	ldr	r2, [pc, #92]	@ (8003368 <TIM_OC4_SetConfig+0xc8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_OC4_SetConfig+0x78>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a16      	ldr	r2, [pc, #88]	@ (800336c <TIM_OC4_SetConfig+0xcc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d109      	bne.n	800332c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	4a15      	ldr	r2, [pc, #84]	@ (8003370 <TIM_OC4_SetConfig+0xd0>)
 800331c:	4013      	ands	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b006      	add	sp, #24
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	ffffefff 	.word	0xffffefff
 8003354:	ffff8fff 	.word	0xffff8fff
 8003358:	fffffcff 	.word	0xfffffcff
 800335c:	ffffdfff 	.word	0xffffdfff
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800
 8003370:	ffffbfff 	.word	0xffffbfff

08003374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	2201      	movs	r2, #1
 800338c:	4393      	bics	r3, r2
 800338e:	001a      	movs	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	22f0      	movs	r2, #240	@ 0xf0
 800339e:	4393      	bics	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	220a      	movs	r2, #10
 80033b0:	4393      	bics	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b006      	add	sp, #24
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	2210      	movs	r2, #16
 80033e2:	4393      	bics	r3, r2
 80033e4:	001a      	movs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003430 <TIM_TI2_ConfigInputStage+0x60>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	031b      	lsls	r3, r3, #12
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	22a0      	movs	r2, #160	@ 0xa0
 800340c:	4393      	bics	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	621a      	str	r2, [r3, #32]
}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b006      	add	sp, #24
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	ffff0fff 	.word	0xffff0fff

08003434 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2270      	movs	r2, #112	@ 0x70
 8003448:	4393      	bics	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	2207      	movs	r2, #7
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	609a      	str	r2, [r3, #8]
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	4a09      	ldr	r2, [pc, #36]	@ (80034a4 <TIM_ETR_SetConfig+0x3c>)
 8003480:	4013      	ands	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	021a      	lsls	r2, r3, #8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	431a      	orrs	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4313      	orrs	r3, r2
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	46c0      	nop			@ (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b006      	add	sp, #24
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	ffff00ff 	.word	0xffff00ff

080034a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	221f      	movs	r2, #31
 80034b8:	4013      	ands	r3, r2
 80034ba:	2201      	movs	r2, #1
 80034bc:	409a      	lsls	r2, r3
 80034be:	0013      	movs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	43d2      	mvns	r2, r2
 80034ca:	401a      	ands	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	211f      	movs	r1, #31
 80034d8:	400b      	ands	r3, r1
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4099      	lsls	r1, r3
 80034de:	000b      	movs	r3, r1
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b006      	add	sp, #24
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	223c      	movs	r2, #60	@ 0x3c
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003504:	2302      	movs	r3, #2
 8003506:	e047      	b.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	223c      	movs	r2, #60	@ 0x3c
 800350c:	2101      	movs	r1, #1
 800350e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223d      	movs	r2, #61	@ 0x3d
 8003514:	2102      	movs	r1, #2
 8003516:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2270      	movs	r2, #112	@ 0x70
 800352c:	4393      	bics	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a16      	ldr	r2, [pc, #88]	@ (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00f      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	2380      	movs	r3, #128	@ 0x80
 8003552:	05db      	lsls	r3, r3, #23
 8003554:	429a      	cmp	r2, r3
 8003556:	d009      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a11      	ldr	r2, [pc, #68]	@ (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a10      	ldr	r2, [pc, #64]	@ (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d10c      	bne.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2280      	movs	r2, #128	@ 0x80
 8003570:	4393      	bics	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	4313      	orrs	r3, r2
 800357c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223d      	movs	r2, #61	@ 0x3d
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	223c      	movs	r2, #60	@ 0x3c
 8003592:	2100      	movs	r1, #0
 8003594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b004      	add	sp, #16
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40014000 	.word	0x40014000

080035ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b4:	46c0      	nop			@ (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e044      	b.n	8003668 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d107      	bne.n	80035f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2278      	movs	r2, #120	@ 0x78
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fd fd4d 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2224      	movs	r2, #36	@ 0x24
 80035fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	438a      	bics	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	0018      	movs	r0, r3
 8003610:	f000 fc60 	bl	8003ed4 <UART_SetConfig>
 8003614:	0003      	movs	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e024      	b.n	8003668 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f000 fd93 	bl	8004154 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	490d      	ldr	r1, [pc, #52]	@ (8003670 <HAL_UART_Init+0xa4>)
 800363a:	400a      	ands	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	212a      	movs	r1, #42	@ 0x2a
 800364a:	438a      	bics	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2101      	movs	r1, #1
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 fe2b 	bl	80042bc <UART_CheckIdleState>
 8003666:	0003      	movs	r3, r0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}
 8003670:	ffffb7ff 	.word	0xffffb7ff

08003674 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e030      	b.n	80036e8 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2224      	movs	r2, #36	@ 0x24
 800368a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	438a      	bics	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2200      	movs	r2, #0
 80036aa:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fd fd3e 	bl	8001138 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2284      	movs	r2, #132	@ 0x84
 80036c0:	2100      	movs	r1, #0
 80036c2:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2280      	movs	r2, #128	@ 0x80
 80036ce:	2100      	movs	r1, #0
 80036d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2278      	movs	r2, #120	@ 0x78
 80036e2:	2100      	movs	r1, #0
 80036e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	1dbb      	adds	r3, r7, #6
 80036fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003704:	2b20      	cmp	r3, #32
 8003706:	d000      	beq.n	800370a <HAL_UART_Transmit+0x1a>
 8003708:	e08c      	b.n	8003824 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_UART_Transmit+0x28>
 8003710:	1dbb      	adds	r3, r7, #6
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e084      	b.n	8003826 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	015b      	lsls	r3, r3, #5
 8003724:	429a      	cmp	r2, r3
 8003726:	d109      	bne.n	800373c <HAL_UART_Transmit+0x4c>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2201      	movs	r2, #1
 8003734:	4013      	ands	r3, r2
 8003736:	d001      	beq.n	800373c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e074      	b.n	8003826 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2284      	movs	r2, #132	@ 0x84
 8003740:	2100      	movs	r1, #0
 8003742:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2221      	movs	r2, #33	@ 0x21
 8003748:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800374a:	f7fd fdf3 	bl	8001334 <HAL_GetTick>
 800374e:	0003      	movs	r3, r0
 8003750:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1dba      	adds	r2, r7, #6
 8003756:	2150      	movs	r1, #80	@ 0x50
 8003758:	8812      	ldrh	r2, [r2, #0]
 800375a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1dba      	adds	r2, r7, #6
 8003760:	2152      	movs	r1, #82	@ 0x52
 8003762:	8812      	ldrh	r2, [r2, #0]
 8003764:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	015b      	lsls	r3, r3, #5
 800376e:	429a      	cmp	r2, r3
 8003770:	d108      	bne.n	8003784 <HAL_UART_Transmit+0x94>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e003      	b.n	800378c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800378c:	e02f      	b.n	80037ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	0013      	movs	r3, r2
 8003798:	2200      	movs	r2, #0
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	f000 fe36 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 80037a0:	1e03      	subs	r3, r0, #0
 80037a2:	d004      	beq.n	80037ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e03b      	b.n	8003826 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	881a      	ldrh	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	05d2      	lsls	r2, r2, #23
 80037be:	0dd2      	lsrs	r2, r2, #23
 80037c0:	b292      	uxth	r2, r2
 80037c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	3302      	adds	r3, #2
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e007      	b.n	80037dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3301      	adds	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2252      	movs	r2, #82	@ 0x52
 80037e0:	5a9b      	ldrh	r3, [r3, r2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b299      	uxth	r1, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2252      	movs	r2, #82	@ 0x52
 80037ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2252      	movs	r2, #82	@ 0x52
 80037f2:	5a9b      	ldrh	r3, [r3, r2]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1c9      	bne.n	800378e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	0013      	movs	r3, r2
 8003804:	2200      	movs	r2, #0
 8003806:	2140      	movs	r1, #64	@ 0x40
 8003808:	f000 fe00 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 800380c:	1e03      	subs	r3, r0, #0
 800380e:	d004      	beq.n	800381a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e005      	b.n	8003826 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b008      	add	sp, #32
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b088      	sub	sp, #32
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2280      	movs	r2, #128	@ 0x80
 8003840:	589b      	ldr	r3, [r3, r2]
 8003842:	2b20      	cmp	r3, #32
 8003844:	d145      	bne.n	80038d2 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_UART_Receive_IT+0x26>
 800384c:	1dbb      	adds	r3, r7, #6
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e03d      	b.n	80038d4 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	2380      	movs	r3, #128	@ 0x80
 800385e:	015b      	lsls	r3, r3, #5
 8003860:	429a      	cmp	r2, r3
 8003862:	d109      	bne.n	8003878 <HAL_UART_Receive_IT+0x4a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2201      	movs	r2, #1
 8003870:	4013      	ands	r3, r2
 8003872:	d001      	beq.n	8003878 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e02d      	b.n	80038d4 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	4013      	ands	r3, r2
 800388a:	d019      	beq.n	80038c0 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	613b      	str	r3, [r7, #16]
  return(result);
 8003892:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	2301      	movs	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f383 8810 	msr	PRIMASK, r3
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2180      	movs	r1, #128	@ 0x80
 80038ae:	04c9      	lsls	r1, r1, #19
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f383 8810 	msr	PRIMASK, r3
}
 80038be:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	881a      	ldrh	r2, [r3, #0]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 fe09 	bl	80044e0 <UART_Start_Receive_IT>
 80038ce:	0003      	movs	r3, r0
 80038d0:	e000      	b.n	80038d4 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b008      	add	sp, #32
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b0ab      	sub	sp, #172	@ 0xac
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	22a4      	movs	r2, #164	@ 0xa4
 80038ec:	18b9      	adds	r1, r7, r2
 80038ee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	20a0      	movs	r0, #160	@ 0xa0
 80038f8:	1839      	adds	r1, r7, r0
 80038fa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	219c      	movs	r1, #156	@ 0x9c
 8003904:	1879      	adds	r1, r7, r1
 8003906:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003908:	0011      	movs	r1, r2
 800390a:	18bb      	adds	r3, r7, r2
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a99      	ldr	r2, [pc, #612]	@ (8003b74 <HAL_UART_IRQHandler+0x298>)
 8003910:	4013      	ands	r3, r2
 8003912:	2298      	movs	r2, #152	@ 0x98
 8003914:	18bc      	adds	r4, r7, r2
 8003916:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003918:	18bb      	adds	r3, r7, r2
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d114      	bne.n	800394a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003920:	187b      	adds	r3, r7, r1
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2220      	movs	r2, #32
 8003926:	4013      	ands	r3, r2
 8003928:	d00f      	beq.n	800394a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800392a:	183b      	adds	r3, r7, r0
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2220      	movs	r2, #32
 8003930:	4013      	ands	r3, r2
 8003932:	d00a      	beq.n	800394a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003938:	2b00      	cmp	r3, #0
 800393a:	d100      	bne.n	800393e <HAL_UART_IRQHandler+0x62>
 800393c:	e29e      	b.n	8003e7c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	0010      	movs	r0, r2
 8003946:	4798      	blx	r3
      }
      return;
 8003948:	e298      	b.n	8003e7c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800394a:	2398      	movs	r3, #152	@ 0x98
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d100      	bne.n	8003956 <HAL_UART_IRQHandler+0x7a>
 8003954:	e114      	b.n	8003b80 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003956:	239c      	movs	r3, #156	@ 0x9c
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	4013      	ands	r3, r2
 8003960:	d106      	bne.n	8003970 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003962:	23a0      	movs	r3, #160	@ 0xa0
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a83      	ldr	r2, [pc, #524]	@ (8003b78 <HAL_UART_IRQHandler+0x29c>)
 800396a:	4013      	ands	r3, r2
 800396c:	d100      	bne.n	8003970 <HAL_UART_IRQHandler+0x94>
 800396e:	e107      	b.n	8003b80 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003970:	23a4      	movs	r3, #164	@ 0xa4
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	4013      	ands	r3, r2
 800397a:	d012      	beq.n	80039a2 <HAL_UART_IRQHandler+0xc6>
 800397c:	23a0      	movs	r3, #160	@ 0xa0
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	2380      	movs	r3, #128	@ 0x80
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4013      	ands	r3, r2
 8003988:	d00b      	beq.n	80039a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2201      	movs	r2, #1
 8003990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2284      	movs	r2, #132	@ 0x84
 8003996:	589b      	ldr	r3, [r3, r2]
 8003998:	2201      	movs	r2, #1
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2184      	movs	r1, #132	@ 0x84
 80039a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039a2:	23a4      	movs	r3, #164	@ 0xa4
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2202      	movs	r2, #2
 80039aa:	4013      	ands	r3, r2
 80039ac:	d011      	beq.n	80039d2 <HAL_UART_IRQHandler+0xf6>
 80039ae:	239c      	movs	r3, #156	@ 0x9c
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2201      	movs	r2, #1
 80039b6:	4013      	ands	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2202      	movs	r2, #2
 80039c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2284      	movs	r2, #132	@ 0x84
 80039c6:	589b      	ldr	r3, [r3, r2]
 80039c8:	2204      	movs	r2, #4
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2184      	movs	r1, #132	@ 0x84
 80039d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d2:	23a4      	movs	r3, #164	@ 0xa4
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2204      	movs	r2, #4
 80039da:	4013      	ands	r3, r2
 80039dc:	d011      	beq.n	8003a02 <HAL_UART_IRQHandler+0x126>
 80039de:	239c      	movs	r3, #156	@ 0x9c
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2201      	movs	r2, #1
 80039e6:	4013      	ands	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2204      	movs	r2, #4
 80039f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2284      	movs	r2, #132	@ 0x84
 80039f6:	589b      	ldr	r3, [r3, r2]
 80039f8:	2202      	movs	r2, #2
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2184      	movs	r1, #132	@ 0x84
 8003a00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a02:	23a4      	movs	r3, #164	@ 0xa4
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d017      	beq.n	8003a3e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a0e:	23a0      	movs	r3, #160	@ 0xa0
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2220      	movs	r2, #32
 8003a16:	4013      	ands	r3, r2
 8003a18:	d105      	bne.n	8003a26 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a1a:	239c      	movs	r3, #156	@ 0x9c
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2201      	movs	r2, #1
 8003a22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2284      	movs	r2, #132	@ 0x84
 8003a32:	589b      	ldr	r3, [r3, r2]
 8003a34:	2208      	movs	r2, #8
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2184      	movs	r1, #132	@ 0x84
 8003a3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a3e:	23a4      	movs	r3, #164	@ 0xa4
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	@ 0x80
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_UART_IRQHandler+0x198>
 8003a4c:	23a0      	movs	r3, #160	@ 0xa0
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	04db      	lsls	r3, r3, #19
 8003a56:	4013      	ands	r3, r2
 8003a58:	d00c      	beq.n	8003a74 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2280      	movs	r2, #128	@ 0x80
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2284      	movs	r2, #132	@ 0x84
 8003a68:	589b      	ldr	r3, [r3, r2]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2184      	movs	r1, #132	@ 0x84
 8003a72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2284      	movs	r2, #132	@ 0x84
 8003a78:	589b      	ldr	r3, [r3, r2]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d100      	bne.n	8003a80 <HAL_UART_IRQHandler+0x1a4>
 8003a7e:	e1ff      	b.n	8003e80 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a80:	23a4      	movs	r3, #164	@ 0xa4
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2220      	movs	r2, #32
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a8c:	23a0      	movs	r3, #160	@ 0xa0
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2220      	movs	r2, #32
 8003a94:	4013      	ands	r3, r2
 8003a96:	d008      	beq.n	8003aaa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	0010      	movs	r0, r2
 8003aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2284      	movs	r2, #132	@ 0x84
 8003aae:	589b      	ldr	r3, [r3, r2]
 8003ab0:	2194      	movs	r1, #148	@ 0x94
 8003ab2:	187a      	adds	r2, r7, r1
 8003ab4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2240      	movs	r2, #64	@ 0x40
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d004      	beq.n	8003ace <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2228      	movs	r2, #40	@ 0x28
 8003aca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003acc:	d047      	beq.n	8003b5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 fdbb 	bl	800464c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2240      	movs	r2, #64	@ 0x40
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b40      	cmp	r3, #64	@ 0x40
 8003ae2:	d137      	bne.n	8003b54 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aec:	2090      	movs	r0, #144	@ 0x90
 8003aee:	183a      	adds	r2, r7, r0
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	2301      	movs	r3, #1
 8003af4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2140      	movs	r1, #64	@ 0x40
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	183b      	adds	r3, r7, r0
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b16:	f383 8810 	msr	PRIMASK, r3
}
 8003b1a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d012      	beq.n	8003b4a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <HAL_UART_IRQHandler+0x2a0>)
 8003b2a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7fd fd51 	bl	80015d8 <HAL_DMA_Abort_IT>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d01a      	beq.n	8003b70 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b44:	0018      	movs	r0, r3
 8003b46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	e012      	b.n	8003b70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f000 f9ad 	bl	8003eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b52:	e00d      	b.n	8003b70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f9a8 	bl	8003eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	e008      	b.n	8003b70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f9a3 	bl	8003eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2284      	movs	r2, #132	@ 0x84
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b6e:	e187      	b.n	8003e80 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b72:	e185      	b.n	8003e80 <HAL_UART_IRQHandler+0x5a4>
 8003b74:	0000080f 	.word	0x0000080f
 8003b78:	04000120 	.word	0x04000120
 8003b7c:	08004715 	.word	0x08004715

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d000      	beq.n	8003b8a <HAL_UART_IRQHandler+0x2ae>
 8003b88:	e139      	b.n	8003dfe <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b8a:	23a4      	movs	r3, #164	@ 0xa4
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2210      	movs	r2, #16
 8003b92:	4013      	ands	r3, r2
 8003b94:	d100      	bne.n	8003b98 <HAL_UART_IRQHandler+0x2bc>
 8003b96:	e132      	b.n	8003dfe <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b98:	23a0      	movs	r3, #160	@ 0xa0
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x2ca>
 8003ba4:	e12b      	b.n	8003dfe <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2210      	movs	r2, #16
 8003bac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2240      	movs	r2, #64	@ 0x40
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d000      	beq.n	8003bbe <HAL_UART_IRQHandler+0x2e2>
 8003bbc:	e09f      	b.n	8003cfe <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	217e      	movs	r1, #126	@ 0x7e
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d100      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x2fa>
 8003bd4:	e156      	b.n	8003e84 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2258      	movs	r2, #88	@ 0x58
 8003bda:	5a9b      	ldrh	r3, [r3, r2]
 8003bdc:	187a      	adds	r2, r7, r1
 8003bde:	8812      	ldrh	r2, [r2, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d300      	bcc.n	8003be6 <HAL_UART_IRQHandler+0x30a>
 8003be4:	e14e      	b.n	8003e84 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	187a      	adds	r2, r7, r1
 8003bea:	215a      	movs	r1, #90	@ 0x5a
 8003bec:	8812      	ldrh	r2, [r2, #0]
 8003bee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d06f      	beq.n	8003cda <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c04:	2301      	movs	r3, #1
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	499e      	ldr	r1, [pc, #632]	@ (8003e94 <HAL_UART_IRQHandler+0x5b8>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c26:	f383 8810 	msr	PRIMASK, r3
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c34:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c36:	2301      	movs	r3, #1
 8003c38:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c3c:	f383 8810 	msr	PRIMASK, r3
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	438a      	bics	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c54:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c58:	f383 8810 	msr	PRIMASK, r3
}
 8003c5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c62:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c68:	2301      	movs	r3, #1
 8003c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2140      	movs	r1, #64	@ 0x40
 8003c80:	438a      	bics	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c86:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2280      	movs	r2, #128	@ 0x80
 8003c94:	2120      	movs	r1, #32
 8003c96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ca8:	2301      	movs	r3, #1
 8003caa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2110      	movs	r1, #16
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cca:	f383 8810 	msr	PRIMASK, r3
}
 8003cce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fd fc47 	bl	8001568 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2258      	movs	r2, #88	@ 0x58
 8003ce4:	5a9a      	ldrh	r2, [r3, r2]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	215a      	movs	r1, #90	@ 0x5a
 8003cea:	5a5b      	ldrh	r3, [r3, r1]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0011      	movs	r1, r2
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 f8e0 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cfc:	e0c2      	b.n	8003e84 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2258      	movs	r2, #88	@ 0x58
 8003d02:	5a99      	ldrh	r1, [r3, r2]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	225a      	movs	r2, #90	@ 0x5a
 8003d08:	5a9b      	ldrh	r3, [r3, r2]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	208e      	movs	r0, #142	@ 0x8e
 8003d0e:	183b      	adds	r3, r7, r0
 8003d10:	1a8a      	subs	r2, r1, r2
 8003d12:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	225a      	movs	r2, #90	@ 0x5a
 8003d18:	5a9b      	ldrh	r3, [r3, r2]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d100      	bne.n	8003d22 <HAL_UART_IRQHandler+0x446>
 8003d20:	e0b2      	b.n	8003e88 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003d22:	183b      	adds	r3, r7, r0
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d100      	bne.n	8003d2c <HAL_UART_IRQHandler+0x450>
 8003d2a:	e0ad      	b.n	8003e88 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d32:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d34:	2488      	movs	r4, #136	@ 0x88
 8003d36:	193a      	adds	r2, r7, r4
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			@ (mov r8, r8)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4951      	ldr	r1, [pc, #324]	@ (8003e98 <HAL_UART_IRQHandler+0x5bc>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f383 8810 	msr	PRIMASK, r3
}
 8003d62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d64:	f3ef 8310 	mrs	r3, PRIMASK
 8003d68:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d6a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	2484      	movs	r4, #132	@ 0x84
 8003d6e:	193a      	adds	r2, r7, r4
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	2301      	movs	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2101      	movs	r1, #1
 8003d8a:	438a      	bics	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	f383 8810 	msr	PRIMASK, r3
}
 8003d9a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2280      	movs	r2, #128	@ 0x80
 8003da0:	2120      	movs	r1, #32
 8003da2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db0:	f3ef 8310 	mrs	r3, PRIMASK
 8003db4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db8:	2480      	movs	r4, #128	@ 0x80
 8003dba:	193a      	adds	r2, r7, r4
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	f383 8810 	msr	PRIMASK, r3
}
 8003dc8:	46c0      	nop			@ (mov r8, r8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2110      	movs	r1, #16
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de2:	f383 8810 	msr	PRIMASK, r3
}
 8003de6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dee:	183b      	adds	r3, r7, r0
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0011      	movs	r1, r2
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 f860 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dfc:	e044      	b.n	8003e88 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dfe:	23a4      	movs	r3, #164	@ 0xa4
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	035b      	lsls	r3, r3, #13
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d010      	beq.n	8003e2e <HAL_UART_IRQHandler+0x552>
 8003e0c:	239c      	movs	r3, #156	@ 0x9c
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	2380      	movs	r3, #128	@ 0x80
 8003e14:	03db      	lsls	r3, r3, #15
 8003e16:	4013      	ands	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2280      	movs	r2, #128	@ 0x80
 8003e20:	0352      	lsls	r2, r2, #13
 8003e22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 fe6e 	bl	8004b08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e2c:	e02f      	b.n	8003e8e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e2e:	23a4      	movs	r3, #164	@ 0xa4
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2280      	movs	r2, #128	@ 0x80
 8003e36:	4013      	ands	r3, r2
 8003e38:	d00f      	beq.n	8003e5a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e3a:	23a0      	movs	r3, #160	@ 0xa0
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2280      	movs	r2, #128	@ 0x80
 8003e42:	4013      	ands	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01e      	beq.n	8003e8c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	0010      	movs	r0, r2
 8003e56:	4798      	blx	r3
    }
    return;
 8003e58:	e018      	b.n	8003e8c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e5a:	23a4      	movs	r3, #164	@ 0xa4
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2240      	movs	r2, #64	@ 0x40
 8003e62:	4013      	ands	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_UART_IRQHandler+0x5b2>
 8003e66:	23a0      	movs	r3, #160	@ 0xa0
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2240      	movs	r2, #64	@ 0x40
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 fc64 	bl	8004742 <UART_EndTransmit_IT>
    return;
 8003e7a:	e008      	b.n	8003e8e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003e7c:	46c0      	nop			@ (mov r8, r8)
 8003e7e:	e006      	b.n	8003e8e <HAL_UART_IRQHandler+0x5b2>
    return;
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	e004      	b.n	8003e8e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	e002      	b.n	8003e8e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	e000      	b.n	8003e8e <HAL_UART_IRQHandler+0x5b2>
    return;
 8003e8c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b02b      	add	sp, #172	@ 0xac
 8003e92:	bd90      	pop	{r4, r7, pc}
 8003e94:	fffffeff 	.word	0xfffffeff
 8003e98:	fffffedf 	.word	0xfffffedf

08003e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003eb4:	46c0      	nop			@ (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	000a      	movs	r2, r1
 8003ec6:	1cbb      	adds	r3, r7, #2
 8003ec8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003edc:	231e      	movs	r3, #30
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a8d      	ldr	r2, [pc, #564]	@ (8004138 <UART_SetConfig+0x264>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a88      	ldr	r2, [pc, #544]	@ (800413c <UART_SetConfig+0x268>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a7f      	ldr	r2, [pc, #508]	@ (8004140 <UART_SetConfig+0x26c>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a7b      	ldr	r2, [pc, #492]	@ (8004144 <UART_SetConfig+0x270>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d127      	bne.n	8003faa <UART_SetConfig+0xd6>
 8003f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004148 <UART_SetConfig+0x274>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	2203      	movs	r2, #3
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d00d      	beq.n	8003f82 <UART_SetConfig+0xae>
 8003f66:	d81b      	bhi.n	8003fa0 <UART_SetConfig+0xcc>
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d014      	beq.n	8003f96 <UART_SetConfig+0xc2>
 8003f6c:	d818      	bhi.n	8003fa0 <UART_SetConfig+0xcc>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <UART_SetConfig+0xa4>
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d00a      	beq.n	8003f8c <UART_SetConfig+0xb8>
 8003f76:	e013      	b.n	8003fa0 <UART_SetConfig+0xcc>
 8003f78:	231f      	movs	r3, #31
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e021      	b.n	8003fc6 <UART_SetConfig+0xf2>
 8003f82:	231f      	movs	r3, #31
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e01c      	b.n	8003fc6 <UART_SetConfig+0xf2>
 8003f8c:	231f      	movs	r3, #31
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2204      	movs	r2, #4
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e017      	b.n	8003fc6 <UART_SetConfig+0xf2>
 8003f96:	231f      	movs	r3, #31
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e012      	b.n	8003fc6 <UART_SetConfig+0xf2>
 8003fa0:	231f      	movs	r3, #31
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e00d      	b.n	8003fc6 <UART_SetConfig+0xf2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a67      	ldr	r2, [pc, #412]	@ (800414c <UART_SetConfig+0x278>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d104      	bne.n	8003fbe <UART_SetConfig+0xea>
 8003fb4:	231f      	movs	r3, #31
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e003      	b.n	8003fc6 <UART_SetConfig+0xf2>
 8003fbe:	231f      	movs	r3, #31
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	2380      	movs	r3, #128	@ 0x80
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d15c      	bne.n	800408c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003fd2:	231f      	movs	r3, #31
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d015      	beq.n	8004008 <UART_SetConfig+0x134>
 8003fdc:	dc18      	bgt.n	8004010 <UART_SetConfig+0x13c>
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d00d      	beq.n	8003ffe <UART_SetConfig+0x12a>
 8003fe2:	dc15      	bgt.n	8004010 <UART_SetConfig+0x13c>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <UART_SetConfig+0x11a>
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d005      	beq.n	8003ff8 <UART_SetConfig+0x124>
 8003fec:	e010      	b.n	8004010 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fee:	f7fe f9fb 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	61bb      	str	r3, [r7, #24]
        break;
 8003ff6:	e012      	b.n	800401e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff8:	4b55      	ldr	r3, [pc, #340]	@ (8004150 <UART_SetConfig+0x27c>)
 8003ffa:	61bb      	str	r3, [r7, #24]
        break;
 8003ffc:	e00f      	b.n	800401e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7fe f993 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8004002:	0003      	movs	r3, r0
 8004004:	61bb      	str	r3, [r7, #24]
        break;
 8004006:	e00a      	b.n	800401e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	61bb      	str	r3, [r7, #24]
        break;
 800400e:	e006      	b.n	800401e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004014:	231e      	movs	r3, #30
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
        break;
 800401c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d100      	bne.n	8004026 <UART_SetConfig+0x152>
 8004024:	e07a      	b.n	800411c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	005a      	lsls	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	18d2      	adds	r2, r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	0019      	movs	r1, r3
 8004038:	0010      	movs	r0, r2
 800403a:	f7fc f865 	bl	8000108 <__udivsi3>
 800403e:	0003      	movs	r3, r0
 8004040:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b0f      	cmp	r3, #15
 8004046:	d91c      	bls.n	8004082 <UART_SetConfig+0x1ae>
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	2380      	movs	r3, #128	@ 0x80
 800404c:	025b      	lsls	r3, r3, #9
 800404e:	429a      	cmp	r2, r3
 8004050:	d217      	bcs.n	8004082 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	b29a      	uxth	r2, r3
 8004056:	200e      	movs	r0, #14
 8004058:	183b      	adds	r3, r7, r0
 800405a:	210f      	movs	r1, #15
 800405c:	438a      	bics	r2, r1
 800405e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	b29b      	uxth	r3, r3
 8004066:	2207      	movs	r2, #7
 8004068:	4013      	ands	r3, r2
 800406a:	b299      	uxth	r1, r3
 800406c:	183b      	adds	r3, r7, r0
 800406e:	183a      	adds	r2, r7, r0
 8004070:	8812      	ldrh	r2, [r2, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	183a      	adds	r2, r7, r0
 800407c:	8812      	ldrh	r2, [r2, #0]
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	e04c      	b.n	800411c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004082:	231e      	movs	r3, #30
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	e047      	b.n	800411c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800408c:	231f      	movs	r3, #31
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b08      	cmp	r3, #8
 8004094:	d015      	beq.n	80040c2 <UART_SetConfig+0x1ee>
 8004096:	dc18      	bgt.n	80040ca <UART_SetConfig+0x1f6>
 8004098:	2b04      	cmp	r3, #4
 800409a:	d00d      	beq.n	80040b8 <UART_SetConfig+0x1e4>
 800409c:	dc15      	bgt.n	80040ca <UART_SetConfig+0x1f6>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <UART_SetConfig+0x1d4>
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d005      	beq.n	80040b2 <UART_SetConfig+0x1de>
 80040a6:	e010      	b.n	80040ca <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a8:	f7fe f99e 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 80040ac:	0003      	movs	r3, r0
 80040ae:	61bb      	str	r3, [r7, #24]
        break;
 80040b0:	e012      	b.n	80040d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b2:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <UART_SetConfig+0x27c>)
 80040b4:	61bb      	str	r3, [r7, #24]
        break;
 80040b6:	e00f      	b.n	80040d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b8:	f7fe f936 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80040bc:	0003      	movs	r3, r0
 80040be:	61bb      	str	r3, [r7, #24]
        break;
 80040c0:	e00a      	b.n	80040d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	61bb      	str	r3, [r7, #24]
        break;
 80040c8:	e006      	b.n	80040d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ce:	231e      	movs	r3, #30
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
        break;
 80040d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01e      	beq.n	800411c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	085a      	lsrs	r2, r3, #1
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	18d2      	adds	r2, r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0019      	movs	r1, r3
 80040ee:	0010      	movs	r0, r2
 80040f0:	f7fc f80a 	bl	8000108 <__udivsi3>
 80040f4:	0003      	movs	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	d90a      	bls.n	8004114 <UART_SetConfig+0x240>
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	2380      	movs	r3, #128	@ 0x80
 8004102:	025b      	lsls	r3, r3, #9
 8004104:	429a      	cmp	r2, r3
 8004106:	d205      	bcs.n	8004114 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	e003      	b.n	800411c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004114:	231e      	movs	r3, #30
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004128:	231e      	movs	r3, #30
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	781b      	ldrb	r3, [r3, #0]
}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b008      	add	sp, #32
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	ffff69f3 	.word	0xffff69f3
 800413c:	ffffcfff 	.word	0xffffcfff
 8004140:	fffff4ff 	.word	0xfffff4ff
 8004144:	40013800 	.word	0x40013800
 8004148:	40021000 	.word	0x40021000
 800414c:	40004400 	.word	0x40004400
 8004150:	007a1200 	.word	0x007a1200

08004154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	2201      	movs	r2, #1
 8004162:	4013      	ands	r3, r2
 8004164:	d00b      	beq.n	800417e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a4a      	ldr	r2, [pc, #296]	@ (8004298 <UART_AdvFeatureConfig+0x144>)
 800416e:	4013      	ands	r3, r2
 8004170:	0019      	movs	r1, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	2202      	movs	r2, #2
 8004184:	4013      	ands	r3, r2
 8004186:	d00b      	beq.n	80041a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4a43      	ldr	r2, [pc, #268]	@ (800429c <UART_AdvFeatureConfig+0x148>)
 8004190:	4013      	ands	r3, r2
 8004192:	0019      	movs	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	2204      	movs	r2, #4
 80041a6:	4013      	ands	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a3b      	ldr	r2, [pc, #236]	@ (80042a0 <UART_AdvFeatureConfig+0x14c>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	2208      	movs	r2, #8
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4a34      	ldr	r2, [pc, #208]	@ (80042a4 <UART_AdvFeatureConfig+0x150>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	0019      	movs	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	2210      	movs	r2, #16
 80041ea:	4013      	ands	r3, r2
 80041ec:	d00b      	beq.n	8004206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a2c      	ldr	r2, [pc, #176]	@ (80042a8 <UART_AdvFeatureConfig+0x154>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	2220      	movs	r2, #32
 800420c:	4013      	ands	r3, r2
 800420e:	d00b      	beq.n	8004228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	4a25      	ldr	r2, [pc, #148]	@ (80042ac <UART_AdvFeatureConfig+0x158>)
 8004218:	4013      	ands	r3, r2
 800421a:	0019      	movs	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	2240      	movs	r2, #64	@ 0x40
 800422e:	4013      	ands	r3, r2
 8004230:	d01d      	beq.n	800426e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a1d      	ldr	r2, [pc, #116]	@ (80042b0 <UART_AdvFeatureConfig+0x15c>)
 800423a:	4013      	ands	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	035b      	lsls	r3, r3, #13
 8004252:	429a      	cmp	r2, r3
 8004254:	d10b      	bne.n	800426e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a15      	ldr	r2, [pc, #84]	@ (80042b4 <UART_AdvFeatureConfig+0x160>)
 800425e:	4013      	ands	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	2280      	movs	r2, #128	@ 0x80
 8004274:	4013      	ands	r3, r2
 8004276:	d00b      	beq.n	8004290 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4a0e      	ldr	r2, [pc, #56]	@ (80042b8 <UART_AdvFeatureConfig+0x164>)
 8004280:	4013      	ands	r3, r2
 8004282:	0019      	movs	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
}
 8004290:	46c0      	nop			@ (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b002      	add	sp, #8
 8004296:	bd80      	pop	{r7, pc}
 8004298:	fffdffff 	.word	0xfffdffff
 800429c:	fffeffff 	.word	0xfffeffff
 80042a0:	fffbffff 	.word	0xfffbffff
 80042a4:	ffff7fff 	.word	0xffff7fff
 80042a8:	ffffefff 	.word	0xffffefff
 80042ac:	ffffdfff 	.word	0xffffdfff
 80042b0:	ffefffff 	.word	0xffefffff
 80042b4:	ff9fffff 	.word	0xff9fffff
 80042b8:	fff7ffff 	.word	0xfff7ffff

080042bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b092      	sub	sp, #72	@ 0x48
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2284      	movs	r2, #132	@ 0x84
 80042c8:	2100      	movs	r1, #0
 80042ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042cc:	f7fd f832 	bl	8001334 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2208      	movs	r2, #8
 80042dc:	4013      	ands	r3, r2
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d12c      	bne.n	800433c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e4:	2280      	movs	r2, #128	@ 0x80
 80042e6:	0391      	lsls	r1, r2, #14
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4a46      	ldr	r2, [pc, #280]	@ (8004404 <UART_CheckIdleState+0x148>)
 80042ec:	9200      	str	r2, [sp, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f000 f88c 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 80042f4:	1e03      	subs	r3, r0, #0
 80042f6:	d021      	beq.n	800433c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f8:	f3ef 8310 	mrs	r3, PRIMASK
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004302:	2301      	movs	r3, #1
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	f383 8810 	msr	PRIMASK, r3
}
 800430c:	46c0      	nop			@ (mov r8, r8)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2180      	movs	r1, #128	@ 0x80
 800431a:	438a      	bics	r2, r1
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004324:	f383 8810 	msr	PRIMASK, r3
}
 8004328:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2278      	movs	r2, #120	@ 0x78
 8004334:	2100      	movs	r1, #0
 8004336:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e05f      	b.n	80043fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2204      	movs	r2, #4
 8004344:	4013      	ands	r3, r2
 8004346:	2b04      	cmp	r3, #4
 8004348:	d146      	bne.n	80043d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800434a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434c:	2280      	movs	r2, #128	@ 0x80
 800434e:	03d1      	lsls	r1, r2, #15
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4a2c      	ldr	r2, [pc, #176]	@ (8004404 <UART_CheckIdleState+0x148>)
 8004354:	9200      	str	r2, [sp, #0]
 8004356:	2200      	movs	r2, #0
 8004358:	f000 f858 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 800435c:	1e03      	subs	r3, r0, #0
 800435e:	d03b      	beq.n	80043d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004360:	f3ef 8310 	mrs	r3, PRIMASK
 8004364:	60fb      	str	r3, [r7, #12]
  return(result);
 8004366:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
 800436a:	2301      	movs	r3, #1
 800436c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f383 8810 	msr	PRIMASK, r3
}
 8004374:	46c0      	nop			@ (mov r8, r8)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4921      	ldr	r1, [pc, #132]	@ (8004408 <UART_CheckIdleState+0x14c>)
 8004382:	400a      	ands	r2, r1
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004388:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004392:	f3ef 8310 	mrs	r3, PRIMASK
 8004396:	61bb      	str	r3, [r7, #24]
  return(result);
 8004398:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	633b      	str	r3, [r7, #48]	@ 0x30
 800439c:	2301      	movs	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f383 8810 	msr	PRIMASK, r3
}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2101      	movs	r1, #1
 80043b4:	438a      	bics	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	f383 8810 	msr	PRIMASK, r3
}
 80043c2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2280      	movs	r2, #128	@ 0x80
 80043c8:	2120      	movs	r1, #32
 80043ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2278      	movs	r2, #120	@ 0x78
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e011      	b.n	80043fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2280      	movs	r2, #128	@ 0x80
 80043e2:	2120      	movs	r1, #32
 80043e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2278      	movs	r2, #120	@ 0x78
 80043f6:	2100      	movs	r1, #0
 80043f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	b010      	add	sp, #64	@ 0x40
 8004402:	bd80      	pop	{r7, pc}
 8004404:	01ffffff 	.word	0x01ffffff
 8004408:	fffffedf 	.word	0xfffffedf

0800440c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	1dfb      	adds	r3, r7, #7
 800441a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441c:	e04b      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	3301      	adds	r3, #1
 8004422:	d048      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004424:	f7fc ff86 	bl	8001334 <HAL_GetTick>
 8004428:	0002      	movs	r2, r0
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e04b      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2204      	movs	r2, #4
 8004446:	4013      	ands	r3, r2
 8004448:	d035      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2208      	movs	r2, #8
 8004452:	4013      	ands	r3, r2
 8004454:	2b08      	cmp	r3, #8
 8004456:	d111      	bne.n	800447c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2208      	movs	r2, #8
 800445e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f8f2 	bl	800464c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2284      	movs	r2, #132	@ 0x84
 800446c:	2108      	movs	r1, #8
 800446e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2278      	movs	r2, #120	@ 0x78
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e02c      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	401a      	ands	r2, r3
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	429a      	cmp	r2, r3
 800448e:	d112      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2280      	movs	r2, #128	@ 0x80
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	0018      	movs	r0, r3
 800449e:	f000 f8d5 	bl	800464c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2284      	movs	r2, #132	@ 0x84
 80044a6:	2120      	movs	r1, #32
 80044a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2278      	movs	r2, #120	@ 0x78
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e00f      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	425a      	negs	r2, r3
 80044c6:	4153      	adcs	r3, r2
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	001a      	movs	r2, r3
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d0a4      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b090      	sub	sp, #64	@ 0x40
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	1dbb      	adds	r3, r7, #6
 80044ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1dba      	adds	r2, r7, #6
 80044f8:	2158      	movs	r1, #88	@ 0x58
 80044fa:	8812      	ldrh	r2, [r2, #0]
 80044fc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1dba      	adds	r2, r7, #6
 8004502:	215a      	movs	r1, #90	@ 0x5a
 8004504:	8812      	ldrh	r2, [r2, #0]
 8004506:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	015b      	lsls	r3, r3, #5
 8004516:	429a      	cmp	r2, r3
 8004518:	d10d      	bne.n	8004536 <UART_Start_Receive_IT+0x56>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <UART_Start_Receive_IT+0x4c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	225c      	movs	r2, #92	@ 0x5c
 8004526:	4946      	ldr	r1, [pc, #280]	@ (8004640 <UART_Start_Receive_IT+0x160>)
 8004528:	5299      	strh	r1, [r3, r2]
 800452a:	e01a      	b.n	8004562 <UART_Start_Receive_IT+0x82>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	225c      	movs	r2, #92	@ 0x5c
 8004530:	21ff      	movs	r1, #255	@ 0xff
 8004532:	5299      	strh	r1, [r3, r2]
 8004534:	e015      	b.n	8004562 <UART_Start_Receive_IT+0x82>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10d      	bne.n	800455a <UART_Start_Receive_IT+0x7a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <UART_Start_Receive_IT+0x70>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	225c      	movs	r2, #92	@ 0x5c
 800454a:	21ff      	movs	r1, #255	@ 0xff
 800454c:	5299      	strh	r1, [r3, r2]
 800454e:	e008      	b.n	8004562 <UART_Start_Receive_IT+0x82>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	225c      	movs	r2, #92	@ 0x5c
 8004554:	217f      	movs	r1, #127	@ 0x7f
 8004556:	5299      	strh	r1, [r3, r2]
 8004558:	e003      	b.n	8004562 <UART_Start_Receive_IT+0x82>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	225c      	movs	r2, #92	@ 0x5c
 800455e:	2100      	movs	r1, #0
 8004560:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2284      	movs	r2, #132	@ 0x84
 8004566:	2100      	movs	r1, #0
 8004568:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2280      	movs	r2, #128	@ 0x80
 800456e:	2122      	movs	r1, #34	@ 0x22
 8004570:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004572:	f3ef 8310 	mrs	r3, PRIMASK
 8004576:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800457c:	2301      	movs	r3, #1
 800457e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004582:	f383 8810 	msr	PRIMASK, r3
}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	430a      	orrs	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	f383 8810 	msr	PRIMASK, r3
}
 80045a2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	015b      	lsls	r3, r3, #5
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d107      	bne.n	80045c0 <UART_Start_Receive_IT+0xe0>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a22      	ldr	r2, [pc, #136]	@ (8004644 <UART_Start_Receive_IT+0x164>)
 80045bc:	669a      	str	r2, [r3, #104]	@ 0x68
 80045be:	e002      	b.n	80045c6 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a21      	ldr	r2, [pc, #132]	@ (8004648 <UART_Start_Receive_IT+0x168>)
 80045c4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d019      	beq.n	8004602 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ce:	f3ef 8310 	mrs	r3, PRIMASK
 80045d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80045d4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d8:	2301      	movs	r3, #1
 80045da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2190      	movs	r1, #144	@ 0x90
 80045f0:	0049      	lsls	r1, r1, #1
 80045f2:	430a      	orrs	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	f383 8810 	msr	PRIMASK, r3
}
 8004600:	e018      	b.n	8004634 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004602:	f3ef 8310 	mrs	r3, PRIMASK
 8004606:	613b      	str	r3, [r7, #16]
  return(result);
 8004608:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800460a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f383 8810 	msr	PRIMASK, r3
}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2120      	movs	r1, #32
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f383 8810 	msr	PRIMASK, r3
}
 8004632:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	0018      	movs	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b010      	add	sp, #64	@ 0x40
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	000001ff 	.word	0x000001ff
 8004644:	08004951 	.word	0x08004951
 8004648:	08004799 	.word	0x08004799

0800464c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	@ 0x38
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004654:	f3ef 8310 	mrs	r3, PRIMASK
 8004658:	617b      	str	r3, [r7, #20]
  return(result);
 800465a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
 800465e:	2301      	movs	r3, #1
 8004660:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f383 8810 	msr	PRIMASK, r3
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4926      	ldr	r1, [pc, #152]	@ (8004710 <UART_EndRxTransfer+0xc4>)
 8004676:	400a      	ands	r2, r1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800467c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004686:	f3ef 8310 	mrs	r3, PRIMASK
 800468a:	623b      	str	r3, [r7, #32]
  return(result);
 800468c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004690:	2301      	movs	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2101      	movs	r1, #1
 80046a8:	438a      	bics	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d118      	bne.n	80046f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c0:	f3ef 8310 	mrs	r3, PRIMASK
 80046c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80046c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ca:	2301      	movs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f383 8810 	msr	PRIMASK, r3
}
 80046d4:	46c0      	nop			@ (mov r8, r8)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2110      	movs	r1, #16
 80046e2:	438a      	bics	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2280      	movs	r2, #128	@ 0x80
 80046f6:	2120      	movs	r1, #32
 80046f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b00e      	add	sp, #56	@ 0x38
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	fffffedf 	.word	0xfffffedf

08004714 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	225a      	movs	r2, #90	@ 0x5a
 8004726:	2100      	movs	r1, #0
 8004728:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2252      	movs	r2, #82	@ 0x52
 800472e:	2100      	movs	r1, #0
 8004730:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	0018      	movs	r0, r3
 8004736:	f7ff fbb9 	bl	8003eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	46bd      	mov	sp, r7
 800473e:	b004      	add	sp, #16
 8004740:	bd80      	pop	{r7, pc}

08004742 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474a:	f3ef 8310 	mrs	r3, PRIMASK
 800474e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004750:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	2301      	movs	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f383 8810 	msr	PRIMASK, r3
}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2140      	movs	r1, #64	@ 0x40
 800476c:	438a      	bics	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f383 8810 	msr	PRIMASK, r3
}
 800477a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f7ff fb86 	bl	8003e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004790:	46c0      	nop			@ (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b006      	add	sp, #24
 8004796:	bd80      	pop	{r7, pc}

08004798 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b094      	sub	sp, #80	@ 0x50
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047a0:	204e      	movs	r0, #78	@ 0x4e
 80047a2:	183b      	adds	r3, r7, r0
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	215c      	movs	r1, #92	@ 0x5c
 80047a8:	5a52      	ldrh	r2, [r2, r1]
 80047aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2280      	movs	r2, #128	@ 0x80
 80047b0:	589b      	ldr	r3, [r3, r2]
 80047b2:	2b22      	cmp	r3, #34	@ 0x22
 80047b4:	d000      	beq.n	80047b8 <UART_RxISR_8BIT+0x20>
 80047b6:	e0ba      	b.n	800492e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	214c      	movs	r1, #76	@ 0x4c
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80047c2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047c4:	187b      	adds	r3, r7, r1
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b2d9      	uxtb	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	400a      	ands	r2, r1
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	225a      	movs	r2, #90	@ 0x5a
 80047e8:	5a9b      	ldrh	r3, [r3, r2]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b299      	uxth	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	225a      	movs	r2, #90	@ 0x5a
 80047f4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	225a      	movs	r2, #90	@ 0x5a
 80047fa:	5a9b      	ldrh	r3, [r3, r2]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d000      	beq.n	8004804 <UART_RxISR_8BIT+0x6c>
 8004802:	e09c      	b.n	800493e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004804:	f3ef 8310 	mrs	r3, PRIMASK
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800480e:	2301      	movs	r3, #1
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	46c0      	nop			@ (mov r8, r8)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4948      	ldr	r1, [pc, #288]	@ (8004948 <UART_RxISR_8BIT+0x1b0>)
 8004826:	400a      	ands	r2, r1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004830:	f383 8810 	msr	PRIMASK, r3
}
 8004834:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004836:	f3ef 8310 	mrs	r3, PRIMASK
 800483a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800483c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004840:	2301      	movs	r3, #1
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	46c0      	nop			@ (mov r8, r8)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2101      	movs	r1, #1
 8004858:	438a      	bics	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800485e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	f383 8810 	msr	PRIMASK, r3
}
 8004866:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2280      	movs	r2, #128	@ 0x80
 800486c:	2120      	movs	r1, #32
 800486e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	4013      	ands	r3, r2
 8004888:	d018      	beq.n	80048bc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488a:	f3ef 8310 	mrs	r3, PRIMASK
 800488e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004890:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004892:	643b      	str	r3, [r7, #64]	@ 0x40
 8004894:	2301      	movs	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4928      	ldr	r1, [pc, #160]	@ (800494c <UART_RxISR_8BIT+0x1b4>)
 80048ac:	400a      	ands	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f383 8810 	msr	PRIMASK, r3
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d12f      	bne.n	8004924 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ca:	f3ef 8310 	mrs	r3, PRIMASK
 80048ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80048d0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048d4:	2301      	movs	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2110      	movs	r1, #16
 80048ec:	438a      	bics	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	2210      	movs	r2, #16
 8004904:	4013      	ands	r3, r2
 8004906:	2b10      	cmp	r3, #16
 8004908:	d103      	bne.n	8004912 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2210      	movs	r2, #16
 8004910:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2258      	movs	r2, #88	@ 0x58
 8004916:	5a9a      	ldrh	r2, [r3, r2]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0011      	movs	r1, r2
 800491c:	0018      	movs	r0, r3
 800491e:	f7ff facd 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004922:	e00c      	b.n	800493e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f7fb fd04 	bl	8000334 <HAL_UART_RxCpltCallback>
}
 800492c:	e007      	b.n	800493e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2108      	movs	r1, #8
 800493a:	430a      	orrs	r2, r1
 800493c:	619a      	str	r2, [r3, #24]
}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b014      	add	sp, #80	@ 0x50
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	fffffedf 	.word	0xfffffedf
 800494c:	fbffffff 	.word	0xfbffffff

08004950 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b094      	sub	sp, #80	@ 0x50
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004958:	204e      	movs	r0, #78	@ 0x4e
 800495a:	183b      	adds	r3, r7, r0
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	215c      	movs	r1, #92	@ 0x5c
 8004960:	5a52      	ldrh	r2, [r2, r1]
 8004962:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2280      	movs	r2, #128	@ 0x80
 8004968:	589b      	ldr	r3, [r3, r2]
 800496a:	2b22      	cmp	r3, #34	@ 0x22
 800496c:	d000      	beq.n	8004970 <UART_RxISR_16BIT+0x20>
 800496e:	e0ba      	b.n	8004ae6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	214c      	movs	r1, #76	@ 0x4c
 8004976:	187b      	adds	r3, r7, r1
 8004978:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800497a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004980:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004982:	187b      	adds	r3, r7, r1
 8004984:	183a      	adds	r2, r7, r0
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	8812      	ldrh	r2, [r2, #0]
 800498a:	4013      	ands	r3, r2
 800498c:	b29a      	uxth	r2, r3
 800498e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004990:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004996:	1c9a      	adds	r2, r3, #2
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	225a      	movs	r2, #90	@ 0x5a
 80049a0:	5a9b      	ldrh	r3, [r3, r2]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b299      	uxth	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	225a      	movs	r2, #90	@ 0x5a
 80049ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	225a      	movs	r2, #90	@ 0x5a
 80049b2:	5a9b      	ldrh	r3, [r3, r2]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d000      	beq.n	80049bc <UART_RxISR_16BIT+0x6c>
 80049ba:	e09c      	b.n	8004af6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049bc:	f3ef 8310 	mrs	r3, PRIMASK
 80049c0:	623b      	str	r3, [r7, #32]
  return(result);
 80049c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049c6:	2301      	movs	r3, #1
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	f383 8810 	msr	PRIMASK, r3
}
 80049d0:	46c0      	nop			@ (mov r8, r8)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4948      	ldr	r1, [pc, #288]	@ (8004b00 <UART_RxISR_16BIT+0x1b0>)
 80049de:	400a      	ands	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e8:	f383 8810 	msr	PRIMASK, r3
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ee:	f3ef 8310 	mrs	r3, PRIMASK
 80049f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80049f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80049f8:	2301      	movs	r3, #1
 80049fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	f383 8810 	msr	PRIMASK, r3
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a16:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1a:	f383 8810 	msr	PRIMASK, r3
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2280      	movs	r2, #128	@ 0x80
 8004a24:	2120      	movs	r1, #32
 8004a26:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	2380      	movs	r3, #128	@ 0x80
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d018      	beq.n	8004a74 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a42:	f3ef 8310 	mrs	r3, PRIMASK
 8004a46:	617b      	str	r3, [r7, #20]
  return(result);
 8004a48:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4928      	ldr	r1, [pc, #160]	@ (8004b04 <UART_RxISR_16BIT+0x1b4>)
 8004a64:	400a      	ands	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f383 8810 	msr	PRIMASK, r3
}
 8004a72:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d12f      	bne.n	8004adc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a82:	f3ef 8310 	mrs	r3, PRIMASK
 8004a86:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a88:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	438a      	bics	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f383 8810 	msr	PRIMASK, r3
}
 8004ab2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	2210      	movs	r2, #16
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d103      	bne.n	8004aca <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2210      	movs	r2, #16
 8004ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2258      	movs	r2, #88	@ 0x58
 8004ace:	5a9a      	ldrh	r2, [r3, r2]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	0011      	movs	r1, r2
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7ff f9f1 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ada:	e00c      	b.n	8004af6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f7fb fc28 	bl	8000334 <HAL_UART_RxCpltCallback>
}
 8004ae4:	e007      	b.n	8004af6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2108      	movs	r1, #8
 8004af2:	430a      	orrs	r2, r1
 8004af4:	619a      	str	r2, [r3, #24]
}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b014      	add	sp, #80	@ 0x50
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	fffffedf 	.word	0xfffffedf
 8004b04:	fbffffff 	.word	0xfbffffff

08004b08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b10:	46c0      	nop			@ (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b002      	add	sp, #8
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <memset>:
 8004b18:	0003      	movs	r3, r0
 8004b1a:	1882      	adds	r2, r0, r2
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d100      	bne.n	8004b22 <memset+0xa>
 8004b20:	4770      	bx	lr
 8004b22:	7019      	strb	r1, [r3, #0]
 8004b24:	3301      	adds	r3, #1
 8004b26:	e7f9      	b.n	8004b1c <memset+0x4>

08004b28 <__libc_init_array>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	4c0c      	ldr	r4, [pc, #48]	@ (8004b60 <__libc_init_array+0x38>)
 8004b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b64 <__libc_init_array+0x3c>)
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	42a6      	cmp	r6, r4
 8004b36:	d109      	bne.n	8004b4c <__libc_init_array+0x24>
 8004b38:	2600      	movs	r6, #0
 8004b3a:	f000 f819 	bl	8004b70 <_init>
 8004b3e:	4c0a      	ldr	r4, [pc, #40]	@ (8004b68 <__libc_init_array+0x40>)
 8004b40:	4d0a      	ldr	r5, [pc, #40]	@ (8004b6c <__libc_init_array+0x44>)
 8004b42:	1b64      	subs	r4, r4, r5
 8004b44:	10a4      	asrs	r4, r4, #2
 8004b46:	42a6      	cmp	r6, r4
 8004b48:	d105      	bne.n	8004b56 <__libc_init_array+0x2e>
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	00b3      	lsls	r3, r6, #2
 8004b4e:	58eb      	ldr	r3, [r5, r3]
 8004b50:	4798      	blx	r3
 8004b52:	3601      	adds	r6, #1
 8004b54:	e7ee      	b.n	8004b34 <__libc_init_array+0xc>
 8004b56:	00b3      	lsls	r3, r6, #2
 8004b58:	58eb      	ldr	r3, [r5, r3]
 8004b5a:	4798      	blx	r3
 8004b5c:	3601      	adds	r6, #1
 8004b5e:	e7f2      	b.n	8004b46 <__libc_init_array+0x1e>
 8004b60:	08004bc0 	.word	0x08004bc0
 8004b64:	08004bc0 	.word	0x08004bc0
 8004b68:	08004bc4 	.word	0x08004bc4
 8004b6c:	08004bc0 	.word	0x08004bc0

08004b70 <_init>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr

08004b7c <_fini>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b82:	bc08      	pop	{r3}
 8004b84:	469e      	mov	lr, r3
 8004b86:	4770      	bx	lr
