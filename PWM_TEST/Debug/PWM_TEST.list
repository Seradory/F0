
PWM_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac8  08004ac8  00007800  2**0
                  CONTENTS
  4 .ARM          00000000  08004ac8  08004ac8  00007800  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ac8  08004ac8  00007800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac8  08004ac8  00005ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004ad0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .myCustomSection 00000800  0800f000  0800f000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000a74  20000024  20000024  00008024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  00008024  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00007800  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d81c  00000000  00000000  00007828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e18  00000000  00000000  00015044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00016e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c2  00000000  00000000  00017ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001256e  00000000  00000000  0001847a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed20  00000000  00000000  0002a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00070e2f  00000000  00000000  00039708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa537  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c90  00000000  00000000  000aa57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000ad20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a78 	.word	0x08004a78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08004a78 	.word	0x08004a78

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <m_vurus_gonder>:
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim14;


 void m_vurus_gonder(uint32_t frequency, uint32_t duty_cycle)
 {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
     // PWM frekansÄ± ve duty cycle ayarlarÄ±
	  htim3.Instance->ARR = HAL_RCC_GetPCLK1Freq() / frequency - 1;
 800022a:	f002 f80f 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 800022e:	0003      	movs	r3, r0
 8000230:	6879      	ldr	r1, [r7, #4]
 8000232:	0018      	movs	r0, r3
 8000234:	f7ff ff68 	bl	8000108 <__udivsi3>
 8000238:	0003      	movs	r3, r0
 800023a:	001a      	movs	r2, r3
 800023c:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <m_vurus_gonder+0x54>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	3a01      	subs	r2, #1
 8000242:	62da      	str	r2, [r3, #44]	@ 0x2c
	  htim3.Instance->CCR1 = (duty_cycle * (htim3.Instance->ARR + 1)) / 100;
 8000244:	4b0b      	ldr	r3, [pc, #44]	@ (8000274 <m_vurus_gonder+0x54>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800024a:	3301      	adds	r3, #1
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	435a      	muls	r2, r3
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <m_vurus_gonder+0x54>)
 8000252:	681c      	ldr	r4, [r3, #0]
 8000254:	2164      	movs	r1, #100	@ 0x64
 8000256:	0010      	movs	r0, r2
 8000258:	f7ff ff56 	bl	8000108 <__udivsi3>
 800025c:	0003      	movs	r3, r0
 800025e:	6363      	str	r3, [r4, #52]	@ 0x34

     // PWM baÅlatma
     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <m_vurus_gonder+0x54>)
 8000262:	2104      	movs	r1, #4
 8000264:	0018      	movs	r0, r3
 8000266:	f002 f92f 	bl	80024c8 <HAL_TIM_PWM_Start>
  }
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b003      	add	sp, #12
 8000270:	bd90      	pop	{r4, r7, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	2000012c 	.word	0x2000012c

08000278 <stop_pwm_m>:

  // PWM durdurma fonksiyonu
 void stop_pwm_m() {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800027c:	4b03      	ldr	r3, [pc, #12]	@ (800028c <stop_pwm_m+0x14>)
 800027e:	2104      	movs	r1, #4
 8000280:	0018      	movs	r0, r3
 8000282:	f002 f9d9 	bl	8002638 <HAL_TIM_PWM_Stop>
  }
 8000286:	46c0      	nop			@ (mov r8, r8)
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000012c 	.word	0x2000012c

08000290 <start_uart_timer>:

 void start_uart_timer()
  {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  	htim6.Instance->CR1=0;
 8000294:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <start_uart_timer+0x34>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
  	htim6.Instance->SR=0;
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <start_uart_timer+0x34>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  	htim6.Instance->CNT=0;
 80002a4:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <start_uart_timer+0x34>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	@ 0x24
  	htim6.Instance->DIER=1;
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <start_uart_timer+0x34>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2201      	movs	r2, #1
 80002b2:	60da      	str	r2, [r3, #12]
  	htim6.Instance->CR1=1;
 80002b4:	4b03      	ldr	r3, [pc, #12]	@ (80002c4 <start_uart_timer+0x34>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2201      	movs	r2, #1
 80002ba:	601a      	str	r2, [r3, #0]

  }
 80002bc:	46c0      	nop			@ (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	20000174 	.word	0x20000174

080002c8 <start_int_timer>:

 void start_int_timer(TIM_HandleTypeDef *timer,int count)
 {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	 timer->Instance->CR1=0;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
	 timer->Instance->SR=0;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
	 timer->Instance->CNT=1;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2201      	movs	r2, #1
 80002e8:	625a      	str	r2, [r3, #36]	@ 0x24
	 timer->Instance->ARR=count;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	 timer->Instance->DIER=1;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2201      	movs	r2, #1
 80002f8:	60da      	str	r2, [r3, #12]
	 timer->Instance->CR1=1;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]

 }
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b002      	add	sp, #8
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <HAL_UART_RxCpltCallback>:


///////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a60      	ldr	r2, [pc, #384]	@ (800049c <HAL_UART_RxCpltCallback+0x190>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d000      	beq.n	8000320 <HAL_UART_RxCpltCallback+0x14>
 800031e:	e0b9      	b.n	8000494 <HAL_UART_RxCpltCallback+0x188>
  {
	  start_uart_timer();
 8000320:	f7ff ffb6 	bl	8000290 <start_uart_timer>
	  if(HeaderOrData)
 8000324:	4b5e      	ldr	r3, [pc, #376]	@ (80004a0 <HAL_UART_RxCpltCallback+0x194>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d068      	beq.n	80003fe <HAL_UART_RxCpltCallback+0xf2>
	  {
		  Mesaj_id=rx_Buffer[0]<<24 | rx_Buffer[1]<<16 | rx_Buffer[2]<<8 | rx_Buffer[3];
 800032c:	4b5d      	ldr	r3, [pc, #372]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	061a      	lsls	r2, r3, #24
 8000332:	4b5c      	ldr	r3, [pc, #368]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 8000334:	785b      	ldrb	r3, [r3, #1]
 8000336:	041b      	lsls	r3, r3, #16
 8000338:	431a      	orrs	r2, r3
 800033a:	4b5a      	ldr	r3, [pc, #360]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 800033c:	789b      	ldrb	r3, [r3, #2]
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	4313      	orrs	r3, r2
 8000342:	4a58      	ldr	r2, [pc, #352]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 8000344:	78d2      	ldrb	r2, [r2, #3]
 8000346:	4313      	orrs	r3, r2
 8000348:	001a      	movs	r2, r3
 800034a:	4b57      	ldr	r3, [pc, #348]	@ (80004a8 <HAL_UART_RxCpltCallback+0x19c>)
 800034c:	601a      	str	r2, [r3, #0]
		  Mesaj_boyu=rx_Buffer[4]<<24 | rx_Buffer[5]<<16 | rx_Buffer[6]<<8 | rx_Buffer[7];
 800034e:	4b55      	ldr	r3, [pc, #340]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 8000350:	791b      	ldrb	r3, [r3, #4]
 8000352:	061a      	lsls	r2, r3, #24
 8000354:	4b53      	ldr	r3, [pc, #332]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	041b      	lsls	r3, r3, #16
 800035a:	431a      	orrs	r2, r3
 800035c:	4b51      	ldr	r3, [pc, #324]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 800035e:	799b      	ldrb	r3, [r3, #6]
 8000360:	021b      	lsls	r3, r3, #8
 8000362:	4313      	orrs	r3, r2
 8000364:	4a4f      	ldr	r2, [pc, #316]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 8000366:	79d2      	ldrb	r2, [r2, #7]
 8000368:	4313      	orrs	r3, r2
 800036a:	001a      	movs	r2, r3
 800036c:	4b4f      	ldr	r3, [pc, #316]	@ (80004ac <HAL_UART_RxCpltCallback+0x1a0>)
 800036e:	601a      	str	r2, [r3, #0]

		  if(Mesaj_id==0x000000F1)
 8000370:	4b4d      	ldr	r3, [pc, #308]	@ (80004a8 <HAL_UART_RxCpltCallback+0x19c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2bf1      	cmp	r3, #241	@ 0xf1
 8000376:	d115      	bne.n	80003a4 <HAL_UART_RxCpltCallback+0x98>
		  {

			  HeaderOrData=0x01;
 8000378:	4b49      	ldr	r3, [pc, #292]	@ (80004a0 <HAL_UART_RxCpltCallback+0x194>)
 800037a:	2201      	movs	r2, #1
 800037c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(huart, Versiyon_Cevap, 8, 5000);
 800037e:	4b4c      	ldr	r3, [pc, #304]	@ (80004b0 <HAL_UART_RxCpltCallback+0x1a4>)
 8000380:	494c      	ldr	r1, [pc, #304]	@ (80004b4 <HAL_UART_RxCpltCallback+0x1a8>)
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	2208      	movs	r2, #8
 8000386:	f003 f937 	bl	80035f8 <HAL_UART_Transmit>
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 800038a:	2380      	movs	r3, #128	@ 0x80
 800038c:	011a      	lsls	r2, r3, #4
 800038e:	4b45      	ldr	r3, [pc, #276]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 8000390:	2100      	movs	r1, #0
 8000392:	0018      	movs	r0, r3
 8000394:	f004 fb44 	bl	8004a20 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,8);
 8000398:	4942      	ldr	r1, [pc, #264]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <HAL_UART_RxCpltCallback+0x1ac>)
 800039c:	2208      	movs	r2, #8
 800039e:	0018      	movs	r0, r3
 80003a0:	f003 f9c9 	bl	8003736 <HAL_UART_Receive_IT>

		  }
		  if(Mesaj_id==0x000000F3)
 80003a4:	4b40      	ldr	r3, [pc, #256]	@ (80004a8 <HAL_UART_RxCpltCallback+0x19c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2bf3      	cmp	r3, #243	@ 0xf3
 80003aa:	d113      	bne.n	80003d4 <HAL_UART_RxCpltCallback+0xc8>
		  {
			  HAL_TIM_Base_Start_IT(&htim6);
 80003ac:	4b43      	ldr	r3, [pc, #268]	@ (80004bc <HAL_UART_RxCpltCallback+0x1b0>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 ffb2 	bl	8002318 <HAL_TIM_Base_Start_IT>

			  //htim6.Instance->DIER=0;
			  HeaderOrData=0x00;
 80003b4:	4b3a      	ldr	r3, [pc, #232]	@ (80004a0 <HAL_UART_RxCpltCallback+0x194>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 80003ba:	2380      	movs	r3, #128	@ 0x80
 80003bc:	011a      	lsls	r2, r3, #4
 80003be:	4b39      	ldr	r3, [pc, #228]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 80003c0:	2100      	movs	r1, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f004 fb2c 	bl	8004a20 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,50); //50 1700 olacak.
 80003c8:	4936      	ldr	r1, [pc, #216]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 80003ca:	4b3b      	ldr	r3, [pc, #236]	@ (80004b8 <HAL_UART_RxCpltCallback+0x1ac>)
 80003cc:	2232      	movs	r2, #50	@ 0x32
 80003ce:	0018      	movs	r0, r3
 80003d0:	f003 f9b1 	bl	8003736 <HAL_UART_Receive_IT>
		  }
		  if(Mesaj_id==0x000000F5)
 80003d4:	4b34      	ldr	r3, [pc, #208]	@ (80004a8 <HAL_UART_RxCpltCallback+0x19c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2bf5      	cmp	r3, #245	@ 0xf5
 80003da:	d15b      	bne.n	8000494 <HAL_UART_RxCpltCallback+0x188>
		  {

			  //htim6.Instance->DIER=0;
			  HeaderOrData=0x00;
 80003dc:	4b30      	ldr	r3, [pc, #192]	@ (80004a0 <HAL_UART_RxCpltCallback+0x194>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 80003e2:	2380      	movs	r3, #128	@ 0x80
 80003e4:	011a      	lsls	r2, r3, #4
 80003e6:	4b2f      	ldr	r3, [pc, #188]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 80003e8:	2100      	movs	r1, #0
 80003ea:	0018      	movs	r0, r3
 80003ec:	f004 fb18 	bl	8004a20 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,2);
 80003f0:	492c      	ldr	r1, [pc, #176]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 80003f2:	4b31      	ldr	r3, [pc, #196]	@ (80004b8 <HAL_UART_RxCpltCallback+0x1ac>)
 80003f4:	2202      	movs	r2, #2
 80003f6:	0018      	movs	r0, r3
 80003f8:	f003 f99d 	bl	8003736 <HAL_UART_Receive_IT>
		  }
	  }
	 //HAL_UART_Receive_IT(&huart2,rx_Buffer, sizeof(rx_Buffer));
    // Veri alÄ±ndÄ±ÄÄ±nda yapÄ±lacak iÅlemler
  }
}
 80003fc:	e04a      	b.n	8000494 <HAL_UART_RxCpltCallback+0x188>
		  if(Mesaj_id==0x000000F3)
 80003fe:	4b2a      	ldr	r3, [pc, #168]	@ (80004a8 <HAL_UART_RxCpltCallback+0x19c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2bf3      	cmp	r3, #243	@ 0xf3
 8000404:	d11c      	bne.n	8000440 <HAL_UART_RxCpltCallback+0x134>
		    	HAL_TIM_Base_Stop_IT(&htim6);
 8000406:	4b2d      	ldr	r3, [pc, #180]	@ (80004bc <HAL_UART_RxCpltCallback+0x1b0>)
 8000408:	0018      	movs	r0, r3
 800040a:	f001 ffd7 	bl	80023bc <HAL_TIM_Base_Stop_IT>
			  HeaderOrData=0x01;
 800040e:	4b24      	ldr	r3, [pc, #144]	@ (80004a0 <HAL_UART_RxCpltCallback+0x194>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 8000414:	2380      	movs	r3, #128	@ 0x80
 8000416:	011a      	lsls	r2, r3, #4
 8000418:	4b22      	ldr	r3, [pc, #136]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 800041a:	2100      	movs	r1, #0
 800041c:	0018      	movs	r0, r3
 800041e:	f004 faff 	bl	8004a20 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,8); // tekrardan header bekliyor
 8000422:	4920      	ldr	r1, [pc, #128]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 8000424:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <HAL_UART_RxCpltCallback+0x1ac>)
 8000426:	2208      	movs	r2, #8
 8000428:	0018      	movs	r0, r3
 800042a:	f003 f984 	bl	8003736 <HAL_UART_Receive_IT>
			  OK_NOK_Cevap[3]=0xf4;
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <HAL_UART_RxCpltCallback+0x1b4>)
 8000430:	22f4      	movs	r2, #244	@ 0xf4
 8000432:	70da      	strb	r2, [r3, #3]
			  HAL_UART_Transmit(huart, OK_NOK_Cevap, 8, 5000);
 8000434:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <HAL_UART_RxCpltCallback+0x1a4>)
 8000436:	4922      	ldr	r1, [pc, #136]	@ (80004c0 <HAL_UART_RxCpltCallback+0x1b4>)
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	2208      	movs	r2, #8
 800043c:	f003 f8dc 	bl	80035f8 <HAL_UART_Transmit>
		  if(Mesaj_id==0x000000F5)
 8000440:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <HAL_UART_RxCpltCallback+0x19c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2bf5      	cmp	r3, #245	@ 0xf5
 8000446:	d125      	bne.n	8000494 <HAL_UART_RxCpltCallback+0x188>
		    	HAL_TIM_Base_Stop_IT(&htim6);
 8000448:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <HAL_UART_RxCpltCallback+0x1b0>)
 800044a:	0018      	movs	r0, r3
 800044c:	f001 ffb6 	bl	80023bc <HAL_TIM_Base_Stop_IT>
			  HeaderOrData=0x01;
 8000450:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <HAL_UART_RxCpltCallback+0x194>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
			  memset(rx_Buffer,0,sizeof(rx_Buffer));
 8000456:	2380      	movs	r3, #128	@ 0x80
 8000458:	011a      	lsls	r2, r3, #4
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 800045c:	2100      	movs	r1, #0
 800045e:	0018      	movs	r0, r3
 8000460:	f004 fade 	bl	8004a20 <memset>
			  HAL_UART_Receive_IT(&huart2,rx_Buffer,8); // tekrardan header bekliyor
 8000464:	490f      	ldr	r1, [pc, #60]	@ (80004a4 <HAL_UART_RxCpltCallback+0x198>)
 8000466:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <HAL_UART_RxCpltCallback+0x1ac>)
 8000468:	2208      	movs	r2, #8
 800046a:	0018      	movs	r0, r3
 800046c:	f003 f963 	bl	8003736 <HAL_UART_Receive_IT>
			  OK_NOK_Cevap[3]=0xf6;
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <HAL_UART_RxCpltCallback+0x1b4>)
 8000472:	22f6      	movs	r2, #246	@ 0xf6
 8000474:	70da      	strb	r2, [r3, #3]
			  HAL_UART_Transmit(huart, OK_NOK_Cevap, 8, 5000);
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <HAL_UART_RxCpltCallback+0x1a4>)
 8000478:	4911      	ldr	r1, [pc, #68]	@ (80004c0 <HAL_UART_RxCpltCallback+0x1b4>)
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	2208      	movs	r2, #8
 800047e:	f003 f8bb 	bl	80035f8 <HAL_UART_Transmit>
			  on_or_off_time=1;
 8000482:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <HAL_UART_RxCpltCallback+0x1b8>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
			  start_int_timer(&htim14, 5000);
 8000488:	4a09      	ldr	r2, [pc, #36]	@ (80004b0 <HAL_UART_RxCpltCallback+0x1a4>)
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_UART_RxCpltCallback+0x1bc>)
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f7ff ff1a 	bl	80002c8 <start_int_timer>
}
 8000494:	46c0      	nop			@ (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40004400 	.word	0x40004400
 80004a0:	20000000 	.word	0x20000000
 80004a4:	2000028c 	.word	0x2000028c
 80004a8:	20000a8c 	.word	0x20000a8c
 80004ac:	20000a90 	.word	0x20000a90
 80004b0:	00001388 	.word	0x00001388
 80004b4:	20000004 	.word	0x20000004
 80004b8:	20000204 	.word	0x20000204
 80004bc:	20000174 	.word	0x20000174
 80004c0:	2000000c 	.word	0x2000000c
 80004c4:	20000014 	.word	0x20000014
 80004c8:	200001bc 	.word	0x200001bc

080004cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)		// uart protection
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a4d      	ldr	r2, [pc, #308]	@ (8000610 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d119      	bne.n	8000512 <HAL_TIM_PeriodElapsedCallback+0x46>
    {
    	HAL_TIM_Base_Stop_IT(&htim6);
 80004de:	4b4d      	ldr	r3, [pc, #308]	@ (8000614 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 ff6b 	bl	80023bc <HAL_TIM_Base_Stop_IT>
    	HeaderOrData=0x01;
 80004e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000618 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	701a      	strb	r2, [r3, #0]
    	HAL_UART_DeInit(&huart2);
 80004ec:	4b4b      	ldr	r3, [pc, #300]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 f844 	bl	800357c <HAL_UART_DeInit>
    	MX_USART2_UART_Init();
 80004f4:	f000 fb86 	bl	8000c04 <MX_USART2_UART_Init>
    	memset(rx_Buffer,0,sizeof(rx_Buffer));
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	011a      	lsls	r2, r3, #4
 80004fc:	4b48      	ldr	r3, [pc, #288]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80004fe:	2100      	movs	r1, #0
 8000500:	0018      	movs	r0, r3
 8000502:	f004 fa8d 	bl	8004a20 <memset>
    	HAL_UART_Receive_IT(&huart2,rx_Buffer,8);
 8000506:	4946      	ldr	r1, [pc, #280]	@ (8000620 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000508:	4b44      	ldr	r3, [pc, #272]	@ (800061c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800050a:	2208      	movs	r2, #8
 800050c:	0018      	movs	r0, r3
 800050e:	f003 f912 	bl	8003736 <HAL_UART_Receive_IT>

    }
    if (htim->Instance == TIM14)		//veri aÃ§Ä±k kapalÄ± sÃ¼resini ayarlar
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a43      	ldr	r2, [pc, #268]	@ (8000624 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d155      	bne.n	80005c8 <HAL_TIM_PeriodElapsedCallback+0xfc>
    {
    	HAL_TIM_Base_Stop_IT(&htim14);
 800051c:	4b42      	ldr	r3, [pc, #264]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800051e:	0018      	movs	r0, r3
 8000520:	f001 ff4c 	bl	80023bc <HAL_TIM_Base_Stop_IT>
    	if(on_or_off_time==1)	//aÃ§Ä±k sÃ¼re sonrasÄ± giriyor
 8000524:	4b41      	ldr	r3, [pc, #260]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d119      	bne.n	8000560 <HAL_TIM_PeriodElapsedCallback+0x94>
    	{
        	///diÄer timerleri m timer kapat
    		stop_pwm_m();
 800052c:	f7ff fea4 	bl	8000278 <stop_pwm_m>
    		on_or_off_time=0;
 8000530:	4b3e      	ldr	r3, [pc, #248]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
    		start_int_timer(&htim14, Veri_Matrisi[Aktif_Indeks].V_Kapanis_Zaman*1000);
 8000536:	4b3e      	ldr	r3, [pc, #248]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4a3e      	ldr	r2, [pc, #248]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800053c:	011b      	lsls	r3, r3, #4
 800053e:	18d3      	adds	r3, r2, r3
 8000540:	330a      	adds	r3, #10
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	0013      	movs	r3, r2
 8000548:	015b      	lsls	r3, r3, #5
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	189b      	adds	r3, r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	001a      	movs	r2, r3
 8000554:	4b34      	ldr	r3, [pc, #208]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000556:	0011      	movs	r1, r2
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff feb5 	bl	80002c8 <start_int_timer>
 800055e:	e033      	b.n	80005c8 <HAL_TIM_PeriodElapsedCallback+0xfc>

    	}
    	else				//kapali sÃ¼re sonrasÄ± giriyor
    	{
    		//diÄer timerlara m deÄerlerini verip baÅlat
    		m_vurus_gonder(Veri_Matrisi[Aktif_Indeks].M_deger*100, Veri_Matrisi[Aktif_Indeks].M_deger*100/2);
 8000560:	4b33      	ldr	r3, [pc, #204]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4a33      	ldr	r2, [pc, #204]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000566:	011b      	lsls	r3, r3, #4
 8000568:	18d3      	adds	r3, r2, r3
 800056a:	3304      	adds	r3, #4
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2264      	movs	r2, #100	@ 0x64
 8000570:	435a      	muls	r2, r3
 8000572:	0010      	movs	r0, r2
 8000574:	4b2e      	ldr	r3, [pc, #184]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4a2e      	ldr	r2, [pc, #184]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	18d3      	adds	r3, r2, r3
 800057e:	3304      	adds	r3, #4
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2264      	movs	r2, #100	@ 0x64
 8000584:	4353      	muls	r3, r2
 8000586:	085b      	lsrs	r3, r3, #1
 8000588:	0019      	movs	r1, r3
 800058a:	f7ff fe49 	bl	8000220 <m_vurus_gonder>
    		/////
    		on_or_off_time=1;
 800058e:	4b27      	ldr	r3, [pc, #156]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
    		Aktif_Indeks++;
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800059e:	701a      	strb	r2, [r3, #0]
    		start_int_timer(&htim14, Veri_Matrisi[Aktif_Indeks].V_Acis_Zaman*1000);
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4a23      	ldr	r2, [pc, #140]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	18d3      	adds	r3, r2, r3
 80005aa:	3308      	adds	r3, #8
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	001a      	movs	r2, r3
 80005b0:	0013      	movs	r3, r2
 80005b2:	015b      	lsls	r3, r3, #5
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	189b      	adds	r3, r3, r2
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	001a      	movs	r2, r3
 80005be:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f7ff fe80 	bl	80002c8 <start_int_timer>
    	}

    }

    if (htim->Instance == TIM2)		// interrupt sonrasÄ± alfa kadar bekleyip triac pinini sÃ¼rer
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	2380      	movs	r3, #128	@ 0x80
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d118      	bne.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x13a>
    {
    	HAL_TIM_Base_Stop_IT(&htim2);
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f001 fef0 	bl	80023bc <HAL_TIM_Base_Stop_IT>
    	HAL_GPIO_WritePin(triac_output_GPIO_Port, triac_output_Pin, GPIO_PIN_SET);
 80005dc:	4b17      	ldr	r3, [pc, #92]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005de:	2201      	movs	r2, #1
 80005e0:	2104      	movs	r1, #4
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 f9b0 	bl	8001948 <HAL_GPIO_WritePin>
    	for(int i=0;i<5;i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e002      	b.n	80005f4 <HAL_TIM_PeriodElapsedCallback+0x128>
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	ddf9      	ble.n	80005ee <HAL_TIM_PeriodElapsedCallback+0x122>
    	{

    	}
    	HAL_GPIO_WritePin(triac_output_GPIO_Port, triac_output_Pin, GPIO_PIN_RESET);
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	2104      	movs	r1, #4
 8000600:	0018      	movs	r0, r3
 8000602:	f001 f9a1 	bl	8001948 <HAL_GPIO_WritePin>
    }



}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	40001000 	.word	0x40001000
 8000614:	20000174 	.word	0x20000174
 8000618:	20000000 	.word	0x20000000
 800061c:	20000204 	.word	0x20000204
 8000620:	2000028c 	.word	0x2000028c
 8000624:	40002000 	.word	0x40002000
 8000628:	200001bc 	.word	0x200001bc
 800062c:	20000014 	.word	0x20000014
 8000630:	200000e0 	.word	0x200000e0
 8000634:	20000040 	.word	0x20000040
 8000638:	200000e4 	.word	0x200000e4
 800063c:	48000800 	.word	0x48000800

08000640 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dbb      	adds	r3, r7, #6
 800064a:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_1)
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d110      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x36>
    {
    	EXTI->PR=EXTI_PR_PR1;
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <HAL_GPIO_EXTI_Callback+0x40>)
 8000656:	2202      	movs	r2, #2
 8000658:	615a      	str	r2, [r3, #20]
    	start_int_timer(&htim2, Veri_Matrisi[Aktif_Indeks].V_deger*100);
 800065a:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <HAL_GPIO_EXTI_Callback+0x44>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	001a      	movs	r2, r3
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x48>)
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	58d3      	ldr	r3, [r2, r3]
 8000666:	2264      	movs	r2, #100	@ 0x64
 8000668:	4353      	muls	r3, r2
 800066a:	001a      	movs	r2, r3
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <HAL_GPIO_EXTI_Callback+0x4c>)
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff fe29 	bl	80002c8 <start_int_timer>
        // PC burda alfa counterini aktif et ve o kadar sÃ¼re bekle. sonra alfa counterinden pulse ver.

    }
}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	40010400 	.word	0x40010400
 8000684:	200000e0 	.word	0x200000e0
 8000688:	20000040 	.word	0x20000040
 800068c:	200000e4 	.word	0x200000e4

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	memset(rx_Buffer,0,sizeof(rx_Buffer));
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	011a      	lsls	r2, r3, #4
 8000698:	4b66      	ldr	r3, [pc, #408]	@ (8000834 <main+0x1a4>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f004 f9bf 	bl	8004a20 <memset>
	////BRUAYI UARTTA KONFIG MESAJI Ä°LE AYARLAYACAKSIN.
	Veri_Matrisi[0].V_Acis_Zaman=5;
 80006a2:	4b65      	ldr	r3, [pc, #404]	@ (8000838 <main+0x1a8>)
 80006a4:	2205      	movs	r2, #5
 80006a6:	811a      	strh	r2, [r3, #8]
	Veri_Matrisi[0].V_Kapanis_Zaman=2;
 80006a8:	4b63      	ldr	r3, [pc, #396]	@ (8000838 <main+0x1a8>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	815a      	strh	r2, [r3, #10]
	Veri_Matrisi[0].M_deger=50;
 80006ae:	4b62      	ldr	r3, [pc, #392]	@ (8000838 <main+0x1a8>)
 80006b0:	2232      	movs	r2, #50	@ 0x32
 80006b2:	605a      	str	r2, [r3, #4]
	Veri_Matrisi[0].V_deger=50;
 80006b4:	4b60      	ldr	r3, [pc, #384]	@ (8000838 <main+0x1a8>)
 80006b6:	2232      	movs	r2, #50	@ 0x32
 80006b8:	601a      	str	r2, [r3, #0]
	Veri_Matrisi[0].Aktif_Kapali=0x01;
 80006ba:	4b5f      	ldr	r3, [pc, #380]	@ (8000838 <main+0x1a8>)
 80006bc:	2201      	movs	r2, #1
 80006be:	731a      	strb	r2, [r3, #12]

	Veri_Matrisi[1].V_Acis_Zaman=5;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	@ (8000838 <main+0x1a8>)
 80006c2:	2205      	movs	r2, #5
 80006c4:	831a      	strh	r2, [r3, #24]
	Veri_Matrisi[1].V_Kapanis_Zaman=2;
 80006c6:	4b5c      	ldr	r3, [pc, #368]	@ (8000838 <main+0x1a8>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	835a      	strh	r2, [r3, #26]
	Veri_Matrisi[1].M_deger=50;
 80006cc:	4b5a      	ldr	r3, [pc, #360]	@ (8000838 <main+0x1a8>)
 80006ce:	2232      	movs	r2, #50	@ 0x32
 80006d0:	615a      	str	r2, [r3, #20]
	Veri_Matrisi[1].V_deger=50;
 80006d2:	4b59      	ldr	r3, [pc, #356]	@ (8000838 <main+0x1a8>)
 80006d4:	2232      	movs	r2, #50	@ 0x32
 80006d6:	611a      	str	r2, [r3, #16]
	Veri_Matrisi[1].Aktif_Kapali=0x01;
 80006d8:	4b57      	ldr	r3, [pc, #348]	@ (8000838 <main+0x1a8>)
 80006da:	2201      	movs	r2, #1
 80006dc:	771a      	strb	r2, [r3, #28]

	Veri_Matrisi[2].V_Acis_Zaman=5;
 80006de:	4b56      	ldr	r3, [pc, #344]	@ (8000838 <main+0x1a8>)
 80006e0:	2205      	movs	r2, #5
 80006e2:	851a      	strh	r2, [r3, #40]	@ 0x28
	Veri_Matrisi[2].V_Kapanis_Zaman=2;
 80006e4:	4b54      	ldr	r3, [pc, #336]	@ (8000838 <main+0x1a8>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
	Veri_Matrisi[2].M_deger=50;
 80006ea:	4b53      	ldr	r3, [pc, #332]	@ (8000838 <main+0x1a8>)
 80006ec:	2232      	movs	r2, #50	@ 0x32
 80006ee:	625a      	str	r2, [r3, #36]	@ 0x24
	Veri_Matrisi[2].V_deger=50;
 80006f0:	4b51      	ldr	r3, [pc, #324]	@ (8000838 <main+0x1a8>)
 80006f2:	2232      	movs	r2, #50	@ 0x32
 80006f4:	621a      	str	r2, [r3, #32]
	Veri_Matrisi[2].Aktif_Kapali=0x01;
 80006f6:	4b50      	ldr	r3, [pc, #320]	@ (8000838 <main+0x1a8>)
 80006f8:	222c      	movs	r2, #44	@ 0x2c
 80006fa:	2101      	movs	r1, #1
 80006fc:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[3].V_Acis_Zaman=5;
 80006fe:	4b4e      	ldr	r3, [pc, #312]	@ (8000838 <main+0x1a8>)
 8000700:	2205      	movs	r2, #5
 8000702:	871a      	strh	r2, [r3, #56]	@ 0x38
	Veri_Matrisi[3].V_Kapanis_Zaman=2;
 8000704:	4b4c      	ldr	r3, [pc, #304]	@ (8000838 <main+0x1a8>)
 8000706:	2202      	movs	r2, #2
 8000708:	875a      	strh	r2, [r3, #58]	@ 0x3a
	Veri_Matrisi[3].M_deger=50;
 800070a:	4b4b      	ldr	r3, [pc, #300]	@ (8000838 <main+0x1a8>)
 800070c:	2232      	movs	r2, #50	@ 0x32
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
	Veri_Matrisi[3].V_deger=50;
 8000710:	4b49      	ldr	r3, [pc, #292]	@ (8000838 <main+0x1a8>)
 8000712:	2232      	movs	r2, #50	@ 0x32
 8000714:	631a      	str	r2, [r3, #48]	@ 0x30
	Veri_Matrisi[3].Aktif_Kapali=0x01;
 8000716:	4b48      	ldr	r3, [pc, #288]	@ (8000838 <main+0x1a8>)
 8000718:	223c      	movs	r2, #60	@ 0x3c
 800071a:	2101      	movs	r1, #1
 800071c:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[4].V_Acis_Zaman=5;
 800071e:	4b46      	ldr	r3, [pc, #280]	@ (8000838 <main+0x1a8>)
 8000720:	2248      	movs	r2, #72	@ 0x48
 8000722:	2105      	movs	r1, #5
 8000724:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[4].V_Kapanis_Zaman=2;
 8000726:	4b44      	ldr	r3, [pc, #272]	@ (8000838 <main+0x1a8>)
 8000728:	224a      	movs	r2, #74	@ 0x4a
 800072a:	2102      	movs	r1, #2
 800072c:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[4].M_deger=50;
 800072e:	4b42      	ldr	r3, [pc, #264]	@ (8000838 <main+0x1a8>)
 8000730:	2232      	movs	r2, #50	@ 0x32
 8000732:	645a      	str	r2, [r3, #68]	@ 0x44
	Veri_Matrisi[4].V_deger=50;
 8000734:	4b40      	ldr	r3, [pc, #256]	@ (8000838 <main+0x1a8>)
 8000736:	2232      	movs	r2, #50	@ 0x32
 8000738:	641a      	str	r2, [r3, #64]	@ 0x40
	Veri_Matrisi[4].Aktif_Kapali=0x01;
 800073a:	4b3f      	ldr	r3, [pc, #252]	@ (8000838 <main+0x1a8>)
 800073c:	224c      	movs	r2, #76	@ 0x4c
 800073e:	2101      	movs	r1, #1
 8000740:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[5].V_Acis_Zaman=5;
 8000742:	4b3d      	ldr	r3, [pc, #244]	@ (8000838 <main+0x1a8>)
 8000744:	2258      	movs	r2, #88	@ 0x58
 8000746:	2105      	movs	r1, #5
 8000748:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[5].V_Kapanis_Zaman=5;
 800074a:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <main+0x1a8>)
 800074c:	225a      	movs	r2, #90	@ 0x5a
 800074e:	2105      	movs	r1, #5
 8000750:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[5].M_deger=50;
 8000752:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <main+0x1a8>)
 8000754:	2232      	movs	r2, #50	@ 0x32
 8000756:	655a      	str	r2, [r3, #84]	@ 0x54
	Veri_Matrisi[5].V_deger=50;
 8000758:	4b37      	ldr	r3, [pc, #220]	@ (8000838 <main+0x1a8>)
 800075a:	2232      	movs	r2, #50	@ 0x32
 800075c:	651a      	str	r2, [r3, #80]	@ 0x50
	Veri_Matrisi[5].Aktif_Kapali=0x01;
 800075e:	4b36      	ldr	r3, [pc, #216]	@ (8000838 <main+0x1a8>)
 8000760:	225c      	movs	r2, #92	@ 0x5c
 8000762:	2101      	movs	r1, #1
 8000764:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[6].V_Acis_Zaman=5;
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <main+0x1a8>)
 8000768:	2268      	movs	r2, #104	@ 0x68
 800076a:	2105      	movs	r1, #5
 800076c:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[6].V_Kapanis_Zaman=5;
 800076e:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <main+0x1a8>)
 8000770:	226a      	movs	r2, #106	@ 0x6a
 8000772:	2105      	movs	r1, #5
 8000774:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[6].M_deger=50;
 8000776:	4b30      	ldr	r3, [pc, #192]	@ (8000838 <main+0x1a8>)
 8000778:	2232      	movs	r2, #50	@ 0x32
 800077a:	665a      	str	r2, [r3, #100]	@ 0x64
	Veri_Matrisi[6].V_deger=50;
 800077c:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <main+0x1a8>)
 800077e:	2232      	movs	r2, #50	@ 0x32
 8000780:	661a      	str	r2, [r3, #96]	@ 0x60
	Veri_Matrisi[6].Aktif_Kapali=0x01;
 8000782:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <main+0x1a8>)
 8000784:	226c      	movs	r2, #108	@ 0x6c
 8000786:	2101      	movs	r1, #1
 8000788:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[7].V_Acis_Zaman=5;
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <main+0x1a8>)
 800078c:	2278      	movs	r2, #120	@ 0x78
 800078e:	2105      	movs	r1, #5
 8000790:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[7].V_Kapanis_Zaman=5;
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <main+0x1a8>)
 8000794:	227a      	movs	r2, #122	@ 0x7a
 8000796:	2105      	movs	r1, #5
 8000798:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[7].M_deger=50;
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <main+0x1a8>)
 800079c:	2232      	movs	r2, #50	@ 0x32
 800079e:	675a      	str	r2, [r3, #116]	@ 0x74
	Veri_Matrisi[7].V_deger=50;
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <main+0x1a8>)
 80007a2:	2232      	movs	r2, #50	@ 0x32
 80007a4:	671a      	str	r2, [r3, #112]	@ 0x70
	Veri_Matrisi[7].Aktif_Kapali=0x01;
 80007a6:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <main+0x1a8>)
 80007a8:	227c      	movs	r2, #124	@ 0x7c
 80007aa:	2101      	movs	r1, #1
 80007ac:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[8].V_Acis_Zaman=5;
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <main+0x1a8>)
 80007b0:	2288      	movs	r2, #136	@ 0x88
 80007b2:	2105      	movs	r1, #5
 80007b4:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[8].V_Kapanis_Zaman=5;
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <main+0x1a8>)
 80007b8:	228a      	movs	r2, #138	@ 0x8a
 80007ba:	2105      	movs	r1, #5
 80007bc:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[8].M_deger=50;
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <main+0x1a8>)
 80007c0:	2284      	movs	r2, #132	@ 0x84
 80007c2:	2132      	movs	r1, #50	@ 0x32
 80007c4:	5099      	str	r1, [r3, r2]
	Veri_Matrisi[8].V_deger=50;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <main+0x1a8>)
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	2132      	movs	r1, #50	@ 0x32
 80007cc:	5099      	str	r1, [r3, r2]
	Veri_Matrisi[8].Aktif_Kapali=0x01;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <main+0x1a8>)
 80007d0:	228c      	movs	r2, #140	@ 0x8c
 80007d2:	2101      	movs	r1, #1
 80007d4:	5499      	strb	r1, [r3, r2]

	Veri_Matrisi[9].V_Acis_Zaman=5;
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <main+0x1a8>)
 80007d8:	2298      	movs	r2, #152	@ 0x98
 80007da:	2105      	movs	r1, #5
 80007dc:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[9].V_Kapanis_Zaman=5;
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <main+0x1a8>)
 80007e0:	229a      	movs	r2, #154	@ 0x9a
 80007e2:	2105      	movs	r1, #5
 80007e4:	5299      	strh	r1, [r3, r2]
	Veri_Matrisi[9].M_deger=50;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <main+0x1a8>)
 80007e8:	2294      	movs	r2, #148	@ 0x94
 80007ea:	2132      	movs	r1, #50	@ 0x32
 80007ec:	5099      	str	r1, [r3, r2]
	Veri_Matrisi[9].V_deger=50;
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <main+0x1a8>)
 80007f0:	2290      	movs	r2, #144	@ 0x90
 80007f2:	2132      	movs	r1, #50	@ 0x32
 80007f4:	5099      	str	r1, [r3, r2]
	Veri_Matrisi[9].Aktif_Kapali=0x01;
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <main+0x1a8>)
 80007f8:	229c      	movs	r2, #156	@ 0x9c
 80007fa:	2101      	movs	r1, #1
 80007fc:	5499      	strb	r1, [r3, r2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fc71 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f81d 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 fa2d 	bl	8000c64 <MX_GPIO_Init>
  MX_TIM3_Init();
 800080a:	f000 f8e5 	bl	80009d8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800080e:	f000 f9f9 	bl	8000c04 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000812:	f000 f99f 	bl	8000b54 <MX_TIM14_Init>
  MX_TIM6_Init();
 8000816:	f000 f961 	bl	8000adc <MX_TIM6_Init>
  MX_TIM2_Init();
 800081a:	f000 f859 	bl	80008d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,rx_Buffer,8);
 800081e:	4905      	ldr	r1, [pc, #20]	@ (8000834 <main+0x1a4>)
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <main+0x1ac>)
 8000822:	2208      	movs	r2, #8
 8000824:	0018      	movs	r0, r3
 8000826:	f002 ff86 	bl	8003736 <HAL_UART_Receive_IT>
  start_uart_timer();
 800082a:	f7ff fd31 	bl	8000290 <start_uart_timer>
	//HAL_UART_Receive_IT(&huart2,rx_Buffer, sizeof(rx_Buffer));
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	e7fd      	b.n	800082e <main+0x19e>
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	2000028c 	.word	0x2000028c
 8000838:	20000040 	.word	0x20000040
 800083c:	20000204 	.word	0x20000204

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b091      	sub	sp, #68	@ 0x44
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	2410      	movs	r4, #16
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0018      	movs	r0, r3
 800084c:	2330      	movs	r3, #48	@ 0x30
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f004 f8e5 	bl	8004a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000856:	003b      	movs	r3, r7
 8000858:	0018      	movs	r0, r3
 800085a:	2310      	movs	r3, #16
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f004 f8de 	bl	8004a20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	0021      	movs	r1, r4
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2280      	movs	r2, #128	@ 0x80
 800087c:	0252      	lsls	r2, r2, #9
 800087e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2280      	movs	r2, #128	@ 0x80
 8000884:	0352      	lsls	r2, r2, #13
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	187b      	adds	r3, r7, r1
 8000890:	0018      	movs	r0, r3
 8000892:	f001 f893 	bl	80019bc <HAL_RCC_OscConfig>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800089a:	f000 fa51 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	003b      	movs	r3, r7
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2202      	movs	r2, #2
 80008a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	003b      	movs	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b0:	003b      	movs	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b6:	003b      	movs	r3, r7
 80008b8:	2101      	movs	r1, #1
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 fb98 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008c4:	f000 fa3c 	bl	8000d40 <Error_Handler>
  }
}
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b011      	add	sp, #68	@ 0x44
 80008ce:	bd90      	pop	{r4, r7, pc}

080008d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	@ 0x38
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	2328      	movs	r3, #40	@ 0x28
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	0018      	movs	r0, r3
 80008dc:	2310      	movs	r3, #16
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f004 f89d 	bl	8004a20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e6:	2320      	movs	r3, #32
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	0018      	movs	r0, r3
 80008ec:	2308      	movs	r3, #8
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f004 f895 	bl	8004a20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	0018      	movs	r0, r3
 80008fa:	231c      	movs	r3, #28
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f004 f88e 	bl	8004a20 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000904:	4b32      	ldr	r3, [pc, #200]	@ (80009d0 <MX_TIM2_Init+0x100>)
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	05d2      	lsls	r2, r2, #23
 800090a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 800090c:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <MX_TIM2_Init+0x100>)
 800090e:	222f      	movs	r2, #47	@ 0x2f
 8000910:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <MX_TIM2_Init+0x100>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500;
 8000918:	4b2d      	ldr	r3, [pc, #180]	@ (80009d0 <MX_TIM2_Init+0x100>)
 800091a:	4a2e      	ldr	r2, [pc, #184]	@ (80009d4 <MX_TIM2_Init+0x104>)
 800091c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <MX_TIM2_Init+0x100>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <MX_TIM2_Init+0x100>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092a:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <MX_TIM2_Init+0x100>)
 800092c:	0018      	movs	r0, r3
 800092e:	f001 fca3 	bl	8002278 <HAL_TIM_Base_Init>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 fa03 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093a:	2128      	movs	r1, #40	@ 0x28
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	0152      	lsls	r2, r2, #5
 8000942:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000944:	187a      	adds	r2, r7, r1
 8000946:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_TIM2_Init+0x100>)
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f002 f926 	bl	8002b9c <HAL_TIM_ConfigClockSource>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000954:	f000 f9f4 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_TIM2_Init+0x100>)
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fd5c 	bl	8002418 <HAL_TIM_PWM_Init>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000964:	f000 f9ec 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_TIM2_Init+0x100>)
 800096a:	2108      	movs	r1, #8
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fedf 	bl	8002730 <HAL_TIM_OnePulse_Init>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000976:	f000 f9e3 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2120      	movs	r1, #32
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000988:	187a      	adds	r2, r7, r1
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_TIM2_Init+0x100>)
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fd32 	bl	80033f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000998:	f000 f9d2 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2260      	movs	r2, #96	@ 0x60
 80009a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	1d39      	adds	r1, r7, #4
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_TIM2_Init+0x100>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 f828 	bl	8002a10 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80009c4:	f000 f9bc 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b00e      	add	sp, #56	@ 0x38
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000e4 	.word	0x200000e4
 80009d4:	000009c4 	.word	0x000009c4

080009d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	@ 0x38
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	2328      	movs	r3, #40	@ 0x28
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	2310      	movs	r3, #16
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f004 f819 	bl	8004a20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	2320      	movs	r3, #32
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	0018      	movs	r0, r3
 80009f4:	2308      	movs	r3, #8
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f004 f811 	bl	8004a20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	0018      	movs	r0, r3
 8000a02:	231c      	movs	r3, #28
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f004 f80a 	bl	8004a20 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a0e:	4a30      	ldr	r2, [pc, #192]	@ (8000ad0 <MX_TIM3_Init+0xf8>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000a12:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a14:	222f      	movs	r2, #47	@ 0x2f
 8000a16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b2c      	ldr	r3, [pc, #176]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a20:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad4 <MX_TIM3_Init+0xfc>)
 8000a22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a30:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 fc20 	bl	8002278 <HAL_TIM_Base_Init>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a3c:	f000 f980 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a40:	2128      	movs	r1, #40	@ 0x28
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	0152      	lsls	r2, r2, #5
 8000a48:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4a:	187a      	adds	r2, r7, r1
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f002 f8a3 	bl	8002b9c <HAL_TIM_ConfigClockSource>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a5a:	f000 f971 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 fcd9 	bl	8002418 <HAL_TIM_PWM_Init>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a6a:	f000 f969 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6e:	2120      	movs	r1, #32
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7c:	187a      	adds	r2, r7, r1
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fcb8 	bl	80033f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000a8c:	f000 f958 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2260      	movs	r2, #96	@ 0x60
 8000a94:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1250;
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad8 <MX_TIM3_Init+0x100>)
 8000a9a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 ffae 	bl	8002a10 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000ab8:	f000 f942 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000abc:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <MX_TIM3_Init+0xf4>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f9da 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b00e      	add	sp, #56	@ 0x38
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000012c 	.word	0x2000012c
 8000ad0:	40000400 	.word	0x40000400
 8000ad4:	000009c4 	.word	0x000009c4
 8000ad8:	000004e2 	.word	0x000004e2

08000adc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f003 ff98 	bl	8004a20 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_TIM6_Init+0x6c>)
 8000af2:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <MX_TIM6_Init+0x70>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_TIM6_Init+0x6c>)
 8000af8:	222f      	movs	r2, #47	@ 0x2f
 8000afa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_TIM6_Init+0x6c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_TIM6_Init+0x6c>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_TIM6_Init+0x74>)
 8000b06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_TIM6_Init+0x6c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_TIM6_Init+0x6c>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 fbb1 	bl	8002278 <HAL_TIM_Base_Init>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b1a:	f000 f911 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	003b      	movs	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	003b      	movs	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b2a:	003a      	movs	r2, r7
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_TIM6_Init+0x6c>)
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f002 fc61 	bl	80033f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b3a:	f000 f901 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	20000174 	.word	0x20000174
 8000b4c:	40001000 	.word	0x40001000
 8000b50:	00001388 	.word	0x00001388

08000b54 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	231c      	movs	r3, #28
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f003 ff5c 	bl	8004a20 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b68:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000b6a:	4a23      	ldr	r2, [pc, #140]	@ (8000bf8 <MX_TIM14_Init+0xa4>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47999;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000b70:	4a22      	ldr	r2, [pc, #136]	@ (8000bfc <MX_TIM14_Init+0xa8>)
 8000b72:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000b7c:	4a20      	ldr	r2, [pc, #128]	@ (8000c00 <MX_TIM14_Init+0xac>)
 8000b7e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 fb72 	bl	8002278 <HAL_TIM_Base_Init>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000b98:	f000 f8d2 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fc3a 	bl	8002418 <HAL_TIM_PWM_Init>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f8ca 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim14, TIM_OPMODE_SINGLE) != HAL_OK)
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000bae:	2108      	movs	r1, #8
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 fdbd 	bl	8002730 <HAL_TIM_OnePulse_Init>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM14_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f000 f8c1 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2260      	movs	r2, #96	@ 0x60
 8000bc2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd6:	1d39      	adds	r1, r7, #4
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_TIM14_Init+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 ff17 	bl	8002a10 <HAL_TIM_PWM_ConfigChannel>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM14_Init+0x96>
  {
    Error_Handler();
 8000be6:	f000 f8ab 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b008      	add	sp, #32
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	200001bc 	.word	0x200001bc
 8000bf8:	40002000 	.word	0x40002000
 8000bfc:	0000bb7f 	.word	0x0000bb7f
 8000c00:	00001388 	.word	0x00001388

08000c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	@ (8000c60 <MX_USART2_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c10:	2296      	movs	r2, #150	@ 0x96
 8000c12:	0192      	lsls	r2, r2, #6
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 fc43 	bl	80034d4 <HAL_UART_Init>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 f875 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000204 	.word	0x20000204
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	240c      	movs	r4, #12
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	0018      	movs	r0, r3
 8000c70:	2314      	movs	r3, #20
 8000c72:	001a      	movs	r2, r3
 8000c74:	2100      	movs	r1, #0
 8000c76:	f003 fed3 	bl	8004a20 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000c80:	2180      	movs	r1, #128	@ 0x80
 8000c82:	03c9      	lsls	r1, r1, #15
 8000c84:	430a      	orrs	r2, r1
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	4b2b      	ldr	r3, [pc, #172]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	03db      	lsls	r3, r3, #15
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000c9c:	2180      	movs	r1, #128	@ 0x80
 8000c9e:	0309      	lsls	r1, r1, #12
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	2380      	movs	r3, #128	@ 0x80
 8000caa:	031b      	lsls	r3, r3, #12
 8000cac:	4013      	ands	r3, r2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000cb8:	2180      	movs	r1, #128	@ 0x80
 8000cba:	0289      	lsls	r1, r1, #10
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <MX_GPIO_Init+0xd4>)
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	029b      	lsls	r3, r3, #10
 8000cc8:	4013      	ands	r3, r2
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(triac_output_GPIO_Port, triac_output_Pin, GPIO_PIN_RESET);
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_GPIO_Init+0xd8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fe37 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : zero_cros_detector_Pin */
  GPIO_InitStruct.Pin = zero_cros_detector_Pin;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2202      	movs	r2, #2
 8000cde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2288      	movs	r2, #136	@ 0x88
 8000ce4:	0352      	lsls	r2, r2, #13
 8000ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2202      	movs	r2, #2
 8000cec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(zero_cros_detector_GPIO_Port, &GPIO_InitStruct);
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <MX_GPIO_Init+0xd8>)
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	f000 fbe7 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : triac_output_Pin */
  GPIO_InitStruct.Pin = triac_output_Pin;
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2204      	movs	r2, #4
 8000d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2201      	movs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2203      	movs	r2, #3
 8000d12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(triac_output_GPIO_Port, &GPIO_InitStruct);
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <MX_GPIO_Init+0xd8>)
 8000d18:	0019      	movs	r1, r3
 8000d1a:	0010      	movs	r0, r2
 8000d1c:	f000 fbd4 	bl	80014c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2005      	movs	r0, #5
 8000d26:	f000 fb0f 	bl	8001348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000d2a:	2005      	movs	r0, #5
 8000d2c:	f000 fb21 	bl	8001372 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b009      	add	sp, #36	@ 0x24
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000800 	.word	0x48000800

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	619a      	str	r2, [r3, #24]
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	69da      	ldr	r2, [r3, #28]
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d70:	2180      	movs	r1, #128	@ 0x80
 8000d72:	0549      	lsls	r1, r1, #21
 8000d74:	430a      	orrs	r2, r1
 8000d76:	61da      	str	r2, [r3, #28]
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_MspInit+0x44>)
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	2380      	movs	r3, #128	@ 0x80
 8000d7e:	055b      	lsls	r3, r3, #21
 8000d80:	4013      	ands	r3, r2
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d114      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000daa:	69da      	ldr	r2, [r3, #28]
 8000dac:	4b2e      	ldr	r3, [pc, #184]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	430a      	orrs	r2, r1
 8000db2:	61da      	str	r2, [r3, #28]
 8000db4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	2201      	movs	r2, #1
 8000dba:	4013      	ands	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f000 fabf 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f000 fad1 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000dd0:	e046      	b.n	8000e60 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a25      	ldr	r2, [pc, #148]	@ (8000e6c <HAL_TIM_Base_MspInit+0xd8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d10c      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ddc:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000de2:	2102      	movs	r1, #2
 8000de4:	430a      	orrs	r2, r1
 8000de6:	61da      	str	r2, [r3, #28]
 8000de8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	2202      	movs	r2, #2
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
}
 8000df4:	e034      	b.n	8000e60 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM6)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000e70 <HAL_TIM_Base_MspInit+0xdc>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d114      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e00:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000e02:	69da      	ldr	r2, [r3, #28]
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000e06:	2110      	movs	r1, #16
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	61da      	str	r2, [r3, #28]
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	2210      	movs	r2, #16
 8000e12:	4013      	ands	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2011      	movs	r0, #17
 8000e1e:	f000 fa93 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e22:	2011      	movs	r0, #17
 8000e24:	f000 faa5 	bl	8001372 <HAL_NVIC_EnableIRQ>
}
 8000e28:	e01a      	b.n	8000e60 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM14)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a11      	ldr	r2, [pc, #68]	@ (8000e74 <HAL_TIM_Base_MspInit+0xe0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d115      	bne.n	8000e60 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000e3a:	2180      	movs	r1, #128	@ 0x80
 8000e3c:	0049      	lsls	r1, r1, #1
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	61da      	str	r2, [r3, #28]
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <HAL_TIM_Base_MspInit+0xd4>)
 8000e44:	69da      	ldr	r2, [r3, #28]
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2013      	movs	r0, #19
 8000e56:	f000 fa77 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000e5a:	2013      	movs	r0, #19
 8000e5c:	f000 fa89 	bl	8001372 <HAL_NVIC_EnableIRQ>
}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b006      	add	sp, #24
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40000400 	.word	0x40000400
 8000e70:	40001000 	.word	0x40001000
 8000e74:	40002000 	.word	0x40002000

08000e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	240c      	movs	r4, #12
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	0018      	movs	r0, r3
 8000e86:	2314      	movs	r3, #20
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f003 fdc8 	bl	8004a20 <memset>
  if(htim->Instance==TIM3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a15      	ldr	r2, [pc, #84]	@ (8000eec <HAL_TIM_MspPostInit+0x74>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d124      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_TIM_MspPostInit+0x78>)
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_TIM_MspPostInit+0x78>)
 8000ea0:	2180      	movs	r1, #128	@ 0x80
 8000ea2:	0289      	lsls	r1, r1, #10
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	615a      	str	r2, [r3, #20]
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_TIM_MspPostInit+0x78>)
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	2380      	movs	r3, #128	@ 0x80
 8000eae:	029b      	lsls	r3, r3, #10
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eb6:	0021      	movs	r1, r4
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	187a      	adds	r2, r7, r1
 8000ed8:	2390      	movs	r3, #144	@ 0x90
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 faf2 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b009      	add	sp, #36	@ 0x24
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	40000400 	.word	0x40000400
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b08b      	sub	sp, #44	@ 0x2c
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	2414      	movs	r4, #20
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	2314      	movs	r3, #20
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f003 fd8a 	bl	8004a20 <memset>
  if(huart->Instance==USART2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a20      	ldr	r2, [pc, #128]	@ (8000f94 <HAL_UART_MspInit+0xa0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d13a      	bne.n	8000f8c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <HAL_UART_MspInit+0xa4>)
 8000f18:	69da      	ldr	r2, [r3, #28]
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <HAL_UART_MspInit+0xa4>)
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	0289      	lsls	r1, r1, #10
 8000f20:	430a      	orrs	r2, r1
 8000f22:	61da      	str	r2, [r3, #28]
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <HAL_UART_MspInit+0xa4>)
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	2380      	movs	r3, #128	@ 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <HAL_UART_MspInit+0xa4>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <HAL_UART_MspInit+0xa4>)
 8000f38:	2180      	movs	r1, #128	@ 0x80
 8000f3a:	0289      	lsls	r1, r1, #10
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <HAL_UART_MspInit+0xa4>)
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	2380      	movs	r3, #128	@ 0x80
 8000f46:	029b      	lsls	r3, r3, #10
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f4e:	0021      	movs	r1, r4
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2202      	movs	r2, #2
 8000f5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2203      	movs	r2, #3
 8000f66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	187a      	adds	r2, r7, r1
 8000f70:	2390      	movs	r3, #144	@ 0x90
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 faa6 	bl	80014c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	201c      	movs	r0, #28
 8000f82:	f000 f9e1 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f86:	201c      	movs	r0, #28
 8000f88:	f000 f9f3 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b00b      	add	sp, #44	@ 0x2c
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_UART_MspDeInit+0x38>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10e      	bne.n	8000fcc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_UART_MspDeInit+0x3c>)
 8000fb0:	69da      	ldr	r2, [r3, #28]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <HAL_UART_MspDeInit+0x3c>)
 8000fb4:	4909      	ldr	r1, [pc, #36]	@ (8000fdc <HAL_UART_MspDeInit+0x40>)
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	61da      	str	r2, [r3, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000fba:	2390      	movs	r3, #144	@ 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	210c      	movs	r1, #12
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 fbf1 	bl	80017a8 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000fc6:	201c      	movs	r0, #28
 8000fc8:	f000 f9e3 	bl	8001392 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	fffdffff 	.word	0xfffdffff

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001008:	f000 f8b4 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(zero_cros_detector_Pin);
 8001016:	2002      	movs	r0, #2
 8001018:	f000 fcb4 	bl	8001984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <TIM2_IRQHandler+0x14>)
 800102a:	0018      	movs	r0, r3
 800102c:	f001 fbd9 	bl	80027e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	200000e4 	.word	0x200000e4

0800103c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <TIM6_DAC_IRQHandler+0x14>)
 8001042:	0018      	movs	r0, r3
 8001044:	f001 fbcd 	bl	80027e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	20000174 	.word	0x20000174

08001054 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <TIM14_IRQHandler+0x14>)
 800105a:	0018      	movs	r0, r3
 800105c:	f001 fbc1 	bl	80027e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001060:	46c0      	nop			@ (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	200001bc 	.word	0x200001bc

0800106c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <USART2_IRQHandler+0x14>)
 8001072:	0018      	movs	r0, r3
 8001074:	f002 fbb6 	bl	80037e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	20000204 	.word	0x20000204

08001084 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001092:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001094:	f7ff fff6 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LoopForever+0x6>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	@ (80010d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <LoopForever+0xe>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	@ (80010dc <LoopForever+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010be:	f003 fcb7 	bl	8004a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c2:	f7ff fae5 	bl	8000690 <main>

080010c6 <LoopForever>:

LoopForever:
    b LoopForever
 80010c6:	e7fe      	b.n	80010c6 <LoopForever>
  ldr   r0, =_estack
 80010c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010d4:	08004ad0 	.word	0x08004ad0
  ldr r2, =_sbss
 80010d8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010dc:	20000a98 	.word	0x20000a98

080010e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_COMP_IRQHandler>
	...

080010e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <HAL_Init+0x24>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_Init+0x24>)
 80010ee:	2110      	movs	r1, #16
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 f809 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fa:	f7ff fe27 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <HAL_InitTick+0x5c>)
 8001116:	681c      	ldr	r4, [r3, #0]
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_InitTick+0x60>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	0019      	movs	r1, r3
 800111e:	23fa      	movs	r3, #250	@ 0xfa
 8001120:	0098      	lsls	r0, r3, #2
 8001122:	f7fe fff1 	bl	8000108 <__udivsi3>
 8001126:	0003      	movs	r3, r0
 8001128:	0019      	movs	r1, r3
 800112a:	0020      	movs	r0, r4
 800112c:	f7fe ffec 	bl	8000108 <__udivsi3>
 8001130:	0003      	movs	r3, r0
 8001132:	0018      	movs	r0, r3
 8001134:	f000 f93d 	bl	80013b2 <HAL_SYSTICK_Config>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e00f      	b.n	8001160 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d80b      	bhi.n	800115e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2301      	movs	r3, #1
 800114a:	425b      	negs	r3, r3
 800114c:	2200      	movs	r2, #0
 800114e:	0018      	movs	r0, r3
 8001150:	f000 f8fa 	bl	8001348 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_InitTick+0x64>)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b003      	add	sp, #12
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	20000018 	.word	0x20000018
 800116c:	20000020 	.word	0x20000020
 8001170:	2000001c 	.word	0x2000001c

08001174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_IncTick+0x1c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_IncTick+0x20>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	18d2      	adds	r2, r2, r3
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_IncTick+0x20>)
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	20000020 	.word	0x20000020
 8001194:	20000a94 	.word	0x20000a94

08001198 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b02      	ldr	r3, [pc, #8]	@ (80011a8 <HAL_GetTick+0x10>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	20000a94 	.word	0x20000a94

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	0002      	movs	r2, r0
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80011be:	d809      	bhi.n	80011d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	001a      	movs	r2, r3
 80011c6:	231f      	movs	r3, #31
 80011c8:	401a      	ands	r2, r3
 80011ca:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_EnableIRQ+0x30>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	4091      	lsls	r1, r2
 80011d0:	000a      	movs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
  }
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0002      	movs	r2, r0
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80011f2:	d810      	bhi.n	8001216 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	001a      	movs	r2, r3
 80011fa:	231f      	movs	r3, #31
 80011fc:	4013      	ands	r3, r2
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_DisableIRQ+0x40>)
 8001200:	2201      	movs	r2, #1
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	2280      	movs	r2, #128	@ 0x80
 8001208:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	0002      	movs	r2, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b7f      	cmp	r3, #127	@ 0x7f
 8001238:	d828      	bhi.n	800128c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123a:	4a2f      	ldr	r2, [pc, #188]	@ (80012f8 <__NVIC_SetPriority+0xd4>)
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	33c0      	adds	r3, #192	@ 0xc0
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	589b      	ldr	r3, [r3, r2]
 800124a:	1dfa      	adds	r2, r7, #7
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	0011      	movs	r1, r2
 8001250:	2203      	movs	r2, #3
 8001252:	400a      	ands	r2, r1
 8001254:	00d2      	lsls	r2, r2, #3
 8001256:	21ff      	movs	r1, #255	@ 0xff
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	43d2      	mvns	r2, r2
 800125e:	401a      	ands	r2, r3
 8001260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	22ff      	movs	r2, #255	@ 0xff
 8001268:	401a      	ands	r2, r3
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	0018      	movs	r0, r3
 8001270:	2303      	movs	r3, #3
 8001272:	4003      	ands	r3, r0
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	481f      	ldr	r0, [pc, #124]	@ (80012f8 <__NVIC_SetPriority+0xd4>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b25b      	sxtb	r3, r3
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	430a      	orrs	r2, r1
 8001284:	33c0      	adds	r3, #192	@ 0xc0
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800128a:	e031      	b.n	80012f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128c:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <__NVIC_SetPriority+0xd8>)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	0019      	movs	r1, r3
 8001294:	230f      	movs	r3, #15
 8001296:	400b      	ands	r3, r1
 8001298:	3b08      	subs	r3, #8
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3306      	adds	r3, #6
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	3304      	adds	r3, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1dfa      	adds	r2, r7, #7
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	0011      	movs	r1, r2
 80012ac:	2203      	movs	r2, #3
 80012ae:	400a      	ands	r2, r1
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	21ff      	movs	r1, #255	@ 0xff
 80012b4:	4091      	lsls	r1, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	401a      	ands	r2, r3
 80012bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	22ff      	movs	r2, #255	@ 0xff
 80012c4:	401a      	ands	r2, r3
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	0018      	movs	r0, r3
 80012cc:	2303      	movs	r3, #3
 80012ce:	4003      	ands	r3, r0
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d4:	4809      	ldr	r0, [pc, #36]	@ (80012fc <__NVIC_SetPriority+0xd8>)
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	001c      	movs	r4, r3
 80012dc:	230f      	movs	r3, #15
 80012de:	4023      	ands	r3, r4
 80012e0:	3b08      	subs	r3, #8
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	430a      	orrs	r2, r1
 80012e6:	3306      	adds	r3, #6
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	18c3      	adds	r3, r0, r3
 80012ec:	3304      	adds	r3, #4
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b003      	add	sp, #12
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	045b      	lsls	r3, r3, #17
 8001310:	429a      	cmp	r2, r3
 8001312:	d301      	bcc.n	8001318 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001314:	2301      	movs	r3, #1
 8001316:	e010      	b.n	800133a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <SysTick_Config+0x44>)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	3a01      	subs	r2, #1
 800131e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001320:	2301      	movs	r3, #1
 8001322:	425b      	negs	r3, r3
 8001324:	2103      	movs	r1, #3
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff ff7c 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <SysTick_Config+0x44>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <SysTick_Config+0x44>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	210f      	movs	r1, #15
 8001354:	187b      	adds	r3, r7, r1
 8001356:	1c02      	adds	r2, r0, #0
 8001358:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	187b      	adds	r3, r7, r1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	0011      	movs	r1, r2
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	0002      	movs	r2, r0
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ff11 	bl	80011ac <__NVIC_EnableIRQ>
}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	0002      	movs	r2, r0
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ff1b 	bl	80011e0 <__NVIC_DisableIRQ>
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b002      	add	sp, #8
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff ff9f 	bl	8001300 <SysTick_Config>
 80013c2:	0003      	movs	r3, r0
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2221      	movs	r2, #33	@ 0x21
 80013d8:	5c9b      	ldrb	r3, [r3, r2]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d008      	beq.n	80013f2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2204      	movs	r2, #4
 80013e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2220      	movs	r2, #32
 80013ea:	2100      	movs	r1, #0
 80013ec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e020      	b.n	8001434 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	210e      	movs	r1, #14
 80013fe:	438a      	bics	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	438a      	bics	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800141a:	2101      	movs	r1, #1
 800141c:	4091      	lsls	r1, r2
 800141e:	000a      	movs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2221      	movs	r2, #33	@ 0x21
 8001426:	2101      	movs	r1, #1
 8001428:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2220      	movs	r2, #32
 800142e:	2100      	movs	r1, #0
 8001430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001444:	210f      	movs	r1, #15
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2221      	movs	r2, #33	@ 0x21
 8001450:	5c9b      	ldrb	r3, [r3, r2]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d006      	beq.n	8001466 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2204      	movs	r2, #4
 800145c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	e028      	b.n	80014b8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	210e      	movs	r1, #14
 8001472:	438a      	bics	r2, r1
 8001474:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	438a      	bics	r2, r1
 8001484:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800148e:	2101      	movs	r1, #1
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2221      	movs	r2, #33	@ 0x21
 800149a:	2101      	movs	r1, #1
 800149c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2220      	movs	r2, #32
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	0010      	movs	r0, r2
 80014b6:	4798      	blx	r3
    }
  }
  return status;
 80014b8:	230f      	movs	r3, #15
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	781b      	ldrb	r3, [r3, #0]
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b004      	add	sp, #16
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	e14f      	b.n	8001778 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4091      	lsls	r1, r2
 80014e2:	000a      	movs	r2, r1
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d100      	bne.n	80014f0 <HAL_GPIO_Init+0x28>
 80014ee:	e140      	b.n	8001772 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d005      	beq.n	8001508 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001504:	2b02      	cmp	r3, #2
 8001506:	d130      	bne.n	800156a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	409a      	lsls	r2, r3
 8001516:	0013      	movs	r3, r2
 8001518:	43da      	mvns	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	409a      	lsls	r2, r3
 800152a:	0013      	movs	r3, r2
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153e:	2201      	movs	r2, #1
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	43da      	mvns	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	2201      	movs	r2, #1
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	4013      	ands	r3, r2
 8001572:	2b03      	cmp	r3, #3
 8001574:	d017      	beq.n	80015a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	43da      	mvns	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2203      	movs	r2, #3
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d123      	bne.n	80015fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	58d3      	ldr	r3, [r2, r3]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2207      	movs	r2, #7
 80015c4:	4013      	ands	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2107      	movs	r1, #7
 80015de:	400b      	ands	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	6939      	ldr	r1, [r7, #16]
 80015f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	43da      	mvns	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	401a      	ands	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	23c0      	movs	r3, #192	@ 0xc0
 8001634:	029b      	lsls	r3, r3, #10
 8001636:	4013      	ands	r3, r2
 8001638:	d100      	bne.n	800163c <HAL_GPIO_Init+0x174>
 800163a:	e09a      	b.n	8001772 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163c:	4b54      	ldr	r3, [pc, #336]	@ (8001790 <HAL_GPIO_Init+0x2c8>)
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	4b53      	ldr	r3, [pc, #332]	@ (8001790 <HAL_GPIO_Init+0x2c8>)
 8001642:	2101      	movs	r1, #1
 8001644:	430a      	orrs	r2, r1
 8001646:	619a      	str	r2, [r3, #24]
 8001648:	4b51      	ldr	r3, [pc, #324]	@ (8001790 <HAL_GPIO_Init+0x2c8>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001654:	4a4f      	ldr	r2, [pc, #316]	@ (8001794 <HAL_GPIO_Init+0x2cc>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	589b      	ldr	r3, [r3, r2]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2203      	movs	r2, #3
 8001666:	4013      	ands	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	409a      	lsls	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	43da      	mvns	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	2390      	movs	r3, #144	@ 0x90
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	429a      	cmp	r2, r3
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0x1e2>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a44      	ldr	r2, [pc, #272]	@ (8001798 <HAL_GPIO_Init+0x2d0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00d      	beq.n	80016a6 <HAL_GPIO_Init+0x1de>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a43      	ldr	r2, [pc, #268]	@ (800179c <HAL_GPIO_Init+0x2d4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d007      	beq.n	80016a2 <HAL_GPIO_Init+0x1da>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a42      	ldr	r2, [pc, #264]	@ (80017a0 <HAL_GPIO_Init+0x2d8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_GPIO_Init+0x1d6>
 800169a:	2303      	movs	r3, #3
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x1e4>
 800169e:	2305      	movs	r3, #5
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x1e4>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x1e4>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x1e4>
 80016aa:	2300      	movs	r3, #0
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	2103      	movs	r1, #3
 80016b0:	400a      	ands	r2, r1
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	@ (8001794 <HAL_GPIO_Init+0x2cc>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b36      	ldr	r3, [pc, #216]	@ (80017a4 <HAL_GPIO_Init+0x2dc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	035b      	lsls	r3, r3, #13
 80016e2:	4013      	ands	r3, r2
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <HAL_GPIO_Init+0x2dc>)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	@ (80017a4 <HAL_GPIO_Init+0x2dc>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43da      	mvns	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	039b      	lsls	r3, r3, #14
 800170c:	4013      	ands	r3, r2
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001718:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <HAL_GPIO_Init+0x2dc>)
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800171e:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <HAL_GPIO_Init+0x2dc>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	029b      	lsls	r3, r3, #10
 8001736:	4013      	ands	r3, r2
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <HAL_GPIO_Init+0x2dc>)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_GPIO_Init+0x2dc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43da      	mvns	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	025b      	lsls	r3, r3, #9
 8001760:	4013      	ands	r3, r2
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_GPIO_Init+0x2dc>)
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	40da      	lsrs	r2, r3
 8001780:	1e13      	subs	r3, r2, #0
 8001782:	d000      	beq.n	8001786 <HAL_GPIO_Init+0x2be>
 8001784:	e6a8      	b.n	80014d8 <HAL_GPIO_Init+0x10>
  } 
}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b006      	add	sp, #24
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	48000400 	.word	0x48000400
 800179c:	48000800 	.word	0x48000800
 80017a0:	48000c00 	.word	0x48000c00
 80017a4:	40010400 	.word	0x40010400

080017a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017b6:	e0b1      	b.n	800191c <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017b8:	2201      	movs	r2, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	409a      	lsls	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d100      	bne.n	80017cc <HAL_GPIO_DeInit+0x24>
 80017ca:	e0a4      	b.n	8001916 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80017cc:	4a59      	ldr	r2, [pc, #356]	@ (8001934 <HAL_GPIO_DeInit+0x18c>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	589b      	ldr	r3, [r3, r2]
 80017d8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2203      	movs	r2, #3
 80017de:	4013      	ands	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	409a      	lsls	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	2390      	movs	r3, #144	@ 0x90
 80017f0:	05db      	lsls	r3, r3, #23
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_DeInit+0x76>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001938 <HAL_GPIO_DeInit+0x190>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_DeInit+0x72>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	@ (800193c <HAL_GPIO_DeInit+0x194>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_DeInit+0x6e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4d      	ldr	r2, [pc, #308]	@ (8001940 <HAL_GPIO_DeInit+0x198>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_DeInit+0x6a>
 800180e:	2303      	movs	r3, #3
 8001810:	e006      	b.n	8001820 <HAL_GPIO_DeInit+0x78>
 8001812:	2305      	movs	r3, #5
 8001814:	e004      	b.n	8001820 <HAL_GPIO_DeInit+0x78>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_DeInit+0x78>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_DeInit+0x78>
 800181e:	2300      	movs	r3, #0
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	2103      	movs	r1, #3
 8001824:	400a      	ands	r2, r1
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	429a      	cmp	r2, r3
 800182e:	d132      	bne.n	8001896 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001830:	4b44      	ldr	r3, [pc, #272]	@ (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43d9      	mvns	r1, r3
 8001838:	4b42      	ldr	r3, [pc, #264]	@ (8001944 <HAL_GPIO_DeInit+0x19c>)
 800183a:	400a      	ands	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800183e:	4b41      	ldr	r3, [pc, #260]	@ (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43d9      	mvns	r1, r3
 8001846:	4b3f      	ldr	r3, [pc, #252]	@ (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001848:	400a      	ands	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800184c:	4b3d      	ldr	r3, [pc, #244]	@ (8001944 <HAL_GPIO_DeInit+0x19c>)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43d9      	mvns	r1, r3
 8001854:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001856:	400a      	ands	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800185a:	4b3a      	ldr	r3, [pc, #232]	@ (8001944 <HAL_GPIO_DeInit+0x19c>)
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43d9      	mvns	r1, r3
 8001862:	4b38      	ldr	r3, [pc, #224]	@ (8001944 <HAL_GPIO_DeInit+0x19c>)
 8001864:	400a      	ands	r2, r1
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2203      	movs	r2, #3
 800186c:	4013      	ands	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001878:	4a2e      	ldr	r2, [pc, #184]	@ (8001934 <HAL_GPIO_DeInit+0x18c>)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	589a      	ldr	r2, [r3, r2]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43d9      	mvns	r1, r3
 8001888:	482a      	ldr	r0, [pc, #168]	@ (8001934 <HAL_GPIO_DeInit+0x18c>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	400a      	ands	r2, r1
 8001890:	3302      	adds	r3, #2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	0052      	lsls	r2, r2, #1
 800189e:	2103      	movs	r1, #3
 80018a0:	4091      	lsls	r1, r2
 80018a2:	000a      	movs	r2, r1
 80018a4:	43d2      	mvns	r2, r2
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	2107      	movs	r1, #7
 80018bc:	400a      	ands	r2, r1
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	210f      	movs	r1, #15
 80018c2:	4091      	lsls	r1, r2
 80018c4:	000a      	movs	r2, r1
 80018c6:	43d1      	mvns	r1, r2
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	08d2      	lsrs	r2, r2, #3
 80018cc:	4019      	ands	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	0052      	lsls	r2, r2, #1
 80018de:	2103      	movs	r1, #3
 80018e0:	4091      	lsls	r1, r2
 80018e2:	000a      	movs	r2, r1
 80018e4:	43d2      	mvns	r2, r2
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2101      	movs	r1, #1
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	43d2      	mvns	r2, r2
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	0052      	lsls	r2, r2, #1
 8001908:	2103      	movs	r1, #3
 800190a:	4091      	lsls	r1, r2
 800190c:	000a      	movs	r2, r1
 800190e:	43d2      	mvns	r2, r2
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]

    }

    position++;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	40da      	lsrs	r2, r3
 8001922:	1e13      	subs	r3, r2, #0
 8001924:	d000      	beq.n	8001928 <HAL_GPIO_DeInit+0x180>
 8001926:	e747      	b.n	80017b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b006      	add	sp, #24
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	40010000 	.word	0x40010000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800
 8001940:	48000c00 	.word	0x48000c00
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	0008      	movs	r0, r1
 8001952:	0011      	movs	r1, r2
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	1c02      	adds	r2, r0, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	1c7b      	adds	r3, r7, #1
 800195c:	1c0a      	adds	r2, r1, #0
 800195e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	1c7b      	adds	r3, r7, #1
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001968:	1cbb      	adds	r3, r7, #2
 800196a:	881a      	ldrh	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	1cbb      	adds	r3, r7, #2
 8001974:	881a      	ldrh	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	0002      	movs	r2, r0
 800198c:	1dbb      	adds	r3, r7, #6
 800198e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	1dba      	adds	r2, r7, #6
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	4013      	ands	r3, r2
 800199a:	d008      	beq.n	80019ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800199e:	1dba      	adds	r2, r7, #6
 80019a0:	8812      	ldrh	r2, [r2, #0]
 80019a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a4:	1dbb      	adds	r3, r7, #6
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7fe fe49 	bl	8000640 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e301      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x1e>
 80019d8:	e08d      	b.n	8001af6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019da:	4bc3      	ldr	r3, [pc, #780]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	220c      	movs	r2, #12
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d00e      	beq.n	8001a04 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e6:	4bc0      	ldr	r3, [pc, #768]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	220c      	movs	r2, #12
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x64>
 80019f2:	4bbd      	ldr	r3, [pc, #756]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	025b      	lsls	r3, r3, #9
 80019fa:	401a      	ands	r2, r3
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	025b      	lsls	r3, r3, #9
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	4bb8      	ldr	r3, [pc, #736]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	029b      	lsls	r3, r3, #10
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_OscConfig+0x56>
 8001a10:	e070      	b.n	8001af4 <HAL_RCC_OscConfig+0x138>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d000      	beq.n	8001a1c <HAL_RCC_OscConfig+0x60>
 8001a1a:	e06b      	b.n	8001af4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e2d8      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_OscConfig+0x7c>
 8001a28:	4baf      	ldr	r3, [pc, #700]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4bae      	ldr	r3, [pc, #696]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	2180      	movs	r1, #128	@ 0x80
 8001a30:	0249      	lsls	r1, r1, #9
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e02f      	b.n	8001a98 <HAL_RCC_OscConfig+0xdc>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_OscConfig+0x9e>
 8001a40:	4ba9      	ldr	r3, [pc, #676]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4ba8      	ldr	r3, [pc, #672]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	49a9      	ldr	r1, [pc, #676]	@ (8001cec <HAL_RCC_OscConfig+0x330>)
 8001a48:	400a      	ands	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4ba6      	ldr	r3, [pc, #664]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4ba5      	ldr	r3, [pc, #660]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	49a7      	ldr	r1, [pc, #668]	@ (8001cf0 <HAL_RCC_OscConfig+0x334>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e01e      	b.n	8001a98 <HAL_RCC_OscConfig+0xdc>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d10e      	bne.n	8001a80 <HAL_RCC_OscConfig+0xc4>
 8001a62:	4ba1      	ldr	r3, [pc, #644]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4ba0      	ldr	r3, [pc, #640]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	2180      	movs	r1, #128	@ 0x80
 8001a6a:	02c9      	lsls	r1, r1, #11
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	4b9d      	ldr	r3, [pc, #628]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	2180      	movs	r1, #128	@ 0x80
 8001a78:	0249      	lsls	r1, r1, #9
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xdc>
 8001a80:	4b99      	ldr	r3, [pc, #612]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b98      	ldr	r3, [pc, #608]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	4999      	ldr	r1, [pc, #612]	@ (8001cec <HAL_RCC_OscConfig+0x330>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4b96      	ldr	r3, [pc, #600]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b95      	ldr	r3, [pc, #596]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	4997      	ldr	r1, [pc, #604]	@ (8001cf0 <HAL_RCC_OscConfig+0x334>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d014      	beq.n	8001aca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fb7a 	bl	8001198 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fb75 	bl	8001198 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	@ 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e28a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abc:	4b8a      	ldr	r3, [pc, #552]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	@ 0x80
 8001ac2:	029b      	lsls	r3, r3, #10
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0xee>
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb65 	bl	8001198 <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fb60 	bl	8001198 <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	@ 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e275      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b80      	ldr	r3, [pc, #512]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	029b      	lsls	r3, r3, #10
 8001aee:	4013      	ands	r3, r2
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x118>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2202      	movs	r2, #2
 8001afc:	4013      	ands	r3, r2
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_OscConfig+0x146>
 8001b00:	e069      	b.n	8001bd6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b02:	4b79      	ldr	r3, [pc, #484]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	220c      	movs	r2, #12
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d00b      	beq.n	8001b24 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b0c:	4b76      	ldr	r3, [pc, #472]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	220c      	movs	r2, #12
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d11c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x196>
 8001b18:	4b73      	ldr	r3, [pc, #460]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	025b      	lsls	r3, r3, #9
 8001b20:	4013      	ands	r3, r2
 8001b22:	d116      	bne.n	8001b52 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b24:	4b70      	ldr	r3, [pc, #448]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e24b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	22f8      	movs	r2, #248	@ 0xf8
 8001b40:	4393      	bics	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	00da      	lsls	r2, r3, #3
 8001b4a:	4b67      	ldr	r3, [pc, #412]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b50:	e041      	b.n	8001bd6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d024      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5a:	4b63      	ldr	r3, [pc, #396]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b62      	ldr	r3, [pc, #392]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b60:	2101      	movs	r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fb17 	bl	8001198 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff fb12 	bl	8001198 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e227      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b59      	ldr	r3, [pc, #356]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f1      	beq.n	8001b70 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b56      	ldr	r3, [pc, #344]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	22f8      	movs	r2, #248	@ 0xf8
 8001b92:	4393      	bics	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00da      	lsls	r2, r3, #3
 8001b9c:	4b52      	ldr	r3, [pc, #328]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e018      	b.n	8001bd6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba4:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	438a      	bics	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff faf2 	bl	8001198 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff faed 	bl	8001198 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e202      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bcc:	4b46      	ldr	r3, [pc, #280]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d1f1      	bne.n	8001bba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2208      	movs	r2, #8
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d036      	beq.n	8001c4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d019      	beq.n	8001c1c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fad0 	bl	8001198 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff facb 	bl	8001198 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1e0      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c10:	4b35      	ldr	r3, [pc, #212]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d0f1      	beq.n	8001bfe <HAL_RCC_OscConfig+0x242>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c20:	4b31      	ldr	r3, [pc, #196]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	438a      	bics	r2, r1
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7ff fab6 	bl	8001198 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff fab1 	bl	8001198 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1c6      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d1f1      	bne.n	8001c32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2204      	movs	r2, #4
 8001c54:	4013      	ands	r3, r2
 8001c56:	d100      	bne.n	8001c5a <HAL_RCC_OscConfig+0x29e>
 8001c58:	e0b4      	b.n	8001dc4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	201f      	movs	r0, #31
 8001c5c:	183b      	adds	r3, r7, r0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	055b      	lsls	r3, r3, #21
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d110      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	0549      	lsls	r1, r1, #21
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	61da      	str	r2, [r3, #28]
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	055b      	lsls	r3, r3, #21
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_RCC_OscConfig+0x338>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	@ 0x80
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d11a      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	2180      	movs	r1, #128	@ 0x80
 8001ca4:	0049      	lsls	r1, r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fa75 	bl	8001198 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb4:	f7ff fa70 	bl	8001198 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	@ 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e185      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x33c>
 8001cda:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	6a1a      	ldr	r2, [r3, #32]
 8001cde:	4b02      	ldr	r3, [pc, #8]	@ (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	621a      	str	r2, [r3, #32]
 8001ce6:	e035      	b.n	8001d54 <HAL_RCC_OscConfig+0x398>
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	fffeffff 	.word	0xfffeffff
 8001cf0:	fffbffff 	.word	0xfffbffff
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x35e>
 8001d00:	4bb6      	ldr	r3, [pc, #728]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d02:	6a1a      	ldr	r2, [r3, #32]
 8001d04:	4bb5      	ldr	r3, [pc, #724]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	438a      	bics	r2, r1
 8001d0a:	621a      	str	r2, [r3, #32]
 8001d0c:	4bb3      	ldr	r3, [pc, #716]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	4bb2      	ldr	r3, [pc, #712]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d12:	2104      	movs	r1, #4
 8001d14:	438a      	bics	r2, r1
 8001d16:	621a      	str	r2, [r3, #32]
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x398>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x380>
 8001d22:	4bae      	ldr	r3, [pc, #696]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d24:	6a1a      	ldr	r2, [r3, #32]
 8001d26:	4bad      	ldr	r3, [pc, #692]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d28:	2104      	movs	r1, #4
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	621a      	str	r2, [r3, #32]
 8001d2e:	4bab      	ldr	r3, [pc, #684]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	4baa      	ldr	r3, [pc, #680]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	621a      	str	r2, [r3, #32]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x398>
 8001d3c:	4ba7      	ldr	r3, [pc, #668]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	4ba6      	ldr	r3, [pc, #664]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	438a      	bics	r2, r1
 8001d46:	621a      	str	r2, [r3, #32]
 8001d48:	4ba4      	ldr	r3, [pc, #656]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	4ba3      	ldr	r3, [pc, #652]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d4e:	2104      	movs	r1, #4
 8001d50:	438a      	bics	r2, r1
 8001d52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d014      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fa1c 	bl	8001198 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff fa17 	bl	8001198 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4a9b      	ldr	r2, [pc, #620]	@ (8001fe0 <HAL_RCC_OscConfig+0x624>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e12b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	4b98      	ldr	r3, [pc, #608]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3aa>
 8001d84:	e013      	b.n	8001dae <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fa07 	bl	8001198 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8e:	e009      	b.n	8001da4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff fa02 	bl	8001198 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4a91      	ldr	r2, [pc, #580]	@ (8001fe0 <HAL_RCC_OscConfig+0x624>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e116      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	4b8d      	ldr	r3, [pc, #564]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dae:	231f      	movs	r3, #31
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b88      	ldr	r3, [pc, #544]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	4b87      	ldr	r3, [pc, #540]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001dbe:	4989      	ldr	r1, [pc, #548]	@ (8001fe4 <HAL_RCC_OscConfig+0x628>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d063      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d12a      	bne.n	8001e2c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dd6:	4b81      	ldr	r3, [pc, #516]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dda:	4b80      	ldr	r3, [pc, #512]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001ddc:	2104      	movs	r1, #4
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001de2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001de6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f9d3 	bl	8001198 <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001df8:	f7ff f9ce 	bl	8001198 <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0e3      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e0a:	4b74      	ldr	r3, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e0e:	2202      	movs	r2, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	d0f1      	beq.n	8001df8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e14:	4b71      	ldr	r3, [pc, #452]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e18:	22f8      	movs	r2, #248	@ 0xf8
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	00da      	lsls	r2, r3, #3
 8001e24:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e2a:	e034      	b.n	8001e96 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	3305      	adds	r3, #5
 8001e32:	d111      	bne.n	8001e58 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e34:	4b69      	ldr	r3, [pc, #420]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e38:	4b68      	ldr	r3, [pc, #416]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e40:	4b66      	ldr	r3, [pc, #408]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e44:	22f8      	movs	r2, #248	@ 0xf8
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	00da      	lsls	r2, r3, #3
 8001e50:	4b62      	ldr	r3, [pc, #392]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e56:	e01e      	b.n	8001e96 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e58:	4b60      	ldr	r3, [pc, #384]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e5c:	4b5f      	ldr	r3, [pc, #380]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e5e:	2104      	movs	r1, #4
 8001e60:	430a      	orrs	r2, r1
 8001e62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e64:	4b5d      	ldr	r3, [pc, #372]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e68:	4b5c      	ldr	r3, [pc, #368]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff f992 	bl	8001198 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e7a:	f7ff f98d 	bl	8001198 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0a2      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e8c:	4b53      	ldr	r3, [pc, #332]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e90:	2202      	movs	r2, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	d1f1      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d100      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4e4>
 8001e9e:	e097      	b.n	8001fd0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d100      	bne.n	8001eae <HAL_RCC_OscConfig+0x4f2>
 8001eac:	e06b      	b.n	8001f86 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d14c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b49      	ldr	r3, [pc, #292]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b48      	ldr	r3, [pc, #288]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001ebc:	494a      	ldr	r1, [pc, #296]	@ (8001fe8 <HAL_RCC_OscConfig+0x62c>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f969 	bl	8001198 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f964 	bl	8001198 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e079      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	4b3f      	ldr	r3, [pc, #252]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	049b      	lsls	r3, r3, #18
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eea:	4b3c      	ldr	r3, [pc, #240]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	220f      	movs	r2, #15
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef8:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001efe:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a3a      	ldr	r2, [pc, #232]	@ (8001fec <HAL_RCC_OscConfig+0x630>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	431a      	orrs	r2, r3
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f1e:	2180      	movs	r1, #128	@ 0x80
 8001f20:	0449      	lsls	r1, r1, #17
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff f937 	bl	8001198 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff f932 	bl	8001198 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e047      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f42:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	049b      	lsls	r3, r3, #18
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x574>
 8001f4e:	e03f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f56:	4924      	ldr	r1, [pc, #144]	@ (8001fe8 <HAL_RCC_OscConfig+0x62c>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f91c 	bl	8001198 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f917 	bl	8001198 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e02c      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	049b      	lsls	r3, r3, #18
 8001f80:	4013      	ands	r3, r2
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x5aa>
 8001f84:	e024      	b.n	8001fd0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e01f      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f98:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d10e      	bne.n	8001fcc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	23f0      	movs	r3, #240	@ 0xf0
 8001fc0:	039b      	lsls	r3, r3, #14
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b008      	add	sp, #32
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	efffffff 	.word	0xefffffff
 8001fe8:	feffffff 	.word	0xfeffffff
 8001fec:	ffc2ffff 	.word	0xffc2ffff

08001ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b3      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b5b      	ldr	r3, [pc, #364]	@ (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d911      	bls.n	8002036 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b58      	ldr	r3, [pc, #352]	@ (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4b55      	ldr	r3, [pc, #340]	@ (8002174 <HAL_RCC_ClockConfig+0x184>)
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e09a      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d015      	beq.n	800206c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2204      	movs	r2, #4
 8002046:	4013      	ands	r3, r2
 8002048:	d006      	beq.n	8002058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800204a:	4b4b      	ldr	r3, [pc, #300]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4b4a      	ldr	r3, [pc, #296]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002050:	21e0      	movs	r1, #224	@ 0xe0
 8002052:	00c9      	lsls	r1, r1, #3
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b47      	ldr	r3, [pc, #284]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	22f0      	movs	r2, #240	@ 0xf0
 800205e:	4393      	bics	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	4b44      	ldr	r3, [pc, #272]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	029b      	lsls	r3, r3, #10
 8002086:	4013      	ands	r3, r2
 8002088:	d114      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06e      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	049b      	lsls	r3, r3, #18
 800209e:	4013      	ands	r3, r2
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e062      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e05b      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b4:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2203      	movs	r2, #3
 80020ba:	4393      	bics	r3, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7ff f866 	bl	8001198 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d0:	e009      	b.n	80020e6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7ff f861 	bl	8001198 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	4a27      	ldr	r2, [pc, #156]	@ (800217c <HAL_RCC_ClockConfig+0x18c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e042      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	220c      	movs	r2, #12
 80020ec:	401a      	ands	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1ec      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <HAL_RCC_ClockConfig+0x184>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d211      	bcs.n	800212a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	4393      	bics	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002118:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <HAL_RCC_ClockConfig+0x184>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e020      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2204      	movs	r2, #4
 8002130:	4013      	ands	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <HAL_RCC_ClockConfig+0x190>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002148:	f000 f820 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214c:	0001      	movs	r1, r0
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	220f      	movs	r2, #15
 8002156:	4013      	ands	r3, r2
 8002158:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_RCC_ClockConfig+0x194>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	000a      	movs	r2, r1
 800215e:	40da      	lsrs	r2, r3
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_ClockConfig+0x198>)
 8002162:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002164:	2000      	movs	r0, #0
 8002166:	f7fe ffd1 	bl	800110c <HAL_InitTick>
  
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40022000 	.word	0x40022000
 8002178:	40021000 	.word	0x40021000
 800217c:	00001388 	.word	0x00001388
 8002180:	fffff8ff 	.word	0xfffff8ff
 8002184:	08004a90 	.word	0x08004a90
 8002188:	20000018 	.word	0x20000018

0800218c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021a6:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	220c      	movs	r2, #12
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x30>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ba:	e02c      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	e02c      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	220f      	movs	r2, #15
 80021c8:	4013      	ands	r3, r2
 80021ca:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021d0:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	220f      	movs	r2, #15
 80021d6:	4013      	ands	r3, r2
 80021d8:	4a16      	ldr	r2, [pc, #88]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xa8>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	4013      	ands	r3, r2
 80021e6:	d009      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	4810      	ldr	r0, [pc, #64]	@ (800222c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ec:	f7fd ff8c 	bl	8000108 <__udivsi3>
 80021f0:	0003      	movs	r3, r0
 80021f2:	001a      	movs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4353      	muls	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e009      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	000a      	movs	r2, r1
 8002200:	0152      	lsls	r2, r2, #5
 8002202:	1a52      	subs	r2, r2, r1
 8002204:	0193      	lsls	r3, r2, #6
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	185b      	adds	r3, r3, r1
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
      break;
 8002214:	e002      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002218:	613b      	str	r3, [r7, #16]
      break;
 800221a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800221c:	693b      	ldr	r3, [r7, #16]
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b006      	add	sp, #24
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	40021000 	.word	0x40021000
 800222c:	007a1200 	.word	0x007a1200
 8002230:	08004aa8 	.word	0x08004aa8
 8002234:	08004ab8 	.word	0x08004ab8

08002238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b02      	ldr	r3, [pc, #8]	@ (8002248 <HAL_RCC_GetHCLKFreq+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	20000018 	.word	0x20000018

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002250:	f7ff fff2 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002254:	0001      	movs	r1, r0
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	2207      	movs	r2, #7
 800225e:	4013      	ands	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	40d9      	lsrs	r1, r3
 8002266:	000b      	movs	r3, r1
}    
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	40021000 	.word	0x40021000
 8002274:	08004aa0 	.word	0x08004aa0

08002278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e042      	b.n	8002310 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223d      	movs	r2, #61	@ 0x3d
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223c      	movs	r2, #60	@ 0x3c
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7fe fd77 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	@ 0x3d
 80022aa:	2102      	movs	r1, #2
 80022ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f000 fd63 	bl	8002d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2246      	movs	r2, #70	@ 0x46
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223e      	movs	r2, #62	@ 0x3e
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223f      	movs	r2, #63	@ 0x3f
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2240      	movs	r2, #64	@ 0x40
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	@ 0x41
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2242      	movs	r2, #66	@ 0x42
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2243      	movs	r2, #67	@ 0x43
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2244      	movs	r2, #68	@ 0x44
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2245      	movs	r2, #69	@ 0x45
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223d      	movs	r2, #61	@ 0x3d
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	223d      	movs	r2, #61	@ 0x3d
 8002324:	5c9b      	ldrb	r3, [r3, r2]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d001      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e03b      	b.n	80023a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	223d      	movs	r2, #61	@ 0x3d
 8002334:	2102      	movs	r1, #2
 8002336:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a18      	ldr	r2, [pc, #96]	@ (80023b0 <HAL_TIM_Base_Start_IT+0x98>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00f      	beq.n	8002372 <HAL_TIM_Base_Start_IT+0x5a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	05db      	lsls	r3, r3, #23
 800235a:	429a      	cmp	r2, r3
 800235c:	d009      	beq.n	8002372 <HAL_TIM_Base_Start_IT+0x5a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_TIM_Base_Start_IT+0x5a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a12      	ldr	r2, [pc, #72]	@ (80023b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d111      	bne.n	8002396 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2207      	movs	r2, #7
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b06      	cmp	r3, #6
 8002382:	d010      	beq.n	80023a6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2101      	movs	r1, #1
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002394:	e007      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b004      	add	sp, #16
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40014000 	.word	0x40014000

080023bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	438a      	bics	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <HAL_TIM_Base_Stop_IT+0x54>)
 80023dc:	4013      	ands	r3, r2
 80023de:	d10d      	bne.n	80023fc <HAL_TIM_Base_Stop_IT+0x40>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <HAL_TIM_Base_Stop_IT+0x58>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_Base_Stop_IT+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	438a      	bics	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	223d      	movs	r2, #61	@ 0x3d
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	00001111 	.word	0x00001111
 8002414:	00000444 	.word	0x00000444

08002418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e042      	b.n	80024b0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223d      	movs	r2, #61	@ 0x3d
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d107      	bne.n	8002446 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223c      	movs	r2, #60	@ 0x3c
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 f839 	bl	80024b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	223d      	movs	r2, #61	@ 0x3d
 800244a:	2102      	movs	r1, #2
 800244c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	0019      	movs	r1, r3
 8002458:	0010      	movs	r0, r2
 800245a:	f000 fc93 	bl	8002d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2246      	movs	r2, #70	@ 0x46
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	223e      	movs	r2, #62	@ 0x3e
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	223f      	movs	r2, #63	@ 0x3f
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2240      	movs	r2, #64	@ 0x40
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2241      	movs	r2, #65	@ 0x41
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2242      	movs	r2, #66	@ 0x42
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2243      	movs	r2, #67	@ 0x43
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2244      	movs	r2, #68	@ 0x44
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2245      	movs	r2, #69	@ 0x45
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223d      	movs	r2, #61	@ 0x3d
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d108      	bne.n	80024ea <HAL_TIM_PWM_Start+0x22>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	223e      	movs	r2, #62	@ 0x3e
 80024dc:	5c9b      	ldrb	r3, [r3, r2]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	4193      	sbcs	r3, r2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	e01f      	b.n	800252a <HAL_TIM_PWM_Start+0x62>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d108      	bne.n	8002502 <HAL_TIM_PWM_Start+0x3a>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	223f      	movs	r2, #63	@ 0x3f
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	1e5a      	subs	r2, r3, #1
 80024fc:	4193      	sbcs	r3, r2
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	e013      	b.n	800252a <HAL_TIM_PWM_Start+0x62>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d108      	bne.n	800251a <HAL_TIM_PWM_Start+0x52>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2240      	movs	r2, #64	@ 0x40
 800250c:	5c9b      	ldrb	r3, [r3, r2]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	4193      	sbcs	r3, r2
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e007      	b.n	800252a <HAL_TIM_PWM_Start+0x62>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2241      	movs	r2, #65	@ 0x41
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	4193      	sbcs	r3, r2
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e074      	b.n	800261c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <HAL_TIM_PWM_Start+0x7a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	223e      	movs	r2, #62	@ 0x3e
 800253c:	2102      	movs	r1, #2
 800253e:	5499      	strb	r1, [r3, r2]
 8002540:	e013      	b.n	800256a <HAL_TIM_PWM_Start+0xa2>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d104      	bne.n	8002552 <HAL_TIM_PWM_Start+0x8a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	223f      	movs	r2, #63	@ 0x3f
 800254c:	2102      	movs	r1, #2
 800254e:	5499      	strb	r1, [r3, r2]
 8002550:	e00b      	b.n	800256a <HAL_TIM_PWM_Start+0xa2>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d104      	bne.n	8002562 <HAL_TIM_PWM_Start+0x9a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2240      	movs	r2, #64	@ 0x40
 800255c:	2102      	movs	r1, #2
 800255e:	5499      	strb	r1, [r3, r2]
 8002560:	e003      	b.n	800256a <HAL_TIM_PWM_Start+0xa2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2241      	movs	r2, #65	@ 0x41
 8002566:	2102      	movs	r1, #2
 8002568:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	0018      	movs	r0, r3
 8002574:	f000 ff1c 	bl	80033b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a29      	ldr	r2, [pc, #164]	@ (8002624 <HAL_TIM_PWM_Start+0x15c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00e      	beq.n	80025a0 <HAL_TIM_PWM_Start+0xd8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a28      	ldr	r2, [pc, #160]	@ (8002628 <HAL_TIM_PWM_Start+0x160>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_TIM_PWM_Start+0xd8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a26      	ldr	r2, [pc, #152]	@ (800262c <HAL_TIM_PWM_Start+0x164>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <HAL_TIM_PWM_Start+0xd8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a25      	ldr	r2, [pc, #148]	@ (8002630 <HAL_TIM_PWM_Start+0x168>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_TIM_PWM_Start+0xdc>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_TIM_PWM_Start+0xde>
 80025a4:	2300      	movs	r3, #0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2180      	movs	r1, #128	@ 0x80
 80025b6:	0209      	lsls	r1, r1, #8
 80025b8:	430a      	orrs	r2, r1
 80025ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a18      	ldr	r2, [pc, #96]	@ (8002624 <HAL_TIM_PWM_Start+0x15c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00f      	beq.n	80025e6 <HAL_TIM_PWM_Start+0x11e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	05db      	lsls	r3, r3, #23
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d009      	beq.n	80025e6 <HAL_TIM_PWM_Start+0x11e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <HAL_TIM_PWM_Start+0x16c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_TIM_PWM_Start+0x11e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a11      	ldr	r2, [pc, #68]	@ (8002628 <HAL_TIM_PWM_Start+0x160>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d111      	bne.n	800260a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2207      	movs	r2, #7
 80025ee:	4013      	ands	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b06      	cmp	r3, #6
 80025f6:	d010      	beq.n	800261a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	e007      	b.n	800261a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b004      	add	sp, #16
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40014000 	.word	0x40014000
 800262c:	40014400 	.word	0x40014400
 8002630:	40014800 	.word	0x40014800
 8002634:	40000400 	.word	0x40000400

08002638 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	0018      	movs	r0, r3
 800264c:	f000 feb0 	bl	80033b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2f      	ldr	r2, [pc, #188]	@ (8002714 <HAL_TIM_PWM_Stop+0xdc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00e      	beq.n	8002678 <HAL_TIM_PWM_Stop+0x40>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2e      	ldr	r2, [pc, #184]	@ (8002718 <HAL_TIM_PWM_Stop+0xe0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_TIM_PWM_Stop+0x40>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2c      	ldr	r2, [pc, #176]	@ (800271c <HAL_TIM_PWM_Stop+0xe4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_TIM_PWM_Stop+0x40>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <HAL_TIM_PWM_Stop+0xe8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d101      	bne.n	800267c <HAL_TIM_PWM_Stop+0x44>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_TIM_PWM_Stop+0x46>
 800267c:	2300      	movs	r3, #0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d013      	beq.n	80026aa <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a26      	ldr	r2, [pc, #152]	@ (8002724 <HAL_TIM_PWM_Stop+0xec>)
 800268a:	4013      	ands	r3, r2
 800268c:	d10d      	bne.n	80026aa <HAL_TIM_PWM_Stop+0x72>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a24      	ldr	r2, [pc, #144]	@ (8002728 <HAL_TIM_PWM_Stop+0xf0>)
 8002696:	4013      	ands	r3, r2
 8002698:	d107      	bne.n	80026aa <HAL_TIM_PWM_Stop+0x72>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4921      	ldr	r1, [pc, #132]	@ (800272c <HAL_TIM_PWM_Stop+0xf4>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <HAL_TIM_PWM_Stop+0xec>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	d10d      	bne.n	80026d2 <HAL_TIM_PWM_Stop+0x9a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <HAL_TIM_PWM_Stop+0xf0>)
 80026be:	4013      	ands	r3, r2
 80026c0:	d107      	bne.n	80026d2 <HAL_TIM_PWM_Stop+0x9a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	438a      	bics	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_PWM_Stop+0xaa>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	223e      	movs	r2, #62	@ 0x3e
 80026dc:	2101      	movs	r1, #1
 80026de:	5499      	strb	r1, [r3, r2]
 80026e0:	e013      	b.n	800270a <HAL_TIM_PWM_Stop+0xd2>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_PWM_Stop+0xba>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	223f      	movs	r2, #63	@ 0x3f
 80026ec:	2101      	movs	r1, #1
 80026ee:	5499      	strb	r1, [r3, r2]
 80026f0:	e00b      	b.n	800270a <HAL_TIM_PWM_Stop+0xd2>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d104      	bne.n	8002702 <HAL_TIM_PWM_Stop+0xca>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2240      	movs	r2, #64	@ 0x40
 80026fc:	2101      	movs	r1, #1
 80026fe:	5499      	strb	r1, [r3, r2]
 8002700:	e003      	b.n	800270a <HAL_TIM_PWM_Stop+0xd2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2241      	movs	r2, #65	@ 0x41
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40014000 	.word	0x40014000
 800271c:	40014400 	.word	0x40014400
 8002720:	40014800 	.word	0x40014800
 8002724:	00001111 	.word	0x00001111
 8002728:	00000444 	.word	0x00000444
 800272c:	ffff7fff 	.word	0xffff7fff

08002730 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e042      	b.n	80027ca <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	223d      	movs	r2, #61	@ 0x3d
 8002748:	5c9b      	ldrb	r3, [r3, r2]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	223c      	movs	r2, #60	@ 0x3c
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f839 	bl	80027d2 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	223d      	movs	r2, #61	@ 0x3d
 8002764:	2102      	movs	r1, #2
 8002766:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3304      	adds	r3, #4
 8002770:	0019      	movs	r1, r3
 8002772:	0010      	movs	r0, r2
 8002774:	f000 fb06 	bl	8002d84 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2108      	movs	r1, #8
 8002784:	438a      	bics	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2246      	movs	r2, #70	@ 0x46
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223e      	movs	r2, #62	@ 0x3e
 80027a4:	2101      	movs	r1, #1
 80027a6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	223f      	movs	r2, #63	@ 0x3f
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2242      	movs	r2, #66	@ 0x42
 80027b4:	2101      	movs	r1, #1
 80027b6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2243      	movs	r2, #67	@ 0x43
 80027bc:	2101      	movs	r1, #1
 80027be:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	223d      	movs	r2, #61	@ 0x3d
 80027c4:	2101      	movs	r1, #1
 80027c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2202      	movs	r2, #2
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d124      	bne.n	8002842 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2202      	movs	r2, #2
 8002800:	4013      	ands	r3, r2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d11d      	bne.n	8002842 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2203      	movs	r2, #3
 800280c:	4252      	negs	r2, r2
 800280e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2203      	movs	r2, #3
 800281e:	4013      	ands	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0018      	movs	r0, r3
 8002826:	f000 fa95 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 800282a:	e007      	b.n	800283c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0018      	movs	r0, r3
 8002830:	f000 fa88 	bl	8002d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fa94 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2204      	movs	r2, #4
 800284a:	4013      	ands	r3, r2
 800284c:	2b04      	cmp	r3, #4
 800284e:	d125      	bne.n	800289c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	2b04      	cmp	r3, #4
 800285c:	d11e      	bne.n	800289c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2205      	movs	r2, #5
 8002864:	4252      	negs	r2, r2
 8002866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	23c0      	movs	r3, #192	@ 0xc0
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4013      	ands	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f000 fa68 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002884:	e007      	b.n	8002896 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 fa5b 	bl	8002d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0018      	movs	r0, r3
 8002892:	f000 fa67 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2208      	movs	r2, #8
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d124      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2208      	movs	r2, #8
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d11d      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2209      	movs	r2, #9
 80028be:	4252      	negs	r2, r2
 80028c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2204      	movs	r2, #4
 80028c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2203      	movs	r2, #3
 80028d0:	4013      	ands	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fa3c 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 80028dc:	e007      	b.n	80028ee <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fa2f 	bl	8002d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 fa3b 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2210      	movs	r2, #16
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d125      	bne.n	800294e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2210      	movs	r2, #16
 800290a:	4013      	ands	r3, r2
 800290c:	2b10      	cmp	r3, #16
 800290e:	d11e      	bne.n	800294e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2211      	movs	r2, #17
 8002916:	4252      	negs	r2, r2
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2208      	movs	r2, #8
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	23c0      	movs	r3, #192	@ 0xc0
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4013      	ands	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 fa0f 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002936:	e007      	b.n	8002948 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0018      	movs	r0, r3
 800293c:	f000 fa02 	bl	8002d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 fa0e 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2201      	movs	r2, #1
 8002956:	4013      	ands	r3, r2
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10f      	bne.n	800297c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	2b01      	cmp	r3, #1
 8002968:	d108      	bne.n	800297c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2202      	movs	r2, #2
 8002970:	4252      	negs	r2, r2
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0018      	movs	r0, r3
 8002978:	f7fd fda8 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2280      	movs	r2, #128	@ 0x80
 8002984:	4013      	ands	r3, r2
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d10f      	bne.n	80029aa <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2280      	movs	r2, #128	@ 0x80
 8002992:	4013      	ands	r3, r2
 8002994:	2b80      	cmp	r3, #128	@ 0x80
 8002996:	d108      	bne.n	80029aa <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2281      	movs	r2, #129	@ 0x81
 800299e:	4252      	negs	r2, r2
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 fd8d 	bl	80034c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2240      	movs	r2, #64	@ 0x40
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b40      	cmp	r3, #64	@ 0x40
 80029b6:	d10f      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2240      	movs	r2, #64	@ 0x40
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b40      	cmp	r3, #64	@ 0x40
 80029c4:	d108      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2241      	movs	r2, #65	@ 0x41
 80029cc:	4252      	negs	r2, r2
 80029ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f9ce 	bl	8002d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2220      	movs	r2, #32
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d10f      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d108      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2221      	movs	r2, #33	@ 0x21
 80029fa:	4252      	negs	r2, r2
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 fd57 	bl	80034b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2317      	movs	r3, #23
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	223c      	movs	r2, #60	@ 0x3c
 8002a28:	5c9b      	ldrb	r3, [r3, r2]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0ad      	b.n	8002b8e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	223c      	movs	r2, #60	@ 0x3c
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	d100      	bne.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a40:	e076      	b.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	d900      	bls.n	8002a4a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002a48:	e095      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d04e      	beq.n	8002aee <HAL_TIM_PWM_ConfigChannel+0xde>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d900      	bls.n	8002a58 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002a56:	e08e      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d021      	beq.n	8002aa8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002a64:	e087      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fa08 	bl	8002e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2108      	movs	r1, #8
 8002a80:	430a      	orrs	r2, r1
 8002a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2104      	movs	r1, #4
 8002a90:	438a      	bics	r2, r1
 8002a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6999      	ldr	r1, [r3, #24]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	619a      	str	r2, [r3, #24]
      break;
 8002aa6:	e06b      	b.n	8002b80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	0011      	movs	r1, r2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 fa6f 	bl	8002f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2180      	movs	r1, #128	@ 0x80
 8002ac2:	0109      	lsls	r1, r1, #4
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4931      	ldr	r1, [pc, #196]	@ (8002b98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	021a      	lsls	r2, r3, #8
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
      break;
 8002aec:	e048      	b.n	8002b80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	0011      	movs	r1, r2
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 fad0 	bl	800309c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2108      	movs	r1, #8
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2104      	movs	r1, #4
 8002b18:	438a      	bics	r2, r1
 8002b1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69d9      	ldr	r1, [r3, #28]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	61da      	str	r2, [r3, #28]
      break;
 8002b2e:	e027      	b.n	8002b80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	0011      	movs	r1, r2
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 fb35 	bl	80031a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2180      	movs	r1, #128	@ 0x80
 8002b4a:	0109      	lsls	r1, r1, #4
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	490f      	ldr	r1, [pc, #60]	@ (8002b98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69d9      	ldr	r1, [r3, #28]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	021a      	lsls	r2, r3, #8
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	61da      	str	r2, [r3, #28]
      break;
 8002b74:	e004      	b.n	8002b80 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002b76:	2317      	movs	r3, #23
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
      break;
 8002b7e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	223c      	movs	r2, #60	@ 0x3c
 8002b84:	2100      	movs	r1, #0
 8002b86:	5499      	strb	r1, [r3, r2]

  return status;
 8002b88:	2317      	movs	r3, #23
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b006      	add	sp, #24
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	fffffbff 	.word	0xfffffbff

08002b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	230f      	movs	r3, #15
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	223c      	movs	r2, #60	@ 0x3c
 8002bb2:	5c9b      	ldrb	r3, [r3, r2]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_TIM_ConfigClockSource+0x20>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e0bc      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x19a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	223c      	movs	r2, #60	@ 0x3c
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	223d      	movs	r2, #61	@ 0x3d
 8002bc8:	2102      	movs	r1, #2
 8002bca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2277      	movs	r2, #119	@ 0x77
 8002bd8:	4393      	bics	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4a58      	ldr	r2, [pc, #352]	@ (8002d40 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	0192      	lsls	r2, r2, #6
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d040      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0xde>
 8002bf8:	2280      	movs	r2, #128	@ 0x80
 8002bfa:	0192      	lsls	r2, r2, #6
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d900      	bls.n	8002c02 <HAL_TIM_ConfigClockSource+0x66>
 8002c00:	e088      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
 8002c02:	2280      	movs	r2, #128	@ 0x80
 8002c04:	0152      	lsls	r2, r2, #5
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d100      	bne.n	8002c0c <HAL_TIM_ConfigClockSource+0x70>
 8002c0a:	e088      	b.n	8002d1e <HAL_TIM_ConfigClockSource+0x182>
 8002c0c:	2280      	movs	r2, #128	@ 0x80
 8002c0e:	0152      	lsls	r2, r2, #5
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d900      	bls.n	8002c16 <HAL_TIM_ConfigClockSource+0x7a>
 8002c14:	e07e      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
 8002c16:	2b70      	cmp	r3, #112	@ 0x70
 8002c18:	d018      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0xb0>
 8002c1a:	d900      	bls.n	8002c1e <HAL_TIM_ConfigClockSource+0x82>
 8002c1c:	e07a      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
 8002c1e:	2b60      	cmp	r3, #96	@ 0x60
 8002c20:	d04f      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x126>
 8002c22:	d900      	bls.n	8002c26 <HAL_TIM_ConfigClockSource+0x8a>
 8002c24:	e076      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
 8002c26:	2b50      	cmp	r3, #80	@ 0x50
 8002c28:	d03b      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x106>
 8002c2a:	d900      	bls.n	8002c2e <HAL_TIM_ConfigClockSource+0x92>
 8002c2c:	e072      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
 8002c2e:	2b40      	cmp	r3, #64	@ 0x40
 8002c30:	d057      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x146>
 8002c32:	d900      	bls.n	8002c36 <HAL_TIM_ConfigClockSource+0x9a>
 8002c34:	e06e      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
 8002c36:	2b30      	cmp	r3, #48	@ 0x30
 8002c38:	d063      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x166>
 8002c3a:	d86b      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d060      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x166>
 8002c40:	d868      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d05d      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x166>
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d05b      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x166>
 8002c4a:	e063      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	f000 fb88 	bl	8003370 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2277      	movs	r2, #119	@ 0x77
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	609a      	str	r2, [r3, #8]
      break;
 8002c78:	e052      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c8a:	f000 fb71 	bl	8003370 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2180      	movs	r1, #128	@ 0x80
 8002c9a:	01c9      	lsls	r1, r1, #7
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
      break;
 8002ca0:	e03e      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	001a      	movs	r2, r3
 8002cb0:	f000 fae4 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2150      	movs	r1, #80	@ 0x50
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 fb3e 	bl	800333c <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e02e      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	001a      	movs	r2, r3
 8002cd0:	f000 fb02 	bl	80032d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2160      	movs	r1, #96	@ 0x60
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fb2e 	bl	800333c <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e01e      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	001a      	movs	r2, r3
 8002cf0:	f000 fac4 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2140      	movs	r1, #64	@ 0x40
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 fb1e 	bl	800333c <TIM_ITRx_SetConfig>
      break;
 8002d00:	e00e      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	0010      	movs	r0, r2
 8002d0e:	f000 fb15 	bl	800333c <TIM_ITRx_SetConfig>
      break;
 8002d12:	e005      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d14:	230f      	movs	r3, #15
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
      break;
 8002d1c:	e000      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d1e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	223d      	movs	r2, #61	@ 0x3d
 8002d24:	2101      	movs	r1, #1
 8002d26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	223c      	movs	r2, #60	@ 0x3c
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5499      	strb	r1, [r3, r2]

  return status;
 8002d30:	230f      	movs	r3, #15
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	781b      	ldrb	r3, [r3, #0]
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	ffff00ff 	.word	0xffff00ff

08002d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d4c:	46c0      	nop			@ (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d7c:	46c0      	nop			@ (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a34      	ldr	r2, [pc, #208]	@ (8002e68 <TIM_Base_SetConfig+0xe4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d008      	beq.n	8002dae <TIM_Base_SetConfig+0x2a>
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d003      	beq.n	8002dae <TIM_Base_SetConfig+0x2a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a30      	ldr	r2, [pc, #192]	@ (8002e6c <TIM_Base_SetConfig+0xe8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2270      	movs	r2, #112	@ 0x70
 8002db2:	4393      	bics	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a29      	ldr	r2, [pc, #164]	@ (8002e68 <TIM_Base_SetConfig+0xe4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <TIM_Base_SetConfig+0x76>
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d013      	beq.n	8002dfa <TIM_Base_SetConfig+0x76>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a25      	ldr	r2, [pc, #148]	@ (8002e6c <TIM_Base_SetConfig+0xe8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00f      	beq.n	8002dfa <TIM_Base_SetConfig+0x76>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a24      	ldr	r2, [pc, #144]	@ (8002e70 <TIM_Base_SetConfig+0xec>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <TIM_Base_SetConfig+0x76>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a23      	ldr	r2, [pc, #140]	@ (8002e74 <TIM_Base_SetConfig+0xf0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0x76>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a22      	ldr	r2, [pc, #136]	@ (8002e78 <TIM_Base_SetConfig+0xf4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0x76>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a21      	ldr	r2, [pc, #132]	@ (8002e7c <TIM_Base_SetConfig+0xf8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a20      	ldr	r2, [pc, #128]	@ (8002e80 <TIM_Base_SetConfig+0xfc>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2280      	movs	r2, #128	@ 0x80
 8002e10:	4393      	bics	r3, r2
 8002e12:	001a      	movs	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a0c      	ldr	r2, [pc, #48]	@ (8002e68 <TIM_Base_SetConfig+0xe4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0xce>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <TIM_Base_SetConfig+0xf0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0xce>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0c      	ldr	r2, [pc, #48]	@ (8002e78 <TIM_Base_SetConfig+0xf4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0xce>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e7c <TIM_Base_SetConfig+0xf8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d103      	bne.n	8002e5a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	615a      	str	r2, [r3, #20]
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40002000 	.word	0x40002000
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40014400 	.word	0x40014400
 8002e7c:	40014800 	.word	0x40014800
 8002e80:	fffffcff 	.word	0xfffffcff

08002e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	2201      	movs	r2, #1
 8002e94:	4393      	bics	r3, r2
 8002e96:	001a      	movs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2270      	movs	r2, #112	@ 0x70
 8002eb2:	4393      	bics	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4393      	bics	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4393      	bics	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a27      	ldr	r2, [pc, #156]	@ (8002f7c <TIM_OC1_SetConfig+0xf8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <TIM_OC1_SetConfig+0x76>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a26      	ldr	r2, [pc, #152]	@ (8002f80 <TIM_OC1_SetConfig+0xfc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_OC1_SetConfig+0x76>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a25      	ldr	r2, [pc, #148]	@ (8002f84 <TIM_OC1_SetConfig+0x100>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_OC1_SetConfig+0x76>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a24      	ldr	r2, [pc, #144]	@ (8002f88 <TIM_OC1_SetConfig+0x104>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10c      	bne.n	8002f14 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2208      	movs	r2, #8
 8002efe:	4393      	bics	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	4393      	bics	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a19      	ldr	r2, [pc, #100]	@ (8002f7c <TIM_OC1_SetConfig+0xf8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <TIM_OC1_SetConfig+0xb0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a18      	ldr	r2, [pc, #96]	@ (8002f80 <TIM_OC1_SetConfig+0xfc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d007      	beq.n	8002f34 <TIM_OC1_SetConfig+0xb0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a17      	ldr	r2, [pc, #92]	@ (8002f84 <TIM_OC1_SetConfig+0x100>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_OC1_SetConfig+0xb0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a16      	ldr	r2, [pc, #88]	@ (8002f88 <TIM_OC1_SetConfig+0x104>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4a15      	ldr	r2, [pc, #84]	@ (8002f8c <TIM_OC1_SetConfig+0x108>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4a14      	ldr	r2, [pc, #80]	@ (8002f90 <TIM_OC1_SetConfig+0x10c>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b006      	add	sp, #24
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800
 8002f8c:	fffffeff 	.word	0xfffffeff
 8002f90:	fffffdff 	.word	0xfffffdff

08002f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	4393      	bics	r3, r2
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <TIM_OC2_SetConfig+0xe8>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8003080 <TIM_OC2_SetConfig+0xec>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	4393      	bics	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a24      	ldr	r2, [pc, #144]	@ (8003084 <TIM_OC2_SetConfig+0xf0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10d      	bne.n	8003012 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2280      	movs	r2, #128	@ 0x80
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2240      	movs	r2, #64	@ 0x40
 800300e:	4393      	bics	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1b      	ldr	r2, [pc, #108]	@ (8003084 <TIM_OC2_SetConfig+0xf0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_OC2_SetConfig+0x9e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1a      	ldr	r2, [pc, #104]	@ (8003088 <TIM_OC2_SetConfig+0xf4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_OC2_SetConfig+0x9e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a19      	ldr	r2, [pc, #100]	@ (800308c <TIM_OC2_SetConfig+0xf8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_OC2_SetConfig+0x9e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <TIM_OC2_SetConfig+0xfc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d113      	bne.n	800305a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4a17      	ldr	r2, [pc, #92]	@ (8003094 <TIM_OC2_SetConfig+0x100>)
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <TIM_OC2_SetConfig+0x104>)
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	621a      	str	r2, [r3, #32]
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b006      	add	sp, #24
 800307a:	bd80      	pop	{r7, pc}
 800307c:	ffff8fff 	.word	0xffff8fff
 8003080:	fffffcff 	.word	0xfffffcff
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800
 8003094:	fffffbff 	.word	0xfffffbff
 8003098:	fffff7ff 	.word	0xfffff7ff

0800309c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a35      	ldr	r2, [pc, #212]	@ (8003180 <TIM_OC3_SetConfig+0xe4>)
 80030ac:	401a      	ands	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2270      	movs	r2, #112	@ 0x70
 80030c8:	4393      	bics	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2203      	movs	r2, #3
 80030d0:	4393      	bics	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4a28      	ldr	r2, [pc, #160]	@ (8003184 <TIM_OC3_SetConfig+0xe8>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a24      	ldr	r2, [pc, #144]	@ (8003188 <TIM_OC3_SetConfig+0xec>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10d      	bne.n	8003116 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	4a23      	ldr	r2, [pc, #140]	@ (800318c <TIM_OC3_SetConfig+0xf0>)
 80030fe:	4013      	ands	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	4a1f      	ldr	r2, [pc, #124]	@ (8003190 <TIM_OC3_SetConfig+0xf4>)
 8003112:	4013      	ands	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1b      	ldr	r2, [pc, #108]	@ (8003188 <TIM_OC3_SetConfig+0xec>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00b      	beq.n	8003136 <TIM_OC3_SetConfig+0x9a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <TIM_OC3_SetConfig+0xf8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <TIM_OC3_SetConfig+0x9a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1b      	ldr	r2, [pc, #108]	@ (8003198 <TIM_OC3_SetConfig+0xfc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_OC3_SetConfig+0x9a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1a      	ldr	r2, [pc, #104]	@ (800319c <TIM_OC3_SetConfig+0x100>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d113      	bne.n	800315e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <TIM_OC3_SetConfig+0x104>)
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <TIM_OC3_SetConfig+0x108>)
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	46c0      	nop			@ (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b006      	add	sp, #24
 800317e:	bd80      	pop	{r7, pc}
 8003180:	fffffeff 	.word	0xfffffeff
 8003184:	fffffdff 	.word	0xfffffdff
 8003188:	40012c00 	.word	0x40012c00
 800318c:	fffff7ff 	.word	0xfffff7ff
 8003190:	fffffbff 	.word	0xfffffbff
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800
 80031a0:	ffffefff 	.word	0xffffefff
 80031a4:	ffffdfff 	.word	0xffffdfff

080031a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <TIM_OC4_SetConfig+0xb0>)
 80031b8:	401a      	ands	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a22      	ldr	r2, [pc, #136]	@ (800325c <TIM_OC4_SetConfig+0xb4>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a21      	ldr	r2, [pc, #132]	@ (8003260 <TIM_OC4_SetConfig+0xb8>)
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003264 <TIM_OC4_SetConfig+0xbc>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	031b      	lsls	r3, r3, #12
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a19      	ldr	r2, [pc, #100]	@ (8003268 <TIM_OC4_SetConfig+0xc0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_OC4_SetConfig+0x78>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a18      	ldr	r2, [pc, #96]	@ (800326c <TIM_OC4_SetConfig+0xc4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_OC4_SetConfig+0x78>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <TIM_OC4_SetConfig+0xc8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_OC4_SetConfig+0x78>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a16      	ldr	r2, [pc, #88]	@ (8003274 <TIM_OC4_SetConfig+0xcc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d109      	bne.n	8003234 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4a15      	ldr	r2, [pc, #84]	@ (8003278 <TIM_OC4_SetConfig+0xd0>)
 8003224:	4013      	ands	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	019b      	lsls	r3, r3, #6
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b006      	add	sp, #24
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	ffffefff 	.word	0xffffefff
 800325c:	ffff8fff 	.word	0xffff8fff
 8003260:	fffffcff 	.word	0xfffffcff
 8003264:	ffffdfff 	.word	0xffffdfff
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800
 8003278:	ffffbfff 	.word	0xffffbfff

0800327c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	2201      	movs	r2, #1
 8003294:	4393      	bics	r3, r2
 8003296:	001a      	movs	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	22f0      	movs	r2, #240	@ 0xf0
 80032a6:	4393      	bics	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	220a      	movs	r2, #10
 80032b8:	4393      	bics	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	621a      	str	r2, [r3, #32]
}
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b006      	add	sp, #24
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	2210      	movs	r2, #16
 80032ea:	4393      	bics	r3, r2
 80032ec:	001a      	movs	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	4a0d      	ldr	r2, [pc, #52]	@ (8003338 <TIM_TI2_ConfigInputStage+0x60>)
 8003302:	4013      	ands	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	22a0      	movs	r2, #160	@ 0xa0
 8003314:	4393      	bics	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	b006      	add	sp, #24
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	ffff0fff 	.word	0xffff0fff

0800333c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2270      	movs	r2, #112	@ 0x70
 8003350:	4393      	bics	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	2207      	movs	r2, #7
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	609a      	str	r2, [r3, #8]
}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b004      	add	sp, #16
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	4a09      	ldr	r2, [pc, #36]	@ (80033ac <TIM_ETR_SetConfig+0x3c>)
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	431a      	orrs	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	46c0      	nop			@ (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b006      	add	sp, #24
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	ffff00ff 	.word	0xffff00ff

080033b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	221f      	movs	r2, #31
 80033c0:	4013      	ands	r3, r2
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	0013      	movs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	43d2      	mvns	r2, r2
 80033d2:	401a      	ands	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	211f      	movs	r1, #31
 80033e0:	400b      	ands	r3, r1
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4099      	lsls	r1, r3
 80033e6:	000b      	movs	r3, r1
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b006      	add	sp, #24
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223c      	movs	r2, #60	@ 0x3c
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800340c:	2302      	movs	r3, #2
 800340e:	e047      	b.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	223c      	movs	r2, #60	@ 0x3c
 8003414:	2101      	movs	r1, #1
 8003416:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	223d      	movs	r2, #61	@ 0x3d
 800341c:	2102      	movs	r1, #2
 800341e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2270      	movs	r2, #112	@ 0x70
 8003434:	4393      	bics	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a16      	ldr	r2, [pc, #88]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00f      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	05db      	lsls	r3, r3, #23
 800345c:	429a      	cmp	r2, r3
 800345e:	d009      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a11      	ldr	r2, [pc, #68]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2280      	movs	r2, #128	@ 0x80
 8003478:	4393      	bics	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223d      	movs	r2, #61	@ 0x3d
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223c      	movs	r2, #60	@ 0x3c
 800349a:	2100      	movs	r1, #0
 800349c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40014000 	.word	0x40014000

080034b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e044      	b.n	8003570 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2278      	movs	r2, #120	@ 0x78
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7fd fcfb 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2224      	movs	r2, #36	@ 0x24
 8003502:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0018      	movs	r0, r3
 8003518:	f000 fc60 	bl	8003ddc <UART_SetConfig>
 800351c:	0003      	movs	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e024      	b.n	8003570 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 fd93 	bl	800405c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	490d      	ldr	r1, [pc, #52]	@ (8003578 <HAL_UART_Init+0xa4>)
 8003542:	400a      	ands	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	212a      	movs	r1, #42	@ 0x2a
 8003552:	438a      	bics	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 fe2b 	bl	80041c4 <UART_CheckIdleState>
 800356e:	0003      	movs	r3, r0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}
 8003578:	ffffb7ff 	.word	0xffffb7ff

0800357c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e030      	b.n	80035f0 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2224      	movs	r2, #36	@ 0x24
 8003592:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	438a      	bics	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2200      	movs	r2, #0
 80035b2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0018      	movs	r0, r3
 80035c0:	f7fd fcec 	bl	8000f9c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2284      	movs	r2, #132	@ 0x84
 80035c8:	2100      	movs	r1, #0
 80035ca:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2280      	movs	r2, #128	@ 0x80
 80035d6:	2100      	movs	r1, #0
 80035d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2278      	movs	r2, #120	@ 0x78
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	@ 0x28
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	1dbb      	adds	r3, r7, #6
 8003606:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800360c:	2b20      	cmp	r3, #32
 800360e:	d000      	beq.n	8003612 <HAL_UART_Transmit+0x1a>
 8003610:	e08c      	b.n	800372c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_UART_Transmit+0x28>
 8003618:	1dbb      	adds	r3, r7, #6
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e084      	b.n	800372e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	015b      	lsls	r3, r3, #5
 800362c:	429a      	cmp	r2, r3
 800362e:	d109      	bne.n	8003644 <HAL_UART_Transmit+0x4c>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2201      	movs	r2, #1
 800363c:	4013      	ands	r3, r2
 800363e:	d001      	beq.n	8003644 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e074      	b.n	800372e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2284      	movs	r2, #132	@ 0x84
 8003648:	2100      	movs	r1, #0
 800364a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	@ 0x21
 8003650:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003652:	f7fd fda1 	bl	8001198 <HAL_GetTick>
 8003656:	0003      	movs	r3, r0
 8003658:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1dba      	adds	r2, r7, #6
 800365e:	2150      	movs	r1, #80	@ 0x50
 8003660:	8812      	ldrh	r2, [r2, #0]
 8003662:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1dba      	adds	r2, r7, #6
 8003668:	2152      	movs	r1, #82	@ 0x52
 800366a:	8812      	ldrh	r2, [r2, #0]
 800366c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	015b      	lsls	r3, r3, #5
 8003676:	429a      	cmp	r2, r3
 8003678:	d108      	bne.n	800368c <HAL_UART_Transmit+0x94>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e003      	b.n	8003694 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003694:	e02f      	b.n	80036f6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	0013      	movs	r3, r2
 80036a0:	2200      	movs	r2, #0
 80036a2:	2180      	movs	r1, #128	@ 0x80
 80036a4:	f000 fe36 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 80036a8:	1e03      	subs	r3, r0, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e03b      	b.n	800372e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	05d2      	lsls	r2, r2, #23
 80036c6:	0dd2      	lsrs	r2, r2, #23
 80036c8:	b292      	uxth	r2, r2
 80036ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	3302      	adds	r3, #2
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e007      	b.n	80036e4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3301      	adds	r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2252      	movs	r2, #82	@ 0x52
 80036e8:	5a9b      	ldrh	r3, [r3, r2]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b299      	uxth	r1, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2252      	movs	r2, #82	@ 0x52
 80036f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2252      	movs	r2, #82	@ 0x52
 80036fa:	5a9b      	ldrh	r3, [r3, r2]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1c9      	bne.n	8003696 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	0013      	movs	r3, r2
 800370c:	2200      	movs	r2, #0
 800370e:	2140      	movs	r1, #64	@ 0x40
 8003710:	f000 fe00 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 8003714:	1e03      	subs	r3, r0, #0
 8003716:	d004      	beq.n	8003722 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e005      	b.n	800372e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	0018      	movs	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	b008      	add	sp, #32
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b088      	sub	sp, #32
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	1dbb      	adds	r3, r7, #6
 8003742:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2280      	movs	r2, #128	@ 0x80
 8003748:	589b      	ldr	r3, [r3, r2]
 800374a:	2b20      	cmp	r3, #32
 800374c:	d145      	bne.n	80037da <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_UART_Receive_IT+0x26>
 8003754:	1dbb      	adds	r3, r7, #6
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e03d      	b.n	80037dc <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	2380      	movs	r3, #128	@ 0x80
 8003766:	015b      	lsls	r3, r3, #5
 8003768:	429a      	cmp	r2, r3
 800376a:	d109      	bne.n	8003780 <HAL_UART_Receive_IT+0x4a>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2201      	movs	r2, #1
 8003778:	4013      	ands	r3, r2
 800377a:	d001      	beq.n	8003780 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e02d      	b.n	80037dc <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	4013      	ands	r3, r2
 8003792:	d019      	beq.n	80037c8 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003794:	f3ef 8310 	mrs	r3, PRIMASK
 8003798:	613b      	str	r3, [r7, #16]
  return(result);
 800379a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	2301      	movs	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			@ (mov r8, r8)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2180      	movs	r1, #128	@ 0x80
 80037b6:	04c9      	lsls	r1, r1, #19
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f383 8810 	msr	PRIMASK, r3
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037c8:	1dbb      	adds	r3, r7, #6
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 fe09 	bl	80043e8 <UART_Start_Receive_IT>
 80037d6:	0003      	movs	r3, r0
 80037d8:	e000      	b.n	80037dc <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b008      	add	sp, #32
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b0ab      	sub	sp, #172	@ 0xac
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	22a4      	movs	r2, #164	@ 0xa4
 80037f4:	18b9      	adds	r1, r7, r2
 80037f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	20a0      	movs	r0, #160	@ 0xa0
 8003800:	1839      	adds	r1, r7, r0
 8003802:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	219c      	movs	r1, #156	@ 0x9c
 800380c:	1879      	adds	r1, r7, r1
 800380e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003810:	0011      	movs	r1, r2
 8003812:	18bb      	adds	r3, r7, r2
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a99      	ldr	r2, [pc, #612]	@ (8003a7c <HAL_UART_IRQHandler+0x298>)
 8003818:	4013      	ands	r3, r2
 800381a:	2298      	movs	r2, #152	@ 0x98
 800381c:	18bc      	adds	r4, r7, r2
 800381e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003820:	18bb      	adds	r3, r7, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d114      	bne.n	8003852 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003828:	187b      	adds	r3, r7, r1
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2220      	movs	r2, #32
 800382e:	4013      	ands	r3, r2
 8003830:	d00f      	beq.n	8003852 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003832:	183b      	adds	r3, r7, r0
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2220      	movs	r2, #32
 8003838:	4013      	ands	r3, r2
 800383a:	d00a      	beq.n	8003852 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003840:	2b00      	cmp	r3, #0
 8003842:	d100      	bne.n	8003846 <HAL_UART_IRQHandler+0x62>
 8003844:	e29e      	b.n	8003d84 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	0010      	movs	r0, r2
 800384e:	4798      	blx	r3
      }
      return;
 8003850:	e298      	b.n	8003d84 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003852:	2398      	movs	r3, #152	@ 0x98
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d100      	bne.n	800385e <HAL_UART_IRQHandler+0x7a>
 800385c:	e114      	b.n	8003a88 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800385e:	239c      	movs	r3, #156	@ 0x9c
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2201      	movs	r2, #1
 8003866:	4013      	ands	r3, r2
 8003868:	d106      	bne.n	8003878 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800386a:	23a0      	movs	r3, #160	@ 0xa0
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a83      	ldr	r2, [pc, #524]	@ (8003a80 <HAL_UART_IRQHandler+0x29c>)
 8003872:	4013      	ands	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_UART_IRQHandler+0x94>
 8003876:	e107      	b.n	8003a88 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003878:	23a4      	movs	r3, #164	@ 0xa4
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2201      	movs	r2, #1
 8003880:	4013      	ands	r3, r2
 8003882:	d012      	beq.n	80038aa <HAL_UART_IRQHandler+0xc6>
 8003884:	23a0      	movs	r3, #160	@ 0xa0
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d00b      	beq.n	80038aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2201      	movs	r2, #1
 8003898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2284      	movs	r2, #132	@ 0x84
 800389e:	589b      	ldr	r3, [r3, r2]
 80038a0:	2201      	movs	r2, #1
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2184      	movs	r1, #132	@ 0x84
 80038a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038aa:	23a4      	movs	r3, #164	@ 0xa4
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2202      	movs	r2, #2
 80038b2:	4013      	ands	r3, r2
 80038b4:	d011      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
 80038b6:	239c      	movs	r3, #156	@ 0x9c
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2201      	movs	r2, #1
 80038be:	4013      	ands	r3, r2
 80038c0:	d00b      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2284      	movs	r2, #132	@ 0x84
 80038ce:	589b      	ldr	r3, [r3, r2]
 80038d0:	2204      	movs	r2, #4
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2184      	movs	r1, #132	@ 0x84
 80038d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038da:	23a4      	movs	r3, #164	@ 0xa4
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2204      	movs	r2, #4
 80038e2:	4013      	ands	r3, r2
 80038e4:	d011      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
 80038e6:	239c      	movs	r3, #156	@ 0x9c
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	d00b      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2204      	movs	r2, #4
 80038f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2284      	movs	r2, #132	@ 0x84
 80038fe:	589b      	ldr	r3, [r3, r2]
 8003900:	2202      	movs	r2, #2
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2184      	movs	r1, #132	@ 0x84
 8003908:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800390a:	23a4      	movs	r3, #164	@ 0xa4
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2208      	movs	r2, #8
 8003912:	4013      	ands	r3, r2
 8003914:	d017      	beq.n	8003946 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003916:	23a0      	movs	r3, #160	@ 0xa0
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2220      	movs	r2, #32
 800391e:	4013      	ands	r3, r2
 8003920:	d105      	bne.n	800392e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003922:	239c      	movs	r3, #156	@ 0x9c
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2208      	movs	r2, #8
 8003934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2284      	movs	r2, #132	@ 0x84
 800393a:	589b      	ldr	r3, [r3, r2]
 800393c:	2208      	movs	r2, #8
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2184      	movs	r1, #132	@ 0x84
 8003944:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003946:	23a4      	movs	r3, #164	@ 0xa4
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	@ 0x80
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4013      	ands	r3, r2
 8003952:	d013      	beq.n	800397c <HAL_UART_IRQHandler+0x198>
 8003954:	23a0      	movs	r3, #160	@ 0xa0
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	04db      	lsls	r3, r3, #19
 800395e:	4013      	ands	r3, r2
 8003960:	d00c      	beq.n	800397c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2280      	movs	r2, #128	@ 0x80
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2284      	movs	r2, #132	@ 0x84
 8003970:	589b      	ldr	r3, [r3, r2]
 8003972:	2220      	movs	r2, #32
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2184      	movs	r1, #132	@ 0x84
 800397a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2284      	movs	r2, #132	@ 0x84
 8003980:	589b      	ldr	r3, [r3, r2]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d100      	bne.n	8003988 <HAL_UART_IRQHandler+0x1a4>
 8003986:	e1ff      	b.n	8003d88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003988:	23a4      	movs	r3, #164	@ 0xa4
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2220      	movs	r2, #32
 8003990:	4013      	ands	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003994:	23a0      	movs	r3, #160	@ 0xa0
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2220      	movs	r2, #32
 800399c:	4013      	ands	r3, r2
 800399e:	d008      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	0010      	movs	r0, r2
 80039b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2284      	movs	r2, #132	@ 0x84
 80039b6:	589b      	ldr	r3, [r3, r2]
 80039b8:	2194      	movs	r1, #148	@ 0x94
 80039ba:	187a      	adds	r2, r7, r1
 80039bc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2240      	movs	r2, #64	@ 0x40
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d004      	beq.n	80039d6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2228      	movs	r2, #40	@ 0x28
 80039d2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d4:	d047      	beq.n	8003a66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 fdbb 	bl	8004554 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2240      	movs	r2, #64	@ 0x40
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b40      	cmp	r3, #64	@ 0x40
 80039ea:	d137      	bne.n	8003a5c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ec:	f3ef 8310 	mrs	r3, PRIMASK
 80039f0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80039f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f4:	2090      	movs	r0, #144	@ 0x90
 80039f6:	183a      	adds	r2, r7, r0
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	2301      	movs	r3, #1
 80039fc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2140      	movs	r1, #64	@ 0x40
 8003a12:	438a      	bics	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	183b      	adds	r3, r7, r0
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d012      	beq.n	8003a52 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a30:	4a14      	ldr	r2, [pc, #80]	@ (8003a84 <HAL_UART_IRQHandler+0x2a0>)
 8003a32:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fd fcff 	bl	800143c <HAL_DMA_Abort_IT>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d01a      	beq.n	8003a78 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	e012      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 f9ad 	bl	8003db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5a:	e00d      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 f9a8 	bl	8003db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e008      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 f9a3 	bl	8003db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2284      	movs	r2, #132	@ 0x84
 8003a72:	2100      	movs	r1, #0
 8003a74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a76:	e187      	b.n	8003d88 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	46c0      	nop			@ (mov r8, r8)
    return;
 8003a7a:	e185      	b.n	8003d88 <HAL_UART_IRQHandler+0x5a4>
 8003a7c:	0000080f 	.word	0x0000080f
 8003a80:	04000120 	.word	0x04000120
 8003a84:	0800461d 	.word	0x0800461d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d000      	beq.n	8003a92 <HAL_UART_IRQHandler+0x2ae>
 8003a90:	e139      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a92:	23a4      	movs	r3, #164	@ 0xa4
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2210      	movs	r2, #16
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d100      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x2bc>
 8003a9e:	e132      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aa0:	23a0      	movs	r3, #160	@ 0xa0
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d100      	bne.n	8003aae <HAL_UART_IRQHandler+0x2ca>
 8003aac:	e12b      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2240      	movs	r2, #64	@ 0x40
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d000      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x2e2>
 8003ac4:	e09f      	b.n	8003c06 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	217e      	movs	r1, #126	@ 0x7e
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d100      	bne.n	8003ade <HAL_UART_IRQHandler+0x2fa>
 8003adc:	e156      	b.n	8003d8c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2258      	movs	r2, #88	@ 0x58
 8003ae2:	5a9b      	ldrh	r3, [r3, r2]
 8003ae4:	187a      	adds	r2, r7, r1
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d300      	bcc.n	8003aee <HAL_UART_IRQHandler+0x30a>
 8003aec:	e14e      	b.n	8003d8c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	187a      	adds	r2, r7, r1
 8003af2:	215a      	movs	r1, #90	@ 0x5a
 8003af4:	8812      	ldrh	r2, [r2, #0]
 8003af6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d06f      	beq.n	8003be2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b02:	f3ef 8310 	mrs	r3, PRIMASK
 8003b06:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	499e      	ldr	r1, [pc, #632]	@ (8003d9c <HAL_UART_IRQHandler+0x5b8>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b34:	f3ef 8310 	mrs	r3, PRIMASK
 8003b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b3e:	2301      	movs	r3, #1
 8003b40:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			@ (mov r8, r8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	438a      	bics	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b5c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b66:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b70:	2301      	movs	r3, #1
 8003b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b76:	f383 8810 	msr	PRIMASK, r3
}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2140      	movs	r1, #64	@ 0x40
 8003b88:	438a      	bics	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b8e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2110      	movs	r1, #16
 8003bc8:	438a      	bics	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7fd fbf5 	bl	80013cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2258      	movs	r2, #88	@ 0x58
 8003bec:	5a9a      	ldrh	r2, [r3, r2]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	215a      	movs	r1, #90	@ 0x5a
 8003bf2:	5a5b      	ldrh	r3, [r3, r1]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 f8e0 	bl	8003dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c04:	e0c2      	b.n	8003d8c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2258      	movs	r2, #88	@ 0x58
 8003c0a:	5a99      	ldrh	r1, [r3, r2]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	225a      	movs	r2, #90	@ 0x5a
 8003c10:	5a9b      	ldrh	r3, [r3, r2]
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	208e      	movs	r0, #142	@ 0x8e
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	1a8a      	subs	r2, r1, r2
 8003c1a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	225a      	movs	r2, #90	@ 0x5a
 8003c20:	5a9b      	ldrh	r3, [r3, r2]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d100      	bne.n	8003c2a <HAL_UART_IRQHandler+0x446>
 8003c28:	e0b2      	b.n	8003d90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d100      	bne.n	8003c34 <HAL_UART_IRQHandler+0x450>
 8003c32:	e0ad      	b.n	8003d90 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3c:	2488      	movs	r4, #136	@ 0x88
 8003c3e:	193a      	adds	r2, r7, r4
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	2301      	movs	r3, #1
 8003c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			@ (mov r8, r8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4951      	ldr	r1, [pc, #324]	@ (8003da0 <HAL_UART_IRQHandler+0x5bc>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c72:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c74:	2484      	movs	r4, #132	@ 0x84
 8003c76:	193a      	adds	r2, r7, r4
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			@ (mov r8, r8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	438a      	bics	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	2480      	movs	r4, #128	@ 0x80
 8003cc2:	193a      	adds	r2, r7, r4
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	f383 8810 	msr	PRIMASK, r3
}
 8003cd0:	46c0      	nop			@ (mov r8, r8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2110      	movs	r1, #16
 8003cde:	438a      	bics	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	193b      	adds	r3, r7, r4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cea:	f383 8810 	msr	PRIMASK, r3
}
 8003cee:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf6:	183b      	adds	r3, r7, r0
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0011      	movs	r1, r2
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 f860 	bl	8003dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d04:	e044      	b.n	8003d90 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d06:	23a4      	movs	r3, #164	@ 0xa4
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	@ 0x80
 8003d0e:	035b      	lsls	r3, r3, #13
 8003d10:	4013      	ands	r3, r2
 8003d12:	d010      	beq.n	8003d36 <HAL_UART_IRQHandler+0x552>
 8003d14:	239c      	movs	r3, #156	@ 0x9c
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	@ 0x80
 8003d1c:	03db      	lsls	r3, r3, #15
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2280      	movs	r2, #128	@ 0x80
 8003d28:	0352      	lsls	r2, r2, #13
 8003d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 fe6e 	bl	8004a10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d34:	e02f      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d36:	23a4      	movs	r3, #164	@ 0xa4
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2280      	movs	r2, #128	@ 0x80
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d42:	23a0      	movs	r3, #160	@ 0xa0
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2280      	movs	r2, #128	@ 0x80
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01e      	beq.n	8003d94 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	0010      	movs	r0, r2
 8003d5e:	4798      	blx	r3
    }
    return;
 8003d60:	e018      	b.n	8003d94 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d62:	23a4      	movs	r3, #164	@ 0xa4
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2240      	movs	r2, #64	@ 0x40
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
 8003d6e:	23a0      	movs	r3, #160	@ 0xa0
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2240      	movs	r2, #64	@ 0x40
 8003d76:	4013      	ands	r3, r2
 8003d78:	d00d      	beq.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f000 fc64 	bl	800464a <UART_EndTransmit_IT>
    return;
 8003d82:	e008      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003d84:	46c0      	nop			@ (mov r8, r8)
 8003d86:	e006      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	e004      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003d8c:	46c0      	nop			@ (mov r8, r8)
 8003d8e:	e002      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003d90:	46c0      	nop			@ (mov r8, r8)
 8003d92:	e000      	b.n	8003d96 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003d94:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b02b      	add	sp, #172	@ 0xac
 8003d9a:	bd90      	pop	{r4, r7, pc}
 8003d9c:	fffffeff 	.word	0xfffffeff
 8003da0:	fffffedf 	.word	0xfffffedf

08003da4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dac:	46c0      	nop			@ (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dbc:	46c0      	nop			@ (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	000a      	movs	r2, r1
 8003dce:	1cbb      	adds	r3, r7, #2
 8003dd0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b002      	add	sp, #8
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de4:	231e      	movs	r3, #30
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a8d      	ldr	r2, [pc, #564]	@ (8004040 <UART_SetConfig+0x264>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	0019      	movs	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4a88      	ldr	r2, [pc, #544]	@ (8004044 <UART_SetConfig+0x268>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	0019      	movs	r1, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a7f      	ldr	r2, [pc, #508]	@ (8004048 <UART_SetConfig+0x26c>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a7b      	ldr	r2, [pc, #492]	@ (800404c <UART_SetConfig+0x270>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d127      	bne.n	8003eb2 <UART_SetConfig+0xd6>
 8003e62:	4b7b      	ldr	r3, [pc, #492]	@ (8004050 <UART_SetConfig+0x274>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	2203      	movs	r2, #3
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d00d      	beq.n	8003e8a <UART_SetConfig+0xae>
 8003e6e:	d81b      	bhi.n	8003ea8 <UART_SetConfig+0xcc>
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d014      	beq.n	8003e9e <UART_SetConfig+0xc2>
 8003e74:	d818      	bhi.n	8003ea8 <UART_SetConfig+0xcc>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <UART_SetConfig+0xa4>
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d00a      	beq.n	8003e94 <UART_SetConfig+0xb8>
 8003e7e:	e013      	b.n	8003ea8 <UART_SetConfig+0xcc>
 8003e80:	231f      	movs	r3, #31
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e021      	b.n	8003ece <UART_SetConfig+0xf2>
 8003e8a:	231f      	movs	r3, #31
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2202      	movs	r2, #2
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e01c      	b.n	8003ece <UART_SetConfig+0xf2>
 8003e94:	231f      	movs	r3, #31
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2204      	movs	r2, #4
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	e017      	b.n	8003ece <UART_SetConfig+0xf2>
 8003e9e:	231f      	movs	r3, #31
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e012      	b.n	8003ece <UART_SetConfig+0xf2>
 8003ea8:	231f      	movs	r3, #31
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	2210      	movs	r2, #16
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e00d      	b.n	8003ece <UART_SetConfig+0xf2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a67      	ldr	r2, [pc, #412]	@ (8004054 <UART_SetConfig+0x278>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d104      	bne.n	8003ec6 <UART_SetConfig+0xea>
 8003ebc:	231f      	movs	r3, #31
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e003      	b.n	8003ece <UART_SetConfig+0xf2>
 8003ec6:	231f      	movs	r3, #31
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2210      	movs	r2, #16
 8003ecc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d15c      	bne.n	8003f94 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003eda:	231f      	movs	r3, #31
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d015      	beq.n	8003f10 <UART_SetConfig+0x134>
 8003ee4:	dc18      	bgt.n	8003f18 <UART_SetConfig+0x13c>
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d00d      	beq.n	8003f06 <UART_SetConfig+0x12a>
 8003eea:	dc15      	bgt.n	8003f18 <UART_SetConfig+0x13c>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <UART_SetConfig+0x11a>
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d005      	beq.n	8003f00 <UART_SetConfig+0x124>
 8003ef4:	e010      	b.n	8003f18 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef6:	f7fe f9a9 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003efa:	0003      	movs	r3, r0
 8003efc:	61bb      	str	r3, [r7, #24]
        break;
 8003efe:	e012      	b.n	8003f26 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f00:	4b55      	ldr	r3, [pc, #340]	@ (8004058 <UART_SetConfig+0x27c>)
 8003f02:	61bb      	str	r3, [r7, #24]
        break;
 8003f04:	e00f      	b.n	8003f26 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f06:	f7fe f941 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	61bb      	str	r3, [r7, #24]
        break;
 8003f0e:	e00a      	b.n	8003f26 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f10:	2380      	movs	r3, #128	@ 0x80
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	61bb      	str	r3, [r7, #24]
        break;
 8003f16:	e006      	b.n	8003f26 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f1c:	231e      	movs	r3, #30
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
        break;
 8003f24:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d100      	bne.n	8003f2e <UART_SetConfig+0x152>
 8003f2c:	e07a      	b.n	8004024 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	005a      	lsls	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	18d2      	adds	r2, r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	0019      	movs	r1, r3
 8003f40:	0010      	movs	r0, r2
 8003f42:	f7fc f8e1 	bl	8000108 <__udivsi3>
 8003f46:	0003      	movs	r3, r0
 8003f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d91c      	bls.n	8003f8a <UART_SetConfig+0x1ae>
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	025b      	lsls	r3, r3, #9
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d217      	bcs.n	8003f8a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	200e      	movs	r0, #14
 8003f60:	183b      	adds	r3, r7, r0
 8003f62:	210f      	movs	r1, #15
 8003f64:	438a      	bics	r2, r1
 8003f66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2207      	movs	r2, #7
 8003f70:	4013      	ands	r3, r2
 8003f72:	b299      	uxth	r1, r3
 8003f74:	183b      	adds	r3, r7, r0
 8003f76:	183a      	adds	r2, r7, r0
 8003f78:	8812      	ldrh	r2, [r2, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	183a      	adds	r2, r7, r0
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	e04c      	b.n	8004024 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8a:	231e      	movs	r3, #30
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e047      	b.n	8004024 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f94:	231f      	movs	r3, #31
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d015      	beq.n	8003fca <UART_SetConfig+0x1ee>
 8003f9e:	dc18      	bgt.n	8003fd2 <UART_SetConfig+0x1f6>
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d00d      	beq.n	8003fc0 <UART_SetConfig+0x1e4>
 8003fa4:	dc15      	bgt.n	8003fd2 <UART_SetConfig+0x1f6>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <UART_SetConfig+0x1d4>
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d005      	beq.n	8003fba <UART_SetConfig+0x1de>
 8003fae:	e010      	b.n	8003fd2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe f94c 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	61bb      	str	r3, [r7, #24]
        break;
 8003fb8:	e012      	b.n	8003fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fba:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <UART_SetConfig+0x27c>)
 8003fbc:	61bb      	str	r3, [r7, #24]
        break;
 8003fbe:	e00f      	b.n	8003fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc0:	f7fe f8e4 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	61bb      	str	r3, [r7, #24]
        break;
 8003fc8:	e00a      	b.n	8003fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fca:	2380      	movs	r3, #128	@ 0x80
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	61bb      	str	r3, [r7, #24]
        break;
 8003fd0:	e006      	b.n	8003fe0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fd6:	231e      	movs	r3, #30
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
        break;
 8003fde:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01e      	beq.n	8004024 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	085a      	lsrs	r2, r3, #1
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	18d2      	adds	r2, r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	0010      	movs	r0, r2
 8003ff8:	f7fc f886 	bl	8000108 <__udivsi3>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	d90a      	bls.n	800401c <UART_SetConfig+0x240>
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	025b      	lsls	r3, r3, #9
 800400c:	429a      	cmp	r2, r3
 800400e:	d205      	bcs.n	800401c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	e003      	b.n	8004024 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800401c:	231e      	movs	r3, #30
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004030:	231e      	movs	r3, #30
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	781b      	ldrb	r3, [r3, #0]
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b008      	add	sp, #32
 800403c:	bd80      	pop	{r7, pc}
 800403e:	46c0      	nop			@ (mov r8, r8)
 8004040:	ffff69f3 	.word	0xffff69f3
 8004044:	ffffcfff 	.word	0xffffcfff
 8004048:	fffff4ff 	.word	0xfffff4ff
 800404c:	40013800 	.word	0x40013800
 8004050:	40021000 	.word	0x40021000
 8004054:	40004400 	.word	0x40004400
 8004058:	007a1200 	.word	0x007a1200

0800405c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	2201      	movs	r2, #1
 800406a:	4013      	ands	r3, r2
 800406c:	d00b      	beq.n	8004086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a4a      	ldr	r2, [pc, #296]	@ (80041a0 <UART_AdvFeatureConfig+0x144>)
 8004076:	4013      	ands	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	2202      	movs	r2, #2
 800408c:	4013      	ands	r3, r2
 800408e:	d00b      	beq.n	80040a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4a43      	ldr	r2, [pc, #268]	@ (80041a4 <UART_AdvFeatureConfig+0x148>)
 8004098:	4013      	ands	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	2204      	movs	r2, #4
 80040ae:	4013      	ands	r3, r2
 80040b0:	d00b      	beq.n	80040ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4a3b      	ldr	r2, [pc, #236]	@ (80041a8 <UART_AdvFeatureConfig+0x14c>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	0019      	movs	r1, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	2208      	movs	r2, #8
 80040d0:	4013      	ands	r3, r2
 80040d2:	d00b      	beq.n	80040ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4a34      	ldr	r2, [pc, #208]	@ (80041ac <UART_AdvFeatureConfig+0x150>)
 80040dc:	4013      	ands	r3, r2
 80040de:	0019      	movs	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	2210      	movs	r2, #16
 80040f2:	4013      	ands	r3, r2
 80040f4:	d00b      	beq.n	800410e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a2c      	ldr	r2, [pc, #176]	@ (80041b0 <UART_AdvFeatureConfig+0x154>)
 80040fe:	4013      	ands	r3, r2
 8004100:	0019      	movs	r1, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	2220      	movs	r2, #32
 8004114:	4013      	ands	r3, r2
 8004116:	d00b      	beq.n	8004130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	4a25      	ldr	r2, [pc, #148]	@ (80041b4 <UART_AdvFeatureConfig+0x158>)
 8004120:	4013      	ands	r3, r2
 8004122:	0019      	movs	r1, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	2240      	movs	r2, #64	@ 0x40
 8004136:	4013      	ands	r3, r2
 8004138:	d01d      	beq.n	8004176 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <UART_AdvFeatureConfig+0x15c>)
 8004142:	4013      	ands	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	035b      	lsls	r3, r3, #13
 800415a:	429a      	cmp	r2, r3
 800415c:	d10b      	bne.n	8004176 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <UART_AdvFeatureConfig+0x160>)
 8004166:	4013      	ands	r3, r2
 8004168:	0019      	movs	r1, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	2280      	movs	r2, #128	@ 0x80
 800417c:	4013      	ands	r3, r2
 800417e:	d00b      	beq.n	8004198 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4a0e      	ldr	r2, [pc, #56]	@ (80041c0 <UART_AdvFeatureConfig+0x164>)
 8004188:	4013      	ands	r3, r2
 800418a:	0019      	movs	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }
}
 8004198:	46c0      	nop			@ (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	fffdffff 	.word	0xfffdffff
 80041a4:	fffeffff 	.word	0xfffeffff
 80041a8:	fffbffff 	.word	0xfffbffff
 80041ac:	ffff7fff 	.word	0xffff7fff
 80041b0:	ffffefff 	.word	0xffffefff
 80041b4:	ffffdfff 	.word	0xffffdfff
 80041b8:	ffefffff 	.word	0xffefffff
 80041bc:	ff9fffff 	.word	0xff9fffff
 80041c0:	fff7ffff 	.word	0xfff7ffff

080041c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b092      	sub	sp, #72	@ 0x48
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2284      	movs	r2, #132	@ 0x84
 80041d0:	2100      	movs	r1, #0
 80041d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041d4:	f7fc ffe0 	bl	8001198 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2208      	movs	r2, #8
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d12c      	bne.n	8004244 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ec:	2280      	movs	r2, #128	@ 0x80
 80041ee:	0391      	lsls	r1, r2, #14
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4a46      	ldr	r2, [pc, #280]	@ (800430c <UART_CheckIdleState+0x148>)
 80041f4:	9200      	str	r2, [sp, #0]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f000 f88c 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d021      	beq.n	8004244 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004200:	f3ef 8310 	mrs	r3, PRIMASK
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004208:	63bb      	str	r3, [r7, #56]	@ 0x38
 800420a:	2301      	movs	r3, #1
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004210:	f383 8810 	msr	PRIMASK, r3
}
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2180      	movs	r1, #128	@ 0x80
 8004222:	438a      	bics	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422c:	f383 8810 	msr	PRIMASK, r3
}
 8004230:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2278      	movs	r2, #120	@ 0x78
 800423c:	2100      	movs	r1, #0
 800423e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e05f      	b.n	8004304 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2204      	movs	r2, #4
 800424c:	4013      	ands	r3, r2
 800424e:	2b04      	cmp	r3, #4
 8004250:	d146      	bne.n	80042e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004254:	2280      	movs	r2, #128	@ 0x80
 8004256:	03d1      	lsls	r1, r2, #15
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4a2c      	ldr	r2, [pc, #176]	@ (800430c <UART_CheckIdleState+0x148>)
 800425c:	9200      	str	r2, [sp, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	f000 f858 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 8004264:	1e03      	subs	r3, r0, #0
 8004266:	d03b      	beq.n	80042e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004268:	f3ef 8310 	mrs	r3, PRIMASK
 800426c:	60fb      	str	r3, [r7, #12]
  return(result);
 800426e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004270:	637b      	str	r3, [r7, #52]	@ 0x34
 8004272:	2301      	movs	r3, #1
 8004274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f383 8810 	msr	PRIMASK, r3
}
 800427c:	46c0      	nop			@ (mov r8, r8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4921      	ldr	r1, [pc, #132]	@ (8004310 <UART_CheckIdleState+0x14c>)
 800428a:	400a      	ands	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004290:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f383 8810 	msr	PRIMASK, r3
}
 8004298:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429a:	f3ef 8310 	mrs	r3, PRIMASK
 800429e:	61bb      	str	r3, [r7, #24]
  return(result);
 80042a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a4:	2301      	movs	r3, #1
 80042a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f383 8810 	msr	PRIMASK, r3
}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	438a      	bics	r2, r1
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	f383 8810 	msr	PRIMASK, r3
}
 80042ca:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2280      	movs	r2, #128	@ 0x80
 80042d0:	2120      	movs	r1, #32
 80042d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2278      	movs	r2, #120	@ 0x78
 80042d8:	2100      	movs	r1, #0
 80042da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e011      	b.n	8004304 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2280      	movs	r2, #128	@ 0x80
 80042ea:	2120      	movs	r1, #32
 80042ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2278      	movs	r2, #120	@ 0x78
 80042fe:	2100      	movs	r1, #0
 8004300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b010      	add	sp, #64	@ 0x40
 800430a:	bd80      	pop	{r7, pc}
 800430c:	01ffffff 	.word	0x01ffffff
 8004310:	fffffedf 	.word	0xfffffedf

08004314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	1dfb      	adds	r3, r7, #7
 8004322:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004324:	e04b      	b.n	80043be <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3301      	adds	r3, #1
 800432a:	d048      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432c:	f7fc ff34 	bl	8001198 <HAL_GetTick>
 8004330:	0002      	movs	r2, r0
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <UART_WaitOnFlagUntilTimeout+0x2e>
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e04b      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2204      	movs	r2, #4
 800434e:	4013      	ands	r3, r2
 8004350:	d035      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2208      	movs	r2, #8
 800435a:	4013      	ands	r3, r2
 800435c:	2b08      	cmp	r3, #8
 800435e:	d111      	bne.n	8004384 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2208      	movs	r2, #8
 8004366:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f8f2 	bl	8004554 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2284      	movs	r2, #132	@ 0x84
 8004374:	2108      	movs	r1, #8
 8004376:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2278      	movs	r2, #120	@ 0x78
 800437c:	2100      	movs	r1, #0
 800437e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e02c      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	2380      	movs	r3, #128	@ 0x80
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	401a      	ands	r2, r3
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	429a      	cmp	r2, r3
 8004396:	d112      	bne.n	80043be <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2280      	movs	r2, #128	@ 0x80
 800439e:	0112      	lsls	r2, r2, #4
 80043a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f000 f8d5 	bl	8004554 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2284      	movs	r2, #132	@ 0x84
 80043ae:	2120      	movs	r1, #32
 80043b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2278      	movs	r2, #120	@ 0x78
 80043b6:	2100      	movs	r1, #0
 80043b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e00f      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	425a      	negs	r2, r3
 80043ce:	4153      	adcs	r3, r2
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	001a      	movs	r2, r3
 80043d4:	1dfb      	adds	r3, r7, #7
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d0a4      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	0018      	movs	r0, r3
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b004      	add	sp, #16
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b090      	sub	sp, #64	@ 0x40
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	1dbb      	adds	r3, r7, #6
 80043f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1dba      	adds	r2, r7, #6
 8004400:	2158      	movs	r1, #88	@ 0x58
 8004402:	8812      	ldrh	r2, [r2, #0]
 8004404:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1dba      	adds	r2, r7, #6
 800440a:	215a      	movs	r1, #90	@ 0x5a
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	2380      	movs	r3, #128	@ 0x80
 800441c:	015b      	lsls	r3, r3, #5
 800441e:	429a      	cmp	r2, r3
 8004420:	d10d      	bne.n	800443e <UART_Start_Receive_IT+0x56>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <UART_Start_Receive_IT+0x4c>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	225c      	movs	r2, #92	@ 0x5c
 800442e:	4946      	ldr	r1, [pc, #280]	@ (8004548 <UART_Start_Receive_IT+0x160>)
 8004430:	5299      	strh	r1, [r3, r2]
 8004432:	e01a      	b.n	800446a <UART_Start_Receive_IT+0x82>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	225c      	movs	r2, #92	@ 0x5c
 8004438:	21ff      	movs	r1, #255	@ 0xff
 800443a:	5299      	strh	r1, [r3, r2]
 800443c:	e015      	b.n	800446a <UART_Start_Receive_IT+0x82>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <UART_Start_Receive_IT+0x7a>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d104      	bne.n	8004458 <UART_Start_Receive_IT+0x70>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	225c      	movs	r2, #92	@ 0x5c
 8004452:	21ff      	movs	r1, #255	@ 0xff
 8004454:	5299      	strh	r1, [r3, r2]
 8004456:	e008      	b.n	800446a <UART_Start_Receive_IT+0x82>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	225c      	movs	r2, #92	@ 0x5c
 800445c:	217f      	movs	r1, #127	@ 0x7f
 800445e:	5299      	strh	r1, [r3, r2]
 8004460:	e003      	b.n	800446a <UART_Start_Receive_IT+0x82>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	225c      	movs	r2, #92	@ 0x5c
 8004466:	2100      	movs	r1, #0
 8004468:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2284      	movs	r2, #132	@ 0x84
 800446e:	2100      	movs	r1, #0
 8004470:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2280      	movs	r2, #128	@ 0x80
 8004476:	2122      	movs	r1, #34	@ 0x22
 8004478:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447a:	f3ef 8310 	mrs	r3, PRIMASK
 800447e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004484:	2301      	movs	r3, #1
 8004486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	f383 8810 	msr	PRIMASK, r3
}
 800448e:	46c0      	nop			@ (mov r8, r8)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2101      	movs	r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	f383 8810 	msr	PRIMASK, r3
}
 80044aa:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	2380      	movs	r3, #128	@ 0x80
 80044b2:	015b      	lsls	r3, r3, #5
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <UART_Start_Receive_IT+0xe0>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a22      	ldr	r2, [pc, #136]	@ (800454c <UART_Start_Receive_IT+0x164>)
 80044c4:	669a      	str	r2, [r3, #104]	@ 0x68
 80044c6:	e002      	b.n	80044ce <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a21      	ldr	r2, [pc, #132]	@ (8004550 <UART_Start_Receive_IT+0x168>)
 80044cc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d019      	beq.n	800450a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d6:	f3ef 8310 	mrs	r3, PRIMASK
 80044da:	61fb      	str	r3, [r7, #28]
  return(result);
 80044dc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e0:	2301      	movs	r3, #1
 80044e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	f383 8810 	msr	PRIMASK, r3
}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2190      	movs	r1, #144	@ 0x90
 80044f8:	0049      	lsls	r1, r1, #1
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	e018      	b.n	800453c <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450a:	f3ef 8310 	mrs	r3, PRIMASK
 800450e:	613b      	str	r3, [r7, #16]
  return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004512:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2120      	movs	r1, #32
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004532:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b010      	add	sp, #64	@ 0x40
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	000001ff 	.word	0x000001ff
 800454c:	08004859 	.word	0x08004859
 8004550:	080046a1 	.word	0x080046a1

08004554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08e      	sub	sp, #56	@ 0x38
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455c:	f3ef 8310 	mrs	r3, PRIMASK
 8004560:	617b      	str	r3, [r7, #20]
  return(result);
 8004562:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004564:	637b      	str	r3, [r7, #52]	@ 0x34
 8004566:	2301      	movs	r3, #1
 8004568:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f383 8810 	msr	PRIMASK, r3
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4926      	ldr	r1, [pc, #152]	@ (8004618 <UART_EndRxTransfer+0xc4>)
 800457e:	400a      	ands	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f383 8810 	msr	PRIMASK, r3
}
 800458c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458e:	f3ef 8310 	mrs	r3, PRIMASK
 8004592:	623b      	str	r3, [r7, #32]
  return(result);
 8004594:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	633b      	str	r3, [r7, #48]	@ 0x30
 8004598:	2301      	movs	r3, #1
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	f383 8810 	msr	PRIMASK, r3
}
 80045a2:	46c0      	nop			@ (mov r8, r8)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2101      	movs	r1, #1
 80045b0:	438a      	bics	r2, r1
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	f383 8810 	msr	PRIMASK, r3
}
 80045be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d118      	bne.n	80045fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c8:	f3ef 8310 	mrs	r3, PRIMASK
 80045cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d2:	2301      	movs	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f383 8810 	msr	PRIMASK, r3
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2110      	movs	r1, #16
 80045ea:	438a      	bics	r2, r1
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f383 8810 	msr	PRIMASK, r3
}
 80045f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2280      	movs	r2, #128	@ 0x80
 80045fe:	2120      	movs	r1, #32
 8004600:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b00e      	add	sp, #56	@ 0x38
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	fffffedf 	.word	0xfffffedf

0800461c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	225a      	movs	r2, #90	@ 0x5a
 800462e:	2100      	movs	r1, #0
 8004630:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2252      	movs	r2, #82	@ 0x52
 8004636:	2100      	movs	r1, #0
 8004638:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	0018      	movs	r0, r3
 800463e:	f7ff fbb9 	bl	8003db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b004      	add	sp, #16
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004652:	f3ef 8310 	mrs	r3, PRIMASK
 8004656:	60bb      	str	r3, [r7, #8]
  return(result);
 8004658:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	2301      	movs	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f383 8810 	msr	PRIMASK, r3
}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2140      	movs	r1, #64	@ 0x40
 8004674:	438a      	bics	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0018      	movs	r0, r3
 8004694:	f7ff fb86 	bl	8003da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b006      	add	sp, #24
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b094      	sub	sp, #80	@ 0x50
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046a8:	204e      	movs	r0, #78	@ 0x4e
 80046aa:	183b      	adds	r3, r7, r0
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	215c      	movs	r1, #92	@ 0x5c
 80046b0:	5a52      	ldrh	r2, [r2, r1]
 80046b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2280      	movs	r2, #128	@ 0x80
 80046b8:	589b      	ldr	r3, [r3, r2]
 80046ba:	2b22      	cmp	r3, #34	@ 0x22
 80046bc:	d000      	beq.n	80046c0 <UART_RxISR_8BIT+0x20>
 80046be:	e0ba      	b.n	8004836 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	214c      	movs	r1, #76	@ 0x4c
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80046ca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046cc:	187b      	adds	r3, r7, r1
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	183b      	adds	r3, r7, r0
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b2d9      	uxtb	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	400a      	ands	r2, r1
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	225a      	movs	r2, #90	@ 0x5a
 80046f0:	5a9b      	ldrh	r3, [r3, r2]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b299      	uxth	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	225a      	movs	r2, #90	@ 0x5a
 80046fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	225a      	movs	r2, #90	@ 0x5a
 8004702:	5a9b      	ldrh	r3, [r3, r2]
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d000      	beq.n	800470c <UART_RxISR_8BIT+0x6c>
 800470a:	e09c      	b.n	8004846 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470c:	f3ef 8310 	mrs	r3, PRIMASK
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004716:	2301      	movs	r3, #1
 8004718:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	46c0      	nop			@ (mov r8, r8)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4948      	ldr	r1, [pc, #288]	@ (8004850 <UART_RxISR_8BIT+0x1b0>)
 800472e:	400a      	ands	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004738:	f383 8810 	msr	PRIMASK, r3
}
 800473c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473e:	f3ef 8310 	mrs	r3, PRIMASK
 8004742:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004746:	647b      	str	r3, [r7, #68]	@ 0x44
 8004748:	2301      	movs	r3, #1
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2101      	movs	r1, #1
 8004760:	438a      	bics	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004766:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476a:	f383 8810 	msr	PRIMASK, r3
}
 800476e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2280      	movs	r2, #128	@ 0x80
 8004774:	2120      	movs	r1, #32
 8004776:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	4013      	ands	r3, r2
 8004790:	d018      	beq.n	80047c4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004792:	f3ef 8310 	mrs	r3, PRIMASK
 8004796:	61bb      	str	r3, [r7, #24]
  return(result);
 8004798:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800479a:	643b      	str	r3, [r7, #64]	@ 0x40
 800479c:	2301      	movs	r3, #1
 800479e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4928      	ldr	r1, [pc, #160]	@ (8004854 <UART_RxISR_8BIT+0x1b4>)
 80047b4:	400a      	ands	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d12f      	bne.n	800482c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d2:	f3ef 8310 	mrs	r3, PRIMASK
 80047d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80047d8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047dc:	2301      	movs	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f383 8810 	msr	PRIMASK, r3
}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2110      	movs	r1, #16
 80047f4:	438a      	bics	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f383 8810 	msr	PRIMASK, r3
}
 8004802:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	2210      	movs	r2, #16
 800480c:	4013      	ands	r3, r2
 800480e:	2b10      	cmp	r3, #16
 8004810:	d103      	bne.n	800481a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2258      	movs	r2, #88	@ 0x58
 800481e:	5a9a      	ldrh	r2, [r3, r2]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0011      	movs	r1, r2
 8004824:	0018      	movs	r0, r3
 8004826:	f7ff facd 	bl	8003dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800482a:	e00c      	b.n	8004846 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0018      	movs	r0, r3
 8004830:	f7fb fd6c 	bl	800030c <HAL_UART_RxCpltCallback>
}
 8004834:	e007      	b.n	8004846 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699a      	ldr	r2, [r3, #24]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2108      	movs	r1, #8
 8004842:	430a      	orrs	r2, r1
 8004844:	619a      	str	r2, [r3, #24]
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b014      	add	sp, #80	@ 0x50
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	fffffedf 	.word	0xfffffedf
 8004854:	fbffffff 	.word	0xfbffffff

08004858 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b094      	sub	sp, #80	@ 0x50
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004860:	204e      	movs	r0, #78	@ 0x4e
 8004862:	183b      	adds	r3, r7, r0
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	215c      	movs	r1, #92	@ 0x5c
 8004868:	5a52      	ldrh	r2, [r2, r1]
 800486a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2280      	movs	r2, #128	@ 0x80
 8004870:	589b      	ldr	r3, [r3, r2]
 8004872:	2b22      	cmp	r3, #34	@ 0x22
 8004874:	d000      	beq.n	8004878 <UART_RxISR_16BIT+0x20>
 8004876:	e0ba      	b.n	80049ee <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	214c      	movs	r1, #76	@ 0x4c
 800487e:	187b      	adds	r3, r7, r1
 8004880:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004882:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004888:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800488a:	187b      	adds	r3, r7, r1
 800488c:	183a      	adds	r2, r7, r0
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	8812      	ldrh	r2, [r2, #0]
 8004892:	4013      	ands	r3, r2
 8004894:	b29a      	uxth	r2, r3
 8004896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004898:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	1c9a      	adds	r2, r3, #2
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	225a      	movs	r2, #90	@ 0x5a
 80048a8:	5a9b      	ldrh	r3, [r3, r2]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b299      	uxth	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	225a      	movs	r2, #90	@ 0x5a
 80048b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	225a      	movs	r2, #90	@ 0x5a
 80048ba:	5a9b      	ldrh	r3, [r3, r2]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d000      	beq.n	80048c4 <UART_RxISR_16BIT+0x6c>
 80048c2:	e09c      	b.n	80049fe <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	623b      	str	r3, [r7, #32]
  return(result);
 80048ca:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ce:	2301      	movs	r3, #1
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			@ (mov r8, r8)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4948      	ldr	r1, [pc, #288]	@ (8004a08 <UART_RxISR_16BIT+0x1b0>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f0:	f383 8810 	msr	PRIMASK, r3
}
 80048f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f6:	f3ef 8310 	mrs	r3, PRIMASK
 80048fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80048fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004900:	2301      	movs	r3, #1
 8004902:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	f383 8810 	msr	PRIMASK, r3
}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	438a      	bics	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004922:	f383 8810 	msr	PRIMASK, r3
}
 8004926:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2280      	movs	r2, #128	@ 0x80
 800492c:	2120      	movs	r1, #32
 800492e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	4013      	ands	r3, r2
 8004948:	d018      	beq.n	800497c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494a:	f3ef 8310 	mrs	r3, PRIMASK
 800494e:	617b      	str	r3, [r7, #20]
  return(result);
 8004950:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004954:	2301      	movs	r3, #1
 8004956:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f383 8810 	msr	PRIMASK, r3
}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4928      	ldr	r1, [pc, #160]	@ (8004a0c <UART_RxISR_16BIT+0x1b4>)
 800496c:	400a      	ands	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004972:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f383 8810 	msr	PRIMASK, r3
}
 800497a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004980:	2b01      	cmp	r3, #1
 8004982:	d12f      	bne.n	80049e4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498a:	f3ef 8310 	mrs	r3, PRIMASK
 800498e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004990:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004992:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004994:	2301      	movs	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f383 8810 	msr	PRIMASK, r3
}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2110      	movs	r1, #16
 80049ac:	438a      	bics	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f383 8810 	msr	PRIMASK, r3
}
 80049ba:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	2210      	movs	r2, #16
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d103      	bne.n	80049d2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2210      	movs	r2, #16
 80049d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2258      	movs	r2, #88	@ 0x58
 80049d6:	5a9a      	ldrh	r2, [r3, r2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0011      	movs	r1, r2
 80049dc:	0018      	movs	r0, r3
 80049de:	f7ff f9f1 	bl	8003dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049e2:	e00c      	b.n	80049fe <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7fb fc90 	bl	800030c <HAL_UART_RxCpltCallback>
}
 80049ec:	e007      	b.n	80049fe <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2108      	movs	r1, #8
 80049fa:	430a      	orrs	r2, r1
 80049fc:	619a      	str	r2, [r3, #24]
}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b014      	add	sp, #80	@ 0x50
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			@ (mov r8, r8)
 8004a08:	fffffedf 	.word	0xfffffedf
 8004a0c:	fbffffff 	.word	0xfbffffff

08004a10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a18:	46c0      	nop			@ (mov r8, r8)
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b002      	add	sp, #8
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <memset>:
 8004a20:	0003      	movs	r3, r0
 8004a22:	1882      	adds	r2, r0, r2
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	7019      	strb	r1, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <__libc_init_array>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	2600      	movs	r6, #0
 8004a34:	4c0c      	ldr	r4, [pc, #48]	@ (8004a68 <__libc_init_array+0x38>)
 8004a36:	4d0d      	ldr	r5, [pc, #52]	@ (8004a6c <__libc_init_array+0x3c>)
 8004a38:	1b64      	subs	r4, r4, r5
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	42a6      	cmp	r6, r4
 8004a3e:	d109      	bne.n	8004a54 <__libc_init_array+0x24>
 8004a40:	2600      	movs	r6, #0
 8004a42:	f000 f819 	bl	8004a78 <_init>
 8004a46:	4c0a      	ldr	r4, [pc, #40]	@ (8004a70 <__libc_init_array+0x40>)
 8004a48:	4d0a      	ldr	r5, [pc, #40]	@ (8004a74 <__libc_init_array+0x44>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	42a6      	cmp	r6, r4
 8004a50:	d105      	bne.n	8004a5e <__libc_init_array+0x2e>
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	00b3      	lsls	r3, r6, #2
 8004a56:	58eb      	ldr	r3, [r5, r3]
 8004a58:	4798      	blx	r3
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7ee      	b.n	8004a3c <__libc_init_array+0xc>
 8004a5e:	00b3      	lsls	r3, r6, #2
 8004a60:	58eb      	ldr	r3, [r5, r3]
 8004a62:	4798      	blx	r3
 8004a64:	3601      	adds	r6, #1
 8004a66:	e7f2      	b.n	8004a4e <__libc_init_array+0x1e>
 8004a68:	08004ac8 	.word	0x08004ac8
 8004a6c:	08004ac8 	.word	0x08004ac8
 8004a70:	08004acc 	.word	0x08004acc
 8004a74:	08004ac8 	.word	0x08004ac8

08004a78 <_init>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr

08004a84 <_fini>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr
